!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
s:save_cpo	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:save_cpo = &cpo$/;"	v
loaded_phpfolding	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let loaded_phpfolding = 1$/;"	v
g:DisableAutoPHPFolding	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^	let g:DisableAutoPHPFolding = 0$/;"	v
g:DisablePHPFoldingClass	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let g:DisablePHPFoldingClass = get(g:, 'DisablePHPFoldingClass', 1)$/;"	v
EnableFastPHPFolds	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^command! EnableFastPHPFolds call <SID>EnableFastPHPFolds()$/;"	c
EnablePHPFolds	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^command! -nargs=* EnablePHPFolds call <SID>EnablePHPFolds(<f-args>)$/;"	c
DisablePHPFolds	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^command! DisablePHPFolds call <SID>DisablePHPFolds()$/;"	c
g:phpDocIncludedPostfix	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let g:phpDocIncludedPostfix = '**'$/;"	v
g:phpDocBlockIncludedPostfix	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let g:phpDocBlockIncludedPostfix = '**#@+'$/;"	v
g:searchPhpDocLineCount	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let g:searchPhpDocLineCount = 1$/;"	v
g:searchEmptyLinesPostfixing	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let g:searchEmptyLinesPostfixing = 1$/;"	v
g:forceRedrawScreen	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let g:forceRedrawScreen = 0$/;"	v
s:synIDattr_exists	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:synIDattr_exists = exists('*synIDattr')$/;"	v
s:TRUE	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:TRUE = 1$/;"	v
s:FALSE	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:FALSE = 0$/;"	v
s:MODE_CREATE_FOLDS	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:MODE_CREATE_FOLDS = 1$/;"	v
s:MODE_REMEMBER_FOLD_SETTINGS	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:MODE_REMEMBER_FOLD_SETTINGS = 2$/;"	v
s:FOLD_WITH_PHPDOC	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:FOLD_WITH_PHPDOC = 1$/;"	v
s:FOLD_WITHOUT_PHPDOC	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:FOLD_WITHOUT_PHPDOC = 2$/;"	v
s:SEARCH_PAIR_START_FIRST	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:SEARCH_PAIR_START_FIRST = 1$/;"	v
s:SEARCH_PAIR_IMMEDIATELY	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^let s:SEARCH_PAIR_IMMEDIATELY = 2$/;"	v
EnableFastPHPFolds	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:EnableFastPHPFolds() " {{{$/;"	f
EnablePHPFolds	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:EnablePHPFolds(...) " {{{$/;"	f
DisablePHPFolds	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:DisablePHPFolds() " {{{$/;"	f
PHPCustomFolds	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:PHPCustomFolds() " {{{$/;"	f
PHPFoldPureBlock	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:PHPFoldPureBlock(startPattern, ...) " {{{$/;"	f
PHPFoldMarkers	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:PHPFoldMarkers(startPattern, endPattern, ...) " {{{$/;"	f
PHPFoldProperties	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:PHPFoldProperties(startPattern, endPattern, ...) " {{{$/;"	f
HandleFold	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:HandleFold() " {{{$/;"	f
FindPureBlockStart	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:FindPureBlockStart(startPattern) " {{{$/;"	f
FindPatternStart	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:FindPatternStart(startPattern) " {{{$/;"	f
FindOptionalPHPDocComment	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:FindOptionalPHPDocComment() " {{{$/;"	f
FindPureBlockEnd	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:FindPureBlockEnd(startPair, endPair, searchStartPairFirst, ...) " {{{$/;"	f
FindPatternEnd	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:FindPatternEnd(endPattern) " {{{$/;"	f
PHPFoldUse	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! s:PHPFoldUse() " {{{$/;"	f
PHPFoldText	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! PHPFoldText() " {{{$/;"	f
SkipMatch	plugged/phpfolding.vim/ftplugin/php/phpfolding.vim	/^function! SkipMatch() " {{{$/;"	f
w	plugged/phpfolding.vim/tests/demo.php	/^\/\/ [FOLDED]: global function w\/o docblock$/;"	f
dummy_function_1	plugged/phpfolding.vim/tests/demo.php	/^function dummy_function_1($a, $b, $c) {$/;"	f
w	plugged/phpfolding.vim/tests/demo.php	/^\/\/ [FOLDED]: global function w\/ docblock$/;"	f
dummy_function_2	plugged/phpfolding.vim/tests/demo.php	/^function dummy_function_2($a, $b, $c)$/;"	f
header	plugged/phpfolding.vim/tests/demo.php	/^\/\/ [NOT FOLDED]: class header w\/o docblock$/;"	c
Demo1	plugged/phpfolding.vim/tests/demo.php	/^class Demo1$/;"	c
header	plugged/phpfolding.vim/tests/demo.php	/^\/\/ [NOT FOLDED]: class header w\/ docblock$/;"	c
Demo2	plugged/phpfolding.vim/tests/demo.php	/^class Demo2$/;"	c
func_1	plugged/phpfolding.vim/tests/demo.php	/^    public static function func_1($a, $b, $c)$/;"	f
func_2	plugged/phpfolding.vim/tests/demo.php	/^    public function func_2($a, $b, $c)$/;"	f
func_3	plugged/phpfolding.vim/tests/demo.php	/^    static protected function func_3($a, $b, $c)$/;"	f
func_4	plugged/phpfolding.vim/tests/demo.php	/^    private function func_4($a, $b, $c) {$/;"	f
func_5	plugged/phpfolding.vim/tests/demo.php	/^    public static function func_5($a, $b, $c)$/;"	f
definition	plugged/phpfolding.vim/tests/demo.php	/^     * separated by empty line from function definition$/;"	f
func_6	plugged/phpfolding.vim/tests/demo.php	/^    public function func_6($a, $b, $c)$/;"	f
func_7	plugged/phpfolding.vim/tests/demo.php	/^    static protected function func_7()$/;"	f
func_8	plugged/phpfolding.vim/tests/demo.php	/^    private function func_8() {$/;"	f
header	plugged/phpfolding.vim/tests/demo.php	/^\/\/ [NOT FOLDED]: abstract class header w\/ docblock$/;"	c
comment	plugged/phpfolding.vim/tests/demo.php	/^\/** single line class comment *\/$/;"	c
Demo3	plugged/phpfolding.vim/tests/demo.php	/^abstract class Demo3$/;"	c
f1	plugged/phpfolding.vim/tests/demo.php	/^    abstract public function f1();$/;"	f
f2	plugged/phpfolding.vim/tests/demo.php	/^    abstract protected function f2();$/;"	f
f3	plugged/phpfolding.vim/tests/demo.php	/^    abstract private function f3();$/;"	f
f4	plugged/phpfolding.vim/tests/demo.php	/^    abstract public function f4();$/;"	f
f5	plugged/phpfolding.vim/tests/demo.php	/^    abstract protected function f5();$/;"	f
f6	plugged/phpfolding.vim/tests/demo.php	/^    abstract private function f6();$/;"	f
g:loaded_startify	plugged/vim-startify/plugin/startify.vim	/^let g:loaded_startify = 1$/;"	v
g:startify_locked	plugged/vim-startify/plugin/startify.vim	/^let g:startify_locked = 0$/;"	v
startify	plugged/vim-startify/plugin/startify.vim	/^augroup startify$/;"	a
update_oldfiles	plugged/vim-startify/plugin/startify.vim	/^function! s:update_oldfiles(file)$/;"	f
on_vimenter	plugged/vim-startify/plugin/startify.vim	/^function! s:on_vimenter()$/;"	f
on_vimleavepre	plugged/vim-startify/plugin/startify.vim	/^function! s:on_vimleavepre()$/;"	f
SLoad	plugged/vim-startify/plugin/startify.vim	/^command! -nargs=? -bar -bang -complete=customlist,startify#session_list SLoad   call startify#session_load(<bang>0, <f-args>)$/;"	c
SSave	plugged/vim-startify/plugin/startify.vim	/^command! -nargs=? -bar -bang -complete=customlist,startify#session_list SSave   call startify#session_save(<bang>0, <f-args>)$/;"	c
SDelete	plugged/vim-startify/plugin/startify.vim	/^command! -nargs=? -bar -bang -complete=customlist,startify#session_list SDelete call startify#session_delete(<bang>0, <f-args>)$/;"	c
SClose	plugged/vim-startify/plugin/startify.vim	/^command! -nargs=0 -bar SClose call startify#session_close()$/;"	c
Startify	plugged/vim-startify/plugin/startify.vim	/^command! -nargs=0 -bar Startify call startify#insane_in_the_membrane(0)$/;"	c
StartifyDebug	plugged/vim-startify/plugin/startify.vim	/^command! -nargs=0 -bar StartifyDebug call startify#debug()$/;"	c
<plug>(startify-open-buffers)	plugged/vim-startify/plugin/startify.vim	/^nnoremap <silent><plug>(startify-open-buffers) :<c-u>call startify#open_buffers()<cr>$/;"	m
g:autoloaded_startify	plugged/vim-startify/autoload/startify.vim	/^let g:autoloaded_startify = 1$/;"	v
startify#get_lastline	plugged/vim-startify/autoload/startify.vim	/^function! startify#get_lastline() abort$/;"	f
startify#get_separator	plugged/vim-startify/autoload/startify.vim	/^function! startify#get_separator() abort$/;"	f
startify#get_session_path	plugged/vim-startify/autoload/startify.vim	/^function! startify#get_session_path() abort$/;"	f
startify#insane_in_the_membrane	plugged/vim-startify/autoload/startify.vim	/^function! startify#insane_in_the_membrane(on_vimenter) abort$/;"	f
startify#session_load	plugged/vim-startify/autoload/startify.vim	/^function! startify#session_load(source_last_session, ...) abort$/;"	f
startify#session_save	plugged/vim-startify/autoload/startify.vim	/^function! startify#session_save(bang, ...) abort$/;"	f
startify#session_close	plugged/vim-startify/autoload/startify.vim	/^function! startify#session_close() abort$/;"	f
startify#session_write	plugged/vim-startify/autoload/startify.vim	/^function! startify#session_write(session_path)$/;"	f
startify#session_delete	plugged/vim-startify/autoload/startify.vim	/^function! startify#session_delete(bang, ...) abort$/;"	f
startify#session_delete_buffers	plugged/vim-startify/autoload/startify.vim	/^function! startify#session_delete_buffers()$/;"	f
startify#session_list	plugged/vim-startify/autoload/startify.vim	/^function! startify#session_list(lead, ...) abort$/;"	f
startify#session_list_as_string	plugged/vim-startify/autoload/startify.vim	/^function! startify#session_list_as_string(lead, ...) abort$/;"	f
startify#debug	plugged/vim-startify/autoload/startify.vim	/^function! startify#debug()$/;"	f
startify#open_buffers	plugged/vim-startify/autoload/startify.vim	/^function! startify#open_buffers(...) abort$/;"	f
startify#pad	plugged/vim-startify/autoload/startify.vim	/^function! startify#pad(lines) abort$/;"	f
startify#center	plugged/vim-startify/autoload/startify.vim	/^function! startify#center(lines) abort$/;"	f
get_lists	plugged/vim-startify/autoload/startify.vim	/^function! s:get_lists() abort$/;"	f
show_lists	plugged/vim-startify/autoload/startify.vim	/^function! s:show_lists(lists) abort$/;"	f
open_buffer	plugged/vim-startify/autoload/startify.vim	/^function! s:open_buffer(entry)$/;"	f
set_custom_section	plugged/vim-startify/autoload/startify.vim	/^function! s:set_custom_section(section) abort$/;"	f
display_by_path	plugged/vim-startify/autoload/startify.vim	/^function! s:display_by_path(path_prefix, path_format, use_env) abort$/;"	f
filter_oldfiles	plugged/vim-startify/autoload/startify.vim	/^function! s:filter_oldfiles(path_prefix, path_format, use_env) abort$/;"	f
filter_oldfiles_unsafe	plugged/vim-startify/autoload/startify.vim	/^function! s:filter_oldfiles_unsafe(path_prefix, path_format, use_env) abort$/;"	f
show_dir	plugged/vim-startify/autoload/startify.vim	/^function! s:show_dir() abort$/;"	f
show_files	plugged/vim-startify/autoload/startify.vim	/^function! s:show_files() abort$/;"	f
show_sessions	plugged/vim-startify/autoload/startify.vim	/^function! s:show_sessions() abort$/;"	f
index	plugged/vim-startify/autoload/startify.vim	/^    let index = s:get_index_as_string()$/;"	v
fname	plugged/vim-startify/autoload/startify.vim	/^    let fname = fnamemodify(sfiles[i], ':t')$/;"	v
dname	plugged/vim-startify/autoload/startify.vim	/^    let dname = sfiles[i] ==# v:this_session ? fname.' (*)' : fname$/;"	v
fname	plugged/vim-startify/autoload/startify.vim	/^      let fname = substitute(fname, '\\[', '\\[[]', 'g')$/;"	v
show_bookmarks	plugged/vim-startify/autoload/startify.vim	/^function! s:show_bookmarks() abort$/;"	f
show_commands	plugged/vim-startify/autoload/startify.vim	/^function! s:show_commands() abort$/;"	f
is_in_skiplist	plugged/vim-startify/autoload/startify.vim	/^function! s:is_in_skiplist(arg) abort$/;"	f
set_cursor	plugged/vim-startify/autoload/startify.vim	/^function! s:set_cursor() abort$/;"	f
set_mappings	plugged/vim-startify/autoload/startify.vim	/^function! s:set_mappings() abort$/;"	f
compare_by_index	plugged/vim-startify/autoload/startify.vim	/^  function! s:compare_by_index(foo, bar)$/;"	f
startify#set_batchmode	plugged/vim-startify/autoload/startify.vim	/^function! startify#set_batchmode(batchmode) abort$/;"	f
startify#set_mark	plugged/vim-startify/autoload/startify.vim	/^function! startify#set_mark(type, ...) abort$/;"	f
sort_by_tick	plugged/vim-startify/autoload/startify.vim	/^function! s:sort_by_tick(one, two)$/;"	f
check_user_options	plugged/vim-startify/autoload/startify.vim	/^function! s:check_user_options(path) abort$/;"	f
cd_to_vcs_root	plugged/vim-startify/autoload/startify.vim	/^function! s:cd_to_vcs_root(path) abort$/;"	f
cd_cmd	plugged/vim-startify/autoload/startify.vim	/^function! s:cd_cmd() abort$/;"	f
close	plugged/vim-startify/autoload/startify.vim	/^function! s:close() abort$/;"	f
get_index_as_string	plugged/vim-startify/autoload/startify.vim	/^function! s:get_index_as_string() abort$/;"	f
print_section_header	plugged/vim-startify/autoload/startify.vim	/^function! s:print_section_header() abort$/;"	f
register	plugged/vim-startify/autoload/startify.vim	/^function! s:register(line, index, type, cmd, path)$/;"	f
create_last_session_link	plugged/vim-startify/autoload/startify.vim	/^function! s:create_last_session_link(session_path)$/;"	f
init_env	plugged/vim-startify/autoload/startify.vim	/^function! s:init_env()$/;"	f
compare_by_val_len	plugged/vim-startify/autoload/startify.vim	/^  function! s:compare_by_val_len(foo, bar)$/;"	f
s:env	plugged/vim-startify/autoload/startify.vim	/^  let s:env = sort(s:env, 's:compare_by_key_len')$/;"	v
s:env	plugged/vim-startify/autoload/startify.vim	/^  let s:env = sort(s:env, 's:compare_by_val_len')$/;"	v
transform	plugged/vim-startify/autoload/startify.vim	/^function s:transform(absolute_path)$/;"	f
hide_endofbuffer_markers	plugged/vim-startify/autoload/startify.vim	/^function! s:hide_endofbuffer_markers()$/;"	f
warn	plugged/vim-startify/autoload/startify.vim	/^function! s:warn(msg) abort$/;"	f
s:sep	plugged/vim-startify/autoload/startify.vim	/^let s:sep = startify#get_separator()$/;"	v
g:startify_files_number	plugged/vim-startify/autoload/startify.vim	/^let g:startify_files_number = get(g:, 'startify_files_number', 10)$/;"	v
g:startify_enable_special	plugged/vim-startify/autoload/startify.vim	/^let g:startify_enable_special = get(g:, 'startify_enable_special', 1)$/;"	v
g:startify_relative_path	plugged/vim-startify/autoload/startify.vim	/^let g:startify_relative_path = get(g:, 'startify_relative_path') ? ':~:.' : ':p:~'$/;"	v
s:session_dir	plugged/vim-startify/autoload/startify.vim	/^let s:session_dir = startify#get_session_path()$/;"	v
g:startify_transformations	plugged/vim-startify/autoload/startify.vim	/^let g:startify_transformations = get(g:, 'startify_transformations', [])$/;"	v
g:startify_skiplist	plugged/vim-startify/autoload/startify.vim	/^let g:startify_skiplist = extend(get(g:, 'startify_skiplist', []), [$/;"	v
g:startify_padding_left	plugged/vim-startify/autoload/startify.vim	/^let g:startify_padding_left = get(g:, 'startify_padding_left', 3)$/;"	v
s:leftpad	plugged/vim-startify/autoload/startify.vim	/^let s:leftpad = repeat(' ', g:startify_padding_left)$/;"	v
s:fixed_column	plugged/vim-startify/autoload/startify.vim	/^let s:fixed_column = g:startify_padding_left + 2$/;"	v
s:batchmode	plugged/vim-startify/autoload/startify.vim	/^let s:batchmode = ''$/;"	v
get_random_offset	plugged/vim-startify/autoload/startify/fortune.vim	/^function! s:get_random_offset(max) abort$/;"	f
draw_box	plugged/vim-startify/autoload/startify/fortune.vim	/^function! s:draw_box(lines) abort$/;"	f
startify#fortune#quote	plugged/vim-startify/autoload/startify/fortune.vim	/^function! startify#fortune#quote() abort$/;"	f
startify#fortune#boxed	plugged/vim-startify/autoload/startify/fortune.vim	/^function! startify#fortune#boxed(...) abort$/;"	f
startify#fortune#cowsay	plugged/vim-startify/autoload/startify/fortune.vim	/^function! startify#fortune#cowsay(...) abort$/;"	f
startify#fortune#predefined_quotes	plugged/vim-startify/autoload/startify/fortune.vim	/^function! startify#fortune#predefined_quotes() abort$/;"	f
s:cow	plugged/vim-startify/autoload/startify/fortune.vim	/^let s:cow = [$/;"	v
g:startify_fortune_use_unicode	plugged/vim-startify/autoload/startify/fortune.vim	/^let g:startify_fortune_use_unicode = &encoding == 'utf-8' && get(g:, 'startify_fortune_use_unicode')$/;"	v
s:char_top_bottom	plugged/vim-startify/autoload/startify/fortune.vim	/^let s:char_top_bottom   = ['-', '─'][g:startify_fortune_use_unicode]$/;"	v
s:char_sides	plugged/vim-startify/autoload/startify/fortune.vim	/^let s:char_sides        = ['|', '│'][g:startify_fortune_use_unicode]$/;"	v
s:char_top_left	plugged/vim-startify/autoload/startify/fortune.vim	/^let s:char_top_left     = ['*', '╭'][g:startify_fortune_use_unicode]$/;"	v
s:char_top_right	plugged/vim-startify/autoload/startify/fortune.vim	/^let s:char_top_right    = ['*', '╮'][g:startify_fortune_use_unicode]$/;"	v
s:char_bottom_right	plugged/vim-startify/autoload/startify/fortune.vim	/^let s:char_bottom_right = ['*', '╯'][g:startify_fortune_use_unicode]$/;"	v
s:char_bottom_left	plugged/vim-startify/autoload/startify/fortune.vim	/^let s:char_bottom_left  = ['*', '╰'][g:startify_fortune_use_unicode]$/;"	v
s:predefined_quotes	plugged/vim-startify/autoload/startify/fortune.vim	/^let s:predefined_quotes = [$/;"	v
g:startify_custom_header_quotes	plugged/vim-startify/autoload/startify/fortune.vim	/^let g:startify_custom_header_quotes = exists('g:startify_custom_header_quotes')$/;"	v
s:sep	plugged/vim-startify/syntax/startify.vim	/^let s:sep = startify#get_separator()$/;"	v
s:padding_left	plugged/vim-startify/syntax/startify.vim	/^let s:padding_left = repeat(' ', get(g:, 'startify_padding_left', 3))$/;"	v
b:current_syntax	plugged/vim-startify/syntax/startify.vim	/^let b:current_syntax = 'startify'$/;"	v
s:suite	plugged/nerdtree-git-plugin/tests/test_all.vim	/^let s:suite = themis#suite('Test for nerdtree-git-plugin')$/;"	v
s:assert	plugged/nerdtree-git-plugin/tests/test_all.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.Initializing	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.Initializing() abort$/;"	f
suite.BuildGitWorkdirCommand	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.BuildGitWorkdirCommand() abort$/;"	f
suite.BuildGitStatusCommand	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.BuildGitStatusCommand() abort$/;"	f
suite.Logger	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.Logger() abort$/;"	f
suite.CustomIndicator	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.CustomIndicator() abort$/;"	f
suite.UpdateParentDirsStatus	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.UpdateParentDirsStatus() abort$/;"	f
g:loaded_nerdtree_git_status_autoload	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^let g:loaded_nerdtree_git_status_autoload = 1$/;"	v
gitstatus#isWin	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#isWin() abort$/;"	f
s:indicatorMap	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^    let s:indicatorMap = {$/;"	v
s:indicatorMap	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^    let s:indicatorMap = {$/;"	v
s:indicatorMap	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^    let s:indicatorMap = {$/;"	v
gitstatus#getIndicator	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#getIndicator(status) abort$/;"	f
gitstatus#shouldConceal	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#shouldConceal() abort$/;"	f
g:loaded_nerdtree_git_status_listener	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^let g:loaded_nerdtree_git_status_listener = 1$/;"	v
s:Listener	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^let s:Listener = {$/;"	v
Listener.OnInit	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnInit(event) abort$/;"	f
Listener.OnRefresh	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnRefresh(event) abort$/;"	f
Listener.OnRefreshFlags	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnRefreshFlags(event) abort$/;"	f
Listener.callback	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.callback(event) abort$/;"	f
Listener.SetNext	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.SetNext(cache) abort$/;"	f
Listener.HasPath	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.HasPath(path_str) abort$/;"	f
Listener.changed	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.changed() abort$/;"	f
Listener.update	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.update() abort$/;"	f
Listener.TryUpdateNERDTreeUI	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.TryUpdateNERDTreeUI() abort$/;"	f
Listener.getOption	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.getOption(name, default) abort$/;"	f
gitstatus#listener#New	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! gitstatus#listener#New(opts) abort$/;"	f
s:types	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:types = {$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters = {}$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.NUMBER]  = { nbr -> string(nbr) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.STRING]  = { str -> printf("'%s'", str) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.FUNCREF] = { fn  -> string(fn) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.LIST]    = { lst -> s:prettifyList(lst, '  \\ ', 0, '  ') }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.DICT]    = { dct -> s:prettifyDict(dct, '  \\ ', 0, '  ') }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.FLOAT]   = { flt -> string(flt) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.BOOL]    = { bol -> bol ? 'v:true' : 'v:false' }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.NULL]    = { nul -> string(nul) }$/;"	v
get_git_version	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:get_git_version() abort$/;"	f
get_git_status_output	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:get_git_status_output(workdir) abort$/;"	f
prettifyDict	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettifyDict(obj, prefix, level, indent) abort$/;"	f
prettifyList	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettifyList(obj, prefix, level, indent) abort$/;"	f
prettify	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettify(obj) abort$/;"	f
loaded_vim_devicons	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_devicons() abort$/;"	f
loaded_vim_nerdtree_syntax_highlight	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_nerdtree_syntax_highlight() abort$/;"	f
loaded_vim_nerdtree_tabs	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_nerdtree_tabs() abort$/;"	f
gitstatus#doctor#Say	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! gitstatus#doctor#Say() abort$/;"	f
g:loaded_nerdtree_git_status_job	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let g:loaded_nerdtree_git_status_job = 1$/;"	v
s:nvim	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait'))$/;"	v
s:vim8	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:Job	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:Job = {$/;"	v
newJob	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:newJob(name, opts) abort$/;"	f
Job.onStdoutCB	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onStdoutCB(data) abort$/;"	f
Job.onStderrCB	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onStderrCB(data) abort$/;"	f
Job.onExitCB	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onExitCB() abort$/;"	f
Job.onFailed	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onFailed() abort$/;"	f
Job.onSuccess	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onSuccess() abort$/;"	f
Job.run	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^    function! s:Job.run(cmd) abort$/;"	f
Job.run	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^    function! s:Job.run(cmd) abort$/;"	f
Job.run	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^    function! s:Job.run(cmd) abort$/;"	f
isEOF	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:isEOF(data) abort$/;"	f
gitstatus#job#Spawn	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! gitstatus#job#Spawn(name, cmd, opts) abort$/;"	f
g:loaded_nerdtree_git_status_log	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let g:loaded_nerdtree_git_status_log = 1$/;"	v
s:debug	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:debug   = 0 | :lockvar s:debug$/;"	v
s:info	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:info    = 1 | :lockvar s:info$/;"	v
s:warning	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:warning = 2 | :lockvar s:warning$/;"	v
s:error	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:error   = 3 | :lockvar s:error$/;"	v
s:Logger	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:Logger = {}$/;"	v
Logger.output	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.output(level, msg) abort$/;"	f
Logger.debug	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.debug(msg) abort$/;"	f
Logger.info	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.info(msg) abort$/;"	f
Logger.warning	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.warning(msg) abort$/;"	f
Logger.error	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.error(msg) abort$/;"	f
gitstatus#log#NewLogger	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! gitstatus#log#NewLogger(level) abort$/;"	f
g:loaded_nerdtree_git_status_util	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^let g:loaded_nerdtree_git_status_util = 1$/;"	v
gitstatus#util#FormatPath	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^        function! gitstatus#util#FormatPath(path) abort$/;"	f
gitstatus#util#FormatPath	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^        function! gitstatus#util#FormatPath(path) abort$/;"	f
gitstatus#util#FormatPath	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^    function! gitstatus#util#FormatPath(path) abort$/;"	f
gitstatus#util#BuildGitWorkdirCommand	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#BuildGitWorkdirCommand(root, opts) abort$/;"	f
gitstatus#util#BuildGitStatusCommand	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#BuildGitStatusCommand(root, opts) abort$/;"	f
gitstatus#util#ParseGitStatusLines	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#ParseGitStatusLines(root, statusLines, opts) abort$/;"	f
s:unmerged_status	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^let s:unmerged_status = {$/;"	v
getStatusKey	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! s:getStatusKey(x, y) abort$/;"	f
gitstatus#util#ParseGitStatusLine	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#ParseGitStatusLine(statusLine, opts) abort$/;"	f
gitstatus#util#UpdateParentDirsStatus	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#UpdateParentDirsStatus(cache, root, pathStr, statusKey, opts) abort$/;"	f
getIndicator	plugged/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:getIndicator(status) abort$/;"	f
highlightFromGroup	plugged/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:highlightFromGroup(group) abort$/;"	f
setHightlighting	plugged/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:setHightlighting() abort$/;"	f
g:loaded_nerdtree_git_status	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let g:loaded_nerdtree_git_status = 1$/;"	v
s:is_win	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:is_win = gitstatus#isWin()$/;"	v
initVariable	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:initVariable(var, value) abort$/;"	f
s:default_vals	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:default_vals = {$/;"	v
s:logger	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:logger = gitstatus#log#NewLogger(g:NERDTreeGitStatusLogLevel)$/;"	v
deprecated	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:deprecated(oldv, newv) abort$/;"	f
migrateVariable	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:migrateVariable(oldv, newv) abort$/;"	f
s:need_migrate_vals	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:need_migrate_vals = {$/;"	v
path2str	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:path2str(path) abort$/;"	f
onGitWorkdirSuccessCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitWorkdirSuccessCB(job) abort$/;"	f
onGitWorkdirFailedCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitWorkdirFailedCB(job) abort$/;"	f
getGitWorkdir	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:getGitWorkdir(ntRoot) abort$/;"	f
buildGitWorkdirCommand	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:buildGitWorkdirCommand(root) abort$/;"	f
buildGitStatusCommand	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:buildGitStatusCommand(workdir) abort$/;"	f
refreshGitStatus	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:refreshGitStatus(name, workdir) abort$/;"	f
onGitStatusSuccessCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitStatusSuccessCB(job) abort$/;"	f
onGitStatusFailedCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitStatusFailedCB(job) abort$/;"	f
onCursorHold	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onCursorHold(fname)$/;"	f
onFileUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onFileUpdate(fname)$/;"	f
hasPrefix	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:hasPrefix(text, prefix) abort$/;"	f
setupNERDTreeListeners	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:setupNERDTreeListeners(listener) abort$/;"	f
findHunk	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:findHunk(node, direction) abort$/;"	f
jumpToNextHunk	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToNextHunk(node)$/;"	f
jumpToPrevHunk	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToPrevHunk(node)$/;"	f
SID	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function s:SID()$/;"	f
setupNERDTreeKeyMappings	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:setupNERDTreeKeyMappings()$/;"	f
onNERDTreeDirChanged	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onNERDTreeDirChanged(path) abort$/;"	f
onNERDTreeInit	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onNERDTreeInit(path) abort$/;"	f
enableLiveUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:enableLiveUpdate() abort$/;"	f
disableLiveUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:disableLiveUpdate() abort$/;"	f
nerdtreegitplugin	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^augroup nerdtreegitplugin$/;"	a
s:listener	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:listener = gitstatus#listener#New(g:)$/;"	v
vim	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^import vim$/;"	i
Ncm2Source	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^from ncm2 import Ncm2Source, getLogger$/;"	i
getLogger	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^from ncm2 import Ncm2Source, getLogger$/;"	i
re	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^import re$/;"	i
subprocess	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^import subprocess$/;"	i
Popen	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^from ncm2 import Popen$/;"	i
json	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^import json$/;"	i
logger	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^logger = getLogger(__name__)$/;"	v
Source	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^class Source(Ncm2Source):$/;"	c
__init__	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^    def __init__(self, nvim):$/;"	m	class:Source
on_complete	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^    def on_complete(self, ctx, lines, cwd, phpactor_complete):$/;"	m	class:Source
snippet_placeholder	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^    def snippet_placeholder(self, num, txt=''):$/;"	m	class:Source
source	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^source = Source(vim)$/;"	v
on_complete	plugged/ncm2-phpactor/pythonx/ncm2_phpactor.py	/^on_complete = source.on_complete$/;"	v
s:loaded	plugged/ncm2-phpactor/autoload/ncm2_phpactor.vim	/^let s:loaded = 1$/;"	v
g:ncm2_phpactor_timeout	plugged/ncm2-phpactor/autoload/ncm2_phpactor.vim	/^let g:ncm2_phpactor_timeout = get(g:, 'ncm2_phpactor_timeout', 5)$/;"	v
g:ncm2_phpactor#proc	plugged/ncm2-phpactor/autoload/ncm2_phpactor.vim	/^let g:ncm2_phpactor#proc = yarp#py3({$/;"	v
g:ncm2_phpactor#source	plugged/ncm2-phpactor/autoload/ncm2_phpactor.vim	/^let g:ncm2_phpactor#source = extend(get(g:, 'ncm2_phpactor#source', {}), {$/;"	v
ncm2_phpactor#init	plugged/ncm2-phpactor/autoload/ncm2_phpactor.vim	/^func! ncm2_phpactor#init()$/;"	f
ncm2_phpactor#on_warmup	plugged/ncm2-phpactor/autoload/ncm2_phpactor.vim	/^func! ncm2_phpactor#on_warmup(ctx)$/;"	f
ncm2_phpactor#on_complete	plugged/ncm2-phpactor/autoload/ncm2_phpactor.vim	/^func! ncm2_phpactor#on_complete(ctx)$/;"	f
g:nerdtree_tabs_open_on_gui_startup	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_open_on_gui_startup = 1$/;"	v
g:nerdtree_tabs_open_on_console_startup	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_open_on_console_startup = 0$/;"	v
g:nerdtree_tabs_no_startup_for_diff	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^    let g:nerdtree_tabs_no_startup_for_diff = 1$/;"	v
g:nerdtree_tabs_smart_startup_focus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_smart_startup_focus = 1$/;"	v
g:nerdtree_tabs_open_on_new_tab	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_open_on_new_tab = 1$/;"	v
g:nerdtree_tabs_meaningful_tab_names	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_meaningful_tab_names = 1$/;"	v
g:nerdtree_tabs_autoclose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_autoclose = 1$/;"	v
g:nerdtree_tabs_synchronize_view	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_synchronize_view = 1$/;"	v
g:nerdtree_tabs_synchronize_focus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_synchronize_focus = 1$/;"	v
g:nerdtree_tabs_focus_on_files	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_focus_on_files = 0$/;"	v
g:nerdtree_tabs_startup_cd	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_startup_cd = 1$/;"	v
g:nerdtree_tabs_autofind	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_autofind = 0$/;"	v
<Plug>NERDTreeTabsOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeTabsOpen     :call <SID>NERDTreeOpenAllTabs()$/;"	m
<Plug>NERDTreeTabsClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeTabsClose    :call <SID>NERDTreeCloseAllTabs()$/;"	m
<Plug>NERDTreeTabsToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeTabsToggle   :call <SID>NERDTreeToggleAllTabs()$/;"	m
<Plug>NERDTreeTabsFind	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeTabsFind     :call <SID>NERDTreeFindFile()$/;"	m
<Plug>NERDTreeMirrorOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeMirrorOpen   :call <SID>NERDTreeMirrorOrCreate()$/;"	m
<Plug>NERDTreeMirrorToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeMirrorToggle :call <SID>NERDTreeMirrorToggle()$/;"	m
<Plug>NERDTreeSteppedOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeSteppedOpen  :call <SID>NERDTreeSteppedOpen()$/;"	m
<Plug>NERDTreeSteppedClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeSteppedClose :call <SID>NERDTreeSteppedClose()$/;"	m
<Plug>NERDTreeFocusToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeFocusToggle  :call <SID>NERDTreeFocusToggle()$/;"	m
NERDTreeTabsOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeTabsOpen     call <SID>NERDTreeOpenAllTabs()$/;"	c
NERDTreeTabsClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeTabsClose    call <SID>NERDTreeCloseAllTabs()$/;"	c
NERDTreeTabsToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeTabsToggle   call <SID>NERDTreeToggleAllTabs()$/;"	c
NERDTreeTabsFind	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeTabsFind     call <SID>NERDTreeFindFile()$/;"	c
NERDTreeMirrorOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeMirrorOpen   call <SID>NERDTreeMirrorOrCreate()$/;"	c
NERDTreeMirrorToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeMirrorToggle call <SID>NERDTreeMirrorToggle()$/;"	c
NERDTreeSteppedOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeSteppedOpen  call <SID>NERDTreeSteppedOpen()$/;"	c
NERDTreeSteppedClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeSteppedClose call <SID>NERDTreeSteppedClose()$/;"	c
NERDTreeFocusToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeFocusToggle  call <SID>NERDTreeFocusToggle()$/;"	c
NERDTreeMirrorOrCreate	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeMirrorOrCreate()$/;"	f
NERDTreeMirrorToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeMirrorToggle()$/;"	f
NERDTreeOpenAllTabs	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeOpenAllTabs()$/;"	f
NERDTreeCloseAllTabs	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeCloseAllTabs()$/;"	f
NERDTreeToggleAllTabs	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeToggleAllTabs()$/;"	f
NERDTreeSteppedOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeSteppedOpen()$/;"	f
NERDTreeSteppedClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeSteppedClose()$/;"	f
NERDTreeFocusToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeFocusToggle()$/;"	f
NERDTreeFocus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeFocus()$/;"	f
NERDTreeUnfocus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeUnfocus()$/;"	f
NERDTreeRestoreFocus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeRestoreFocus()$/;"	f
SaveGlobalFocus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:SaveGlobalFocus()$/;"	f
IfFocusOnStartup	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:IfFocusOnStartup()$/;"	f
NextNormalWindow	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NextNormalWindow()$/;"	f
CloseIfOnlyNerdTreeLeft	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:CloseIfOnlyNerdTreeLeft()$/;"	f
IsCurrentWindowNERDTree	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:IsCurrentWindowNERDTree()$/;"	f
IsNERDTreeOpenInCurrentTab	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:IsNERDTreeOpenInCurrentTab()$/;"	f
IsNERDTreePresentInCurrentTab	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:IsNERDTreePresentInCurrentTab()$/;"	f
SaveNERDTreeViewIfPossible	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:SaveNERDTreeViewIfPossible()$/;"	f
RestoreNERDTreeViewIfPossible	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:RestoreNERDTreeViewIfPossible()$/;"	f
NERDTreeFindFile	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeFindFile()$/;"	f
LoadPlugin	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:LoadPlugin()$/;"	f
VimEnterHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:VimEnterHandler()$/;"	f
s:NewTabCreated	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^let s:NewTabCreated = 0$/;"	v
TabEnterHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:TabEnterHandler()$/;"	f
TabLeaveHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:TabLeaveHandler()$/;"	f
WinEnterHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:WinEnterHandler()$/;"	f
WinLeaveHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:WinLeaveHandler()$/;"	f
BufWinEnterHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:BufWinEnterHandler()$/;"	f
BufReadHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:BufReadHandler()$/;"	f
s:save_cpo	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:save_cpo = &cpo$/;"	v
init_settings	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^function! s:init_settings(settings)$/;"	f
s:settings	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings = {$/;"	v
s:settings_if_default	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings_if_default = {$/;"	v
s:default_normal_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_normal_maps = {'!':1, '@':1, '=':1, 'q':1, 'r':1, 't':1, 'T':1, 'y':1, '[':1, ']':1, '\\':1, 'd':1, 'f':1, 'F':1, 'g':1, '"':1, 'z':1, 'c':1, 'm':1, '<':1, '>':1}$/;"	v
s:default_visual_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_visual_maps = {'i':1, 'a':1, 'f':1, 'F':1, 't':1, 'T':1}$/;"	v
g:multi_cursor_normal_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_normal_maps =$/;"	v
g:multi_cursor_visual_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_visual_maps =$/;"	v
g:multi_cursor_start_word_key	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^    let g:multi_cursor_start_word_key = g:multi_cursor_next_key$/;"	v
MultipleCursorsFind	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^command! -nargs=1 -range=% MultipleCursorsFind$/;"	c
set_file_content	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def set_file_content(string)$/;"	f
get_file_content	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def get_file_content()$/;"	f
before	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def before(string)$/;"	f
after	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def after(string)$/;"	f
type	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def type(string)$/;"	f
set_file_content	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def set_file_content(string)$/;"	f
get_file_content	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def get_file_content()$/;"	f
before	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def before(string)$/;"	f
after	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def after(string)$/;"	f
type	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def type(string)$/;"	f
s:special_keys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:special_keys = {$/;"	v
s:hi_group_cursor	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_cursor = 'multiple_cursors_cursor'$/;"	v
s:hi_group_visual	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_visual = 'multiple_cursors_visual'$/;"	v
s:before_function_called	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:before_function_called = 0$/;"	v
s:use_word_boundary	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:use_word_boundary = 1$/;"	v
s:paste_buffer_temporary_text	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_text = ''$/;"	v
s:paste_buffer_temporary_type	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_type = ''$/;"	v
<Plug>(multiple-cursors-input)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-input) <C-o>:call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-input) :call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-apply)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-apply) <C-o>:call <SID>apply_user_input_next('i')<CR>$/;"	m
<Plug>(multiple-cursors-apply)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-apply) :call <SID>apply_user_input_next('n')<CR>$/;"	m
<Plug>(multiple-cursors-detect)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-detect) <C-o>:call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-detect)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-detect) :call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-wait)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-wait) <C-o>:call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-wait)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-wait) :call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-prev)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-prev) :<C-u>call multiple_cursors#prev()<CR>$/;"	m
<Plug>(multiple-cursors-skip)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-skip) :<C-u>call multiple_cursors#skip()<CR>$/;"	m
<Plug>(multiple-cursors-new)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new) :<C-u>call multiple_cursors#new('v', 0)<CR>$/;"	m
<Plug>(multiple-cursors-new-word)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new-word) :<C-u>call multiple_cursors#new('v', 1)<CR>$/;"	m
multiple_cursors#debug	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#debug()$/;"	f
multiple_cursors#get_latency_debug_file	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#get_latency_debug_file()$/;"	f
fire_pre_triggers	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:fire_pre_triggers()$/;"	f
multiple_cursors#new	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#new(mode, word_boundary)$/;"	f
multiple_cursors#quit	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#quit()$/;"	f
multiple_cursors#prev	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#prev()$/;"	f
multiple_cursors#skip	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#skip()$/;"	f
multiple_cursors#find	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#find(start, end, pattern)$/;"	f
multiple_cursors#select_all	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#select_all(mode, word_boundary)$/;"	f
s:Cursor	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:Cursor = {}$/;"	v
Cursor.new	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.new(position)$/;"	f
Cursor.line	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.line() dict$/;"	f
Cursor.column	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.column() dict$/;"	f
Cursor.move	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.move(line, column) dict$/;"	f
Cursor.update_position	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_position(pos) dict$/;"	f
Cursor.update_highlight	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_highlight() dict$/;"	f
Cursor.update_line_length	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_line_length() dict$/;"	f
Cursor.update_visual_selection	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_visual_selection(region) dict$/;"	f
Cursor.remove_visual_selection	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.remove_visual_selection() dict$/;"	f
Cursor.restore_unnamed_register	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.restore_unnamed_register() dict$/;"	f
Cursor.save_unnamed_register	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.save_unnamed_register() dict$/;"	f
s:CursorManager	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:CursorManager = {}$/;"	v
CursorManager.new	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.new()$/;"	f
CursorManager.reset	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reset(restore_view, restore_setting, ...) dict$/;"	f
CursorManager.is_empty	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.is_empty() dict$/;"	f
CursorManager.size	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.size() dict$/;"	f
CursorManager.get_current	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get_current() dict$/;"	f
CursorManager.get	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get(i) dict$/;"	f
CursorManager.delete_current	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.delete_current() dict$/;"	f
CursorManager.remove_highlight	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.remove_highlight(hi_id) dict$/;"	f
CursorManager.debug	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.debug() dict$/;"	f
CursorManager.update_current	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.update_current() dict$/;"	f
CursorManager.next	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.next() dict$/;"	f
CursorManager.start_loop	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.start_loop() dict$/;"	f
CursorManager.loop_done	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.loop_done() dict$/;"	f
CursorManager.initialize	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.initialize() dict$/;"	f
CursorManager.restore_user_settings	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.restore_user_settings() dict$/;"	f
CursorManager.reposition_all_within_region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reposition_all_within_region(start) dict$/;"	f
CursorManager.reapply_visual_selection	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reapply_visual_selection() dict$/;"	f
CursorManager.add	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.add(pos, ...) dict$/;"	f
s:char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:char = ''$/;"	v
s:saved_char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_char = ''$/;"	v
s:from_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:from_mode = ''$/;"	v
s:to_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:to_mode = ''$/;"	v
s:saved_linecount	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_linecount = -1$/;"	v
s:saved_line	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_line = 0$/;"	v
s:bad_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:bad_input = 0$/;"	v
s:cm	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:cm = s:CursorManager.new()$/;"	v
pos	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:pos(mark)$/;"	f
region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:region(start_mark, end_mark)$/;"	f
exit_visual_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit_visual_mode()$/;"	f
select_in_visual_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:select_in_visual_mode(region)$/;"	f
update_visual_markers	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:update_visual_markers(region)$/;"	f
find_next	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:find_next(text)$/;"	f
highlight_cursor	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_cursor(pos)$/;"	f
compare_pos	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:compare_pos(l, r)$/;"	f
highlight_region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_region(region)$/;"	f
revert_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_mode(from, to)$/;"	f
s:saved_keys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_keys = ""$/;"	v
feedkeys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:feedkeys(keys)$/;"	f
process_user_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:process_user_input()$/;"	f
detect_bad_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:detect_bad_input()$/;"	f
handle_visual_IA_to_insert	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_insert()$/;"	f
handle_visual_IA_to_normal	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_normal()$/;"	f
apply_user_input_next	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_user_input_next(mode)$/;"	f
get_visual_region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_visual_region(pos)$/;"	f
strpart	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:strpart(s, i, l)$/;"	f
get_text	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_text(region)$/;"	f
get_char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_char(...)$/;"	f
exit	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit()$/;"	f
handle_special_key	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_special_key(key, mode)$/;"	f
apply_highlight_fix	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_highlight_fix()$/;"	f
revert_highlight_fix	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_highlight_fix()$/;"	f
s:retry_keys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:retry_keys = ""$/;"	v
display_error	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:display_error()$/;"	f
s:latency_debug_file	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:latency_debug_file = ''$/;"	v
start_latency_measure	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:start_latency_measure()$/;"	f
skip_latency_measure	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:skip_latency_measure()$/;"	f
end_latency_measure	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:end_latency_measure()$/;"	f
get_time_in_ms	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_time_in_ms()$/;"	f
last_char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:last_char()$/;"	f
wait_for_user_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:wait_for_user_input(mode)$/;"	f
g:loaded_syntastic_svg_validator_checker	plugged/syntastic/syntax_checkers/svg/validator.vim	/^let g:loaded_syntastic_svg_validator_checker = 1$/;"	v
g:loaded_syntastic_svg_w3_checker	plugged/syntastic/syntax_checkers/svg/w3.vim	/^let g:loaded_syntastic_svg_w3_checker = 1$/;"	v
g:loaded_syntastic_ocaml_camlp4o_checker	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^let g:loaded_syntastic_ocaml_camlp4o_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_ocaml_use_ocamlc	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_use_ocamlc = 0$/;"	v
g:syntastic_ocaml_use_janestreet_core	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_use_janestreet_core = 0$/;"	v
g:syntastic_ocaml_janestreet_core_dir	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_janestreet_core_dir = '.'$/;"	v
g:syntastic_ocaml_use_ocamlbuild	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_use_ocamlbuild = 0$/;"	v
SyntaxCheckers_ocaml_camlp4o_IsAvailable	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! SyntaxCheckers_ocaml_camlp4o_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_ocaml_camlp4o_GetLocList	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! SyntaxCheckers_ocaml_camlp4o_GetLocList() dict " {{{1$/;"	f
GetMakeprg	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetMakeprg(buf) " {{{2$/;"	f
GetOcamlcMakeprg	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetOcamlcMakeprg(buf) " {{{2$/;"	f
GetOcamlBuildMakeprg	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetOcamlBuildMakeprg(buf) " {{{2$/;"	f
GetOtherMakeprg	plugged/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetOtherMakeprg(buf) " {{{2$/;"	f
g:loaded_syntastic_ada_gcc_checker	plugged/syntastic/syntax_checkers/ada/gcc.vim	/^let g:loaded_syntastic_ada_gcc_checker = 1$/;"	v
g:syntastic_ada_compiler_options	plugged/syntastic/syntax_checkers/ada/gcc.vim	/^    let g:syntastic_ada_compiler_options = ''$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ada/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ada_gcc_IsAvailable	plugged/syntastic/syntax_checkers/ada/gcc.vim	/^function! SyntaxCheckers_ada_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_ada_gcc_GetLocList	plugged/syntastic/syntax_checkers/ada/gcc.vim	/^function! SyntaxCheckers_ada_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_pod_proselint_checker	plugged/syntastic/syntax_checkers/pod/proselint.vim	/^let g:loaded_syntastic_pod_proselint_checker = 1$/;"	v
g:loaded_syntastic_pod_podchecker_checker	plugged/syntastic/syntax_checkers/pod/podchecker.vim	/^let g:loaded_syntastic_pod_podchecker_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/pod/podchecker.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_pod_podchecker_GetLocList	plugged/syntastic/syntax_checkers/pod/podchecker.vim	/^function! SyntaxCheckers_pod_podchecker_GetLocList() dict$/;"	f
g:loaded_syntastic_vim_vint_checker	plugged/syntastic/syntax_checkers/vim/vint.vim	/^let g:loaded_syntastic_vim_vint_checker = 1$/;"	v
g:syntastic_vim_vint_sort	plugged/syntastic/syntax_checkers/vim/vint.vim	/^    let g:syntastic_vim_vint_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/vim/vint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vim_vint_GetLocList	plugged/syntastic/syntax_checkers/vim/vint.vim	/^function! SyntaxCheckers_vim_vint_GetLocList() dict$/;"	f
g:loaded_syntastic_vim_vimlint_checker	plugged/syntastic/syntax_checkers/vim/vimlint.vim	/^let g:loaded_syntastic_vim_vimlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/vim/vimlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vim_vimlint_GetHighlightRegex	plugged/syntastic/syntax_checkers/vim/vimlint.vim	/^function! SyntaxCheckers_vim_vimlint_GetHighlightRegex(item) " {{{1$/;"	f
SyntaxCheckers_vim_vimlint_IsAvailable	plugged/syntastic/syntax_checkers/vim/vimlint.vim	/^function! SyntaxCheckers_vim_vimlint_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_vim_vimlint_GetLocList	plugged/syntastic/syntax_checkers/vim/vimlint.vim	/^function! SyntaxCheckers_vim_vimlint_GetLocList() dict " {{{1$/;"	f
vimlintOutput	plugged/syntastic/syntax_checkers/vim/vimlint.vim	/^function! s:vimlintOutput(filename, pos, ev, eid, mes, obj) " {{{2$/;"	f
g:loaded_syntastic_bro_bro_checker	plugged/syntastic/syntax_checkers/bro/bro.vim	/^let g:loaded_syntastic_bro_bro_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/bro/bro.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_bro_bro_GetHighlightRegex	plugged/syntastic/syntax_checkers/bro/bro.vim	/^function! SyntaxCheckers_bro_bro_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_bro_bro_IsAvailable	plugged/syntastic/syntax_checkers/bro/bro.vim	/^function! SyntaxCheckers_bro_bro_IsAvailable() dict$/;"	f
SyntaxCheckers_bro_bro_GetLocList	plugged/syntastic/syntax_checkers/bro/bro.vim	/^function! SyntaxCheckers_bro_bro_GetLocList() dict$/;"	f
g:loaded_syntastic_xhtml_jshint_checker	plugged/syntastic/syntax_checkers/xhtml/jshint.vim	/^let g:loaded_syntastic_xhtml_jshint_checker = 1$/;"	v
g:loaded_syntastic_xhtml_tidy_checker	plugged/syntastic/syntax_checkers/xhtml/tidy.vim	/^let g:loaded_syntastic_xhtml_tidy_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/xhtml/tidy.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_xhtml_tidy_ignore_errors	plugged/syntastic/syntax_checkers/xhtml/tidy.vim	/^    let g:syntastic_xhtml_tidy_ignore_errors = []$/;"	v
TidyEncOptByFenc	plugged/syntastic/syntax_checkers/xhtml/tidy.vim	/^function! s:TidyEncOptByFenc()$/;"	f
SyntaxCheckers_xhtml_tidy_GetLocList	plugged/syntastic/syntax_checkers/xhtml/tidy.vim	/^function! SyntaxCheckers_xhtml_tidy_GetLocList() dict " {{{1$/;"	f
IgnoreError	plugged/syntastic/syntax_checkers/xhtml/tidy.vim	/^function! s:IgnoreError(text) " {{{2$/;"	f
g:loaded_syntastic_xhtml_validator_checker	plugged/syntastic/syntax_checkers/xhtml/validator.vim	/^let g:loaded_syntastic_xhtml_validator_checker = 1$/;"	v
g:loaded_syntastic_xhtml_proselint_checker	plugged/syntastic/syntax_checkers/xhtml/proselint.vim	/^let g:loaded_syntastic_xhtml_proselint_checker = 1$/;"	v
g:loaded_syntastic_xhtml_w3_checker	plugged/syntastic/syntax_checkers/xhtml/w3.vim	/^let g:loaded_syntastic_xhtml_w3_checker = 1$/;"	v
g:loaded_syntastic_trig_rapper_checker	plugged/syntastic/syntax_checkers/trig/rapper.vim	/^let g:loaded_syntastic_trig_rapper_checker = 1$/;"	v
g:loaded_syntastic_applescript_osacompile_checker	plugged/syntastic/syntax_checkers/applescript/osacompile.vim	/^let g:loaded_syntastic_applescript_osacompile_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/applescript/osacompile.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_applescript_osacompile_GetLocList	plugged/syntastic/syntax_checkers/applescript/osacompile.vim	/^function! SyntaxCheckers_applescript_osacompile_GetLocList() dict$/;"	f
g:loaded_syntastic_haml_haml_checker	plugged/syntastic/syntax_checkers/haml/haml.vim	/^let g:loaded_syntastic_haml_haml_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/haml/haml.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haml_haml_IsAvailable	plugged/syntastic/syntax_checkers/haml/haml.vim	/^function! SyntaxCheckers_haml_haml_IsAvailable() dict$/;"	f
SyntaxCheckers_haml_haml_GetLocList	plugged/syntastic/syntax_checkers/haml/haml.vim	/^function! SyntaxCheckers_haml_haml_GetLocList() dict$/;"	f
g:loaded_syntastic_haml_haml_lint_checker	plugged/syntastic/syntax_checkers/haml/haml_lint.vim	/^let g:loaded_syntastic_haml_haml_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/haml/haml_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haml_haml_lint_GetLocList	plugged/syntastic/syntax_checkers/haml/haml_lint.vim	/^function! SyntaxCheckers_haml_haml_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_mercury_mmc_checker	plugged/syntastic/syntax_checkers/mercury/mmc.vim	/^let g:loaded_syntastic_mercury_mmc_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/mercury/mmc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_mercury_mmc_GetLocList	plugged/syntastic/syntax_checkers/mercury/mmc.vim	/^function! SyntaxCheckers_mercury_mmc_GetLocList() dict$/;"	f
g:loaded_syntastic_tex_lacheck_checker	plugged/syntastic/syntax_checkers/tex/lacheck.vim	/^let g:loaded_syntastic_tex_lacheck_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/tex/lacheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_tex_lacheck_GetLocList	plugged/syntastic/syntax_checkers/tex/lacheck.vim	/^function! SyntaxCheckers_tex_lacheck_GetLocList() dict$/;"	f
g:loaded_syntastic_tex_chktex_checker	plugged/syntastic/syntax_checkers/tex/chktex.vim	/^let g:loaded_syntastic_tex_chktex_checker = 1$/;"	v
g:syntastic_tex_chktex_showmsgs	plugged/syntastic/syntax_checkers/tex/chktex.vim	/^    let g:syntastic_tex_chktex_showmsgs = 1$/;"	v
g:syntastic_tex_chktex_sort	plugged/syntastic/syntax_checkers/tex/chktex.vim	/^    let g:syntastic_tex_chktex_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/tex/chktex.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_tex_chktex_GetLocList	plugged/syntastic/syntax_checkers/tex/chktex.vim	/^function! SyntaxCheckers_tex_chktex_GetLocList() dict$/;"	f
g:loaded_syntastic_tex_proselint_checker	plugged/syntastic/syntax_checkers/tex/proselint.vim	/^let g:loaded_syntastic_tex_proselint_checker = 1$/;"	v
g:loaded_syntastic_lisp_clisp_checker	plugged/syntastic/syntax_checkers/lisp/clisp.vim	/^let g:loaded_syntastic_lisp_clisp_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/lisp/clisp.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_lisp_clisp_GetLocList	plugged/syntastic/syntax_checkers/lisp/clisp.vim	/^function! SyntaxCheckers_lisp_clisp_GetLocList() dict$/;"	f
g:loaded_syntastic_asm_gcc_checker	plugged/syntastic/syntax_checkers/asm/gcc.vim	/^let g:loaded_syntastic_asm_gcc_checker = 1$/;"	v
g:syntastic_asm_compiler_options	plugged/syntastic/syntax_checkers/asm/gcc.vim	/^    let g:syntastic_asm_compiler_options = ''$/;"	v
g:syntastic_asm_generic	plugged/syntastic/syntax_checkers/asm/gcc.vim	/^    let g:syntastic_asm_generic = 0$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/asm/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_asm_gcc_IsAvailable	plugged/syntastic/syntax_checkers/asm/gcc.vim	/^function! SyntaxCheckers_asm_gcc_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_asm_gcc_GetLocList	plugged/syntastic/syntax_checkers/asm/gcc.vim	/^function! SyntaxCheckers_asm_gcc_GetLocList() dict " {{{1$/;"	f
GetDialect	plugged/syntastic/syntax_checkers/asm/gcc.vim	/^function! s:GetDialect(buf) " {{{2$/;"	f
g:loaded_syntastic_go_golint_checker	plugged/syntastic/syntax_checkers/go/golint.vim	/^let g:loaded_syntastic_go_golint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/go/golint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_golint_GetLocList	plugged/syntastic/syntax_checkers/go/golint.vim	/^function! SyntaxCheckers_go_golint_GetLocList() dict$/;"	f
g:loaded_syntastic_go_gofmt_checker	plugged/syntastic/syntax_checkers/go/gofmt.vim	/^let g:loaded_syntastic_go_gofmt_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/go/gofmt.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_gofmt_GetLocList	plugged/syntastic/syntax_checkers/go/gofmt.vim	/^function! SyntaxCheckers_go_gofmt_GetLocList() dict$/;"	f
g:loaded_syntastic_go_govet_checker	plugged/syntastic/syntax_checkers/go/govet.vim	/^let g:loaded_syntastic_go_govet_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/go/govet.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_govet_GetLocList	plugged/syntastic/syntax_checkers/go/govet.vim	/^function! SyntaxCheckers_go_govet_GetLocList() dict$/;"	f
g:loaded_syntastic_go_gometalinter_checker	plugged/syntastic/syntax_checkers/go/gometalinter.vim	/^let g:loaded_syntastic_go_gometalinter_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/go/gometalinter.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_gometalinter_GetLocList	plugged/syntastic/syntax_checkers/go/gometalinter.vim	/^function! SyntaxCheckers_go_gometalinter_GetLocList() dict$/;"	f
g:loaded_syntastic_go_gotype_checker	plugged/syntastic/syntax_checkers/go/gotype.vim	/^let g:loaded_syntastic_go_gotype_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/go/gotype.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_gotype_GetLocList	plugged/syntastic/syntax_checkers/go/gotype.vim	/^function! SyntaxCheckers_go_gotype_GetLocList() dict$/;"	f
g:loaded_syntastic_go_golangci_lint_checker	plugged/syntastic/syntax_checkers/go/golangci_lint.vim	/^let g:loaded_syntastic_go_golangci_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/go/golangci_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_golangci_lint_GetLocList	plugged/syntastic/syntax_checkers/go/golangci_lint.vim	/^function! SyntaxCheckers_go_golangci_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_go_go_checker	plugged/syntastic/syntax_checkers/go/go.vim	/^let g:loaded_syntastic_go_go_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/go/go.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_go_IsAvailable	plugged/syntastic/syntax_checkers/go/go.vim	/^function! SyntaxCheckers_go_go_IsAvailable() dict$/;"	f
SyntaxCheckers_go_go_GetLocList	plugged/syntastic/syntax_checkers/go/go.vim	/^function! SyntaxCheckers_go_go_GetLocList() dict$/;"	f
g:loaded_syntastic_racket_code_ayatollah_checker	plugged/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^let g:loaded_syntastic_racket_code_ayatollah_checker = 1$/;"	v
g:syntastic_racket_code_ayatollah_script	plugged/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^    let g:syntastic_racket_code_ayatollah_script = 'code-ayatollah.rkt'$/;"	v
g:syntastic_racket_code_ayatollah_sort	plugged/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^    let g:syntastic_racket_code_ayatollah_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_racket_code_ayatollah_IsAvailable	plugged/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^function! SyntaxCheckers_racket_code_ayatollah_IsAvailable() dict$/;"	f
SyntaxCheckers_racket_code_ayatollah_GetLocList	plugged/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^function! SyntaxCheckers_racket_code_ayatollah_GetLocList() dict$/;"	f
g:loaded_syntastic_racket_racket_checker	plugged/syntastic/syntax_checkers/racket/racket.vim	/^let g:loaded_syntastic_racket_racket_checker=1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/racket/racket.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_racket_racket_GetLocList	plugged/syntastic/syntax_checkers/racket/racket.vim	/^function! SyntaxCheckers_racket_racket_GetLocList() dict$/;"	f
g:loaded_syntastic_nix_nix_checker	plugged/syntastic/syntax_checkers/nix/nix.vim	/^let g:loaded_syntastic_nix_nix_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/nix/nix.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_nix_nix_GetLocList	plugged/syntastic/syntax_checkers/nix/nix.vim	/^function! SyntaxCheckers_nix_nix_GetLocList() dict$/;"	f
g:loaded_syntastic_turtle_rapper_checker	plugged/syntastic/syntax_checkers/turtle/rapper.vim	/^let g:loaded_syntastic_turtle_rapper_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/turtle/rapper.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_turtle_rapper_GetHighlightRegex	plugged/syntastic/syntax_checkers/turtle/rapper.vim	/^function! SyntaxCheckers_turtle_rapper_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_turtle_rapper_GetLocList	plugged/syntastic/syntax_checkers/turtle/rapper.vim	/^function! SyntaxCheckers_turtle_rapper_GetLocList() dict$/;"	f
g:loaded_syntastic_turtle_ttl_checker	plugged/syntastic/syntax_checkers/turtle/ttl.vim	/^let g:loaded_syntastic_turtle_ttl_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/turtle/ttl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_turtle_ttl_GetHighlightRegex	plugged/syntastic/syntax_checkers/turtle/ttl.vim	/^function! SyntaxCheckers_turtle_ttl_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_turtle_ttl_GetLocList	plugged/syntastic/syntax_checkers/turtle/ttl.vim	/^function! SyntaxCheckers_turtle_ttl_GetLocList() dict$/;"	f
g:loaded_syntastic_yang_pyang_checker	plugged/syntastic/syntax_checkers/yang/pyang.vim	/^let g:loaded_syntastic_yang_pyang_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/yang/pyang.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yang_pyang_GetHighlightRegex	plugged/syntastic/syntax_checkers/yang/pyang.vim	/^function! SyntaxCheckers_yang_pyang_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_yang_pyang_GetLocList	plugged/syntastic/syntax_checkers/yang/pyang.vim	/^function! SyntaxCheckers_yang_pyang_GetLocList() dict$/;"	f
g:loaded_syntastic_lex_flex_checker	plugged/syntastic/syntax_checkers/lex/flex.vim	/^let g:loaded_syntastic_lex_flex_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/lex/flex.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_lex_flex_GetHighlightRegex	plugged/syntastic/syntax_checkers/lex/flex.vim	/^function! SyntaxCheckers_lex_flex_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_lex_flex_GetLocList	plugged/syntastic/syntax_checkers/lex/flex.vim	/^function! SyntaxCheckers_lex_flex_GetLocList() dict$/;"	f
g:loaded_syntastic_qml_qmllint_checker	plugged/syntastic/syntax_checkers/qml/qmllint.vim	/^let g:loaded_syntastic_qml_qmllint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/qml/qmllint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_qml_qmllint_GetLocList	plugged/syntastic/syntax_checkers/qml/qmllint.vim	/^function! SyntaxCheckers_qml_qmllint_GetLocList() dict$/;"	f
g:loaded_syntastic_cmake_cmakelint_checker	plugged/syntastic/syntax_checkers/cmake/cmakelint.vim	/^let g:loaded_syntastic_cmake_cmakelint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/cmake/cmakelint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cmake_cmakelint_GetLocList	plugged/syntastic/syntax_checkers/cmake/cmakelint.vim	/^function! SyntaxCheckers_cmake_cmakelint_GetLocList() dict$/;"	f
g:loaded_syntastic_asl_iasl_checker	plugged/syntastic/syntax_checkers/asl/iasl.vim	/^let g:loaded_syntastic_asl_iasl_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/asl/iasl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_asl_iasl_GetLocList	plugged/syntastic/syntax_checkers/asl/iasl.vim	/^function! SyntaxCheckers_asl_iasl_GetLocList() dict$/;"	f
g:loaded_syntastic_xquery_basex_checker	plugged/syntastic/syntax_checkers/xquery/basex.vim	/^let g:loaded_syntastic_xquery_basex_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/xquery/basex.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_xquery_basex_GetLocList	plugged/syntastic/syntax_checkers/xquery/basex.vim	/^function! SyntaxCheckers_xquery_basex_GetLocList() dict$/;"	f
g:loaded_syntastic_python_frosted_checker	plugged/syntastic/syntax_checkers/python/frosted.vim	/^let g:loaded_syntastic_python_frosted_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/frosted.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_frosted_GetLocList	plugged/syntastic/syntax_checkers/python/frosted.vim	/^function! SyntaxCheckers_python_frosted_GetLocList() dict$/;"	f
g:loaded_syntastic_python_mypy_checker	plugged/syntastic/syntax_checkers/python/mypy.vim	/^let g:loaded_syntastic_python_mypy_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/mypy.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_mypy_GetLocList	plugged/syntastic/syntax_checkers/python/mypy.vim	/^function! SyntaxCheckers_python_mypy_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pydocstyle_checker	plugged/syntastic/syntax_checkers/python/pydocstyle.vim	/^let g:loaded_syntastic_python_pydocstyle_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/pydocstyle.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_pydocstyle_GetLocList	plugged/syntastic/syntax_checkers/python/pydocstyle.vim	/^function! SyntaxCheckers_python_pydocstyle_GetLocList() dict$/;"	f
g:loaded_syntastic_python_py3kwarn_checker	plugged/syntastic/syntax_checkers/python/py3kwarn.vim	/^let g:loaded_syntastic_python_py3kwarn_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/py3kwarn.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_py3kwarn_GetLocList	plugged/syntastic/syntax_checkers/python/py3kwarn.vim	/^function! SyntaxCheckers_python_py3kwarn_GetLocList() dict$/;"	f
g:loaded_syntastic_python_flake8_checker	plugged/syntastic/syntax_checkers/python/flake8.vim	/^let g:loaded_syntastic_python_flake8_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/flake8.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_flake8_GetHighlightRegex	plugged/syntastic/syntax_checkers/python/flake8.vim	/^function! SyntaxCheckers_python_flake8_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_python_flake8_GetLocList	plugged/syntastic/syntax_checkers/python/flake8.vim	/^function! SyntaxCheckers_python_flake8_GetLocList() dict$/;"	f
g:loaded_syntastic_python_python_checker	plugged/syntastic/syntax_checkers/python/python.vim	/^let g:loaded_syntastic_python_python_checker = 1$/;"	v
g:syntastic_python_python_use_codec	plugged/syntastic/syntax_checkers/python/python.vim	/^    let g:syntastic_python_python_use_codec = 0$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/python.vim	/^let s:save_cpo = &cpo$/;"	v
s:base_path	plugged/syntastic/syntax_checkers/python/python.vim	/^let s:base_path = expand('<sfile>:p:h', 1) . syntastic#util#Slash()$/;"	v
SyntaxCheckers_python_python_IsAvailable	plugged/syntastic/syntax_checkers/python/python.vim	/^function! SyntaxCheckers_python_python_IsAvailable() dict$/;"	f
SyntaxCheckers_python_python_GetLocList	plugged/syntastic/syntax_checkers/python/python.vim	/^function! SyntaxCheckers_python_python_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pycodestyle_checker	plugged/syntastic/syntax_checkers/python/pycodestyle.vim	/^let g:loaded_syntastic_python_pycodestyle_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/pycodestyle.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_pycodestyle_GetLocList	plugged/syntastic/syntax_checkers/python/pycodestyle.vim	/^function! SyntaxCheckers_python_pycodestyle_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pyflakes_checker	plugged/syntastic/syntax_checkers/python/pyflakes.vim	/^let g:loaded_syntastic_python_pyflakes_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/pyflakes.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_pyflakes_GetHighlightRegex	plugged/syntastic/syntax_checkers/python/pyflakes.vim	/^function! SyntaxCheckers_python_pyflakes_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_python_pyflakes_GetLocList	plugged/syntastic/syntax_checkers/python/pyflakes.vim	/^function! SyntaxCheckers_python_pyflakes_GetLocList() dict$/;"	f
g:loaded_syntastic_python_prospector_checker	plugged/syntastic/syntax_checkers/python/prospector.vim	/^let g:loaded_syntastic_python_prospector_checker = 1$/;"	v
g:syntastic_python_prospector_sort	plugged/syntastic/syntax_checkers/python/prospector.vim	/^    let g:syntastic_python_prospector_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/prospector.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_prospector_IsAvailable	plugged/syntastic/syntax_checkers/python/prospector.vim	/^function! SyntaxCheckers_python_prospector_IsAvailable() dict$/;"	f
SyntaxCheckers_python_prospector_GetLocList	plugged/syntastic/syntax_checkers/python/prospector.vim	/^function! SyntaxCheckers_python_prospector_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pep8_checker	plugged/syntastic/syntax_checkers/python/pep8.vim	/^let g:loaded_syntastic_python_pep8_checker = 1$/;"	v
g:loaded_syntastic_python_pep257_checker	plugged/syntastic/syntax_checkers/python/pep257.vim	/^let g:loaded_syntastic_python_pep257_checker = 1$/;"	v
print_function	plugged/syntastic/syntax_checkers/python/compile.py	/^from __future__ import print_function$/;"	i
argv	plugged/syntastic/syntax_checkers/python/compile.py	/^from sys import argv, exit$/;"	i
exit	plugged/syntastic/syntax_checkers/python/compile.py	/^from sys import argv, exit$/;"	i
g:loaded_syntastic_python_bandit_checker	plugged/syntastic/syntax_checkers/python/bandit.vim	/^let g:loaded_syntastic_python_bandit_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/bandit.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_bandit_GetLocList	plugged/syntastic/syntax_checkers/python/bandit.vim	/^function! SyntaxCheckers_python_bandit_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pylint_checker	plugged/syntastic/syntax_checkers/python/pylint.vim	/^let g:loaded_syntastic_python_pylint_checker = 1$/;"	v
g:syntastic_python_pylint_sort	plugged/syntastic/syntax_checkers/python/pylint.vim	/^    let g:syntastic_python_pylint_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/pylint.vim	/^let s:save_cpo = &cpo$/;"	v
s:pylint_new	plugged/syntastic/syntax_checkers/python/pylint.vim	/^let s:pylint_new = -1$/;"	v
SyntaxCheckers_python_pylint_IsAvailable	plugged/syntastic/syntax_checkers/python/pylint.vim	/^function! SyntaxCheckers_python_pylint_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_python_pylint_GetLocList	plugged/syntastic/syntax_checkers/python/pylint.vim	/^function! SyntaxCheckers_python_pylint_GetLocList() dict " {{{1$/;"	f
print_function	plugged/syntastic/syntax_checkers/python/codec.py	/^from __future__ import print_function$/;"	i
argv	plugged/syntastic/syntax_checkers/python/codec.py	/^from sys import argv, exit$/;"	i
exit	plugged/syntastic/syntax_checkers/python/codec.py	/^from sys import argv, exit$/;"	i
codecs	plugged/syntastic/syntax_checkers/python/codec.py	/^import codecs$/;"	i
re	plugged/syntastic/syntax_checkers/python/codec.py	/^import re$/;"	i
os	plugged/syntastic/syntax_checkers/python/codec.py	/^import os$/;"	i
text	plugged/syntastic/syntax_checkers/python/codec.py	/^        text = fle.readlines()$/;"	v
match	plugged/syntastic/syntax_checkers/python/codec.py	/^        match = re.match(r"#\\s*coding\\s*:\\s*(?P<coding>\\w+)", text[0])$/;"	v
text	plugged/syntastic/syntax_checkers/python/codec.py	/^            text = codecs.lookup(match.groupdict()["coding"]).incrementaldecoder().decode($/;"	v
text	plugged/syntastic/syntax_checkers/python/codec.py	/^        text = ''.join(text).encode('utf-8')$/;"	v
g:loaded_syntastic_python_pylama_checker	plugged/syntastic/syntax_checkers/python/pylama.vim	/^let g:loaded_syntastic_python_pylama_checker = 1$/;"	v
g:syntastic_python_pylama_sort	plugged/syntastic/syntax_checkers/python/pylama.vim	/^    let g:syntastic_python_pylama_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/python/pylama.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_pylama_GetHighlightRegex	plugged/syntastic/syntax_checkers/python/pylama.vim	/^function! SyntaxCheckers_python_pylama_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_python_pylama_GetLocList	plugged/syntastic/syntax_checkers/python/pylama.vim	/^function! SyntaxCheckers_python_pylama_GetLocList() dict$/;"	f
g:loaded_syntastic_css_mixedindentlint_checker	plugged/syntastic/syntax_checkers/css/mixedindentlint.vim	/^let g:loaded_syntastic_css_mixedindentlint_checker = 1$/;"	v
g:loaded_syntastic_css_csslint_checker	plugged/syntastic/syntax_checkers/css/csslint.vim	/^let g:loaded_syntastic_css_csslint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/css/csslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_css_csslint_GetLocList	plugged/syntastic/syntax_checkers/css/csslint.vim	/^function! SyntaxCheckers_css_csslint_GetLocList() dict$/;"	f
g:loaded_syntastic_css_recess_checker	plugged/syntastic/syntax_checkers/css/recess.vim	/^let g:loaded_syntastic_css_recess_checker = 1$/;"	v
g:loaded_syntastic_css_prettycss_checker	plugged/syntastic/syntax_checkers/css/prettycss.vim	/^let g:loaded_syntastic_css_prettycss_checker = 1$/;"	v
g:syntastic_css_prettycss_sort	plugged/syntastic/syntax_checkers/css/prettycss.vim	/^    let g:syntastic_css_prettycss_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/css/prettycss.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_css_prettycss_GetHighlightRegex	plugged/syntastic/syntax_checkers/css/prettycss.vim	/^function! SyntaxCheckers_css_prettycss_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_css_prettycss_GetLocList	plugged/syntastic/syntax_checkers/css/prettycss.vim	/^function! SyntaxCheckers_css_prettycss_GetLocList() dict$/;"	f
g:loaded_syntastic_css_stylelint_checker	plugged/syntastic/syntax_checkers/css/stylelint.vim	/^let g:loaded_syntastic_css_stylelint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/css/stylelint.vim	/^let s:save_cpo = &cpo$/;"	v
s:args_after	plugged/syntastic/syntax_checkers/css/stylelint.vim	/^let s:args_after = {$/;"	v
SyntaxCheckers_css_stylelint_GetLocList	plugged/syntastic/syntax_checkers/css/stylelint.vim	/^function! SyntaxCheckers_css_stylelint_GetLocList() dict$/;"	f
g:loaded_syntastic_css_phpcs_checker	plugged/syntastic/syntax_checkers/css/phpcs.vim	/^let g:loaded_syntastic_css_phpcs_checker = 1$/;"	v
g:loaded_syntastic_less_recess_checker	plugged/syntastic/syntax_checkers/less/recess.vim	/^let g:loaded_syntastic_less_recess_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/less/recess.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_less_recess_GetLocList	plugged/syntastic/syntax_checkers/less/recess.vim	/^function! SyntaxCheckers_less_recess_GetLocList() dict$/;"	f
g:loaded_syntastic_less_lessc_checker	plugged/syntastic/syntax_checkers/less/lessc.vim	/^let g:loaded_syntastic_less_lessc_checker = 1$/;"	v
g:syntastic_less_use_less_lint	plugged/syntastic/syntax_checkers/less/lessc.vim	/^    let g:syntastic_less_use_less_lint = 0$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/less/lessc.vim	/^let s:save_cpo = &cpo$/;"	v
s:node_file	plugged/syntastic/syntax_checkers/less/lessc.vim	/^let s:node_file = 'node ' . syntastic#util#shescape(expand('<sfile>:p:h', 1) . syntastic#util#Slash() . 'less-lint.js')$/;"	v
SyntaxCheckers_less_lessc_IsAvailable	plugged/syntastic/syntax_checkers/less/lessc.vim	/^function! SyntaxCheckers_less_lessc_IsAvailable() dict$/;"	f
SyntaxCheckers_less_lessc_GetLocList	plugged/syntastic/syntax_checkers/less/lessc.vim	/^function! SyntaxCheckers_less_lessc_GetLocList() dict$/;"	f
g:loaded_syntastic_elixir_elixir_checker	plugged/syntastic/syntax_checkers/elixir/elixir.vim	/^let g:loaded_syntastic_elixir_elixir_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/elixir/elixir.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_elixir_elixir_IsAvailable	plugged/syntastic/syntax_checkers/elixir/elixir.vim	/^function! SyntaxCheckers_elixir_elixir_IsAvailable() dict$/;"	f
SyntaxCheckers_elixir_elixir_GetLocList	plugged/syntastic/syntax_checkers/elixir/elixir.vim	/^function! SyntaxCheckers_elixir_elixir_GetLocList() dict$/;"	f
g:loaded_syntastic_z80_z80syntaxchecker_checker	plugged/syntastic/syntax_checkers/z80/z80syntaxchecker.vim	/^let g:loaded_syntastic_z80_z80syntaxchecker_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/z80/z80syntaxchecker.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_z80_z80syntaxchecker_GetLocList	plugged/syntastic/syntax_checkers/z80/z80syntaxchecker.vim	/^function! SyntaxCheckers_z80_z80syntaxchecker_GetLocList() dict$/;"	f
g:loaded_syntastic_dockerfile_dockerfile_lint_checker	plugged/syntastic/syntax_checkers/dockerfile/dockerfile_lint.vim	/^let g:loaded_syntastic_dockerfile_dockerfile_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/dockerfile/dockerfile_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_dockerfile_dockerfile_lint_GetLocList	plugged/syntastic/syntax_checkers/dockerfile/dockerfile_lint.vim	/^function! SyntaxCheckers_dockerfile_dockerfile_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_dockerfile_hadolint_checker	plugged/syntastic/syntax_checkers/dockerfile/hadolint.vim	/^let g:loaded_syntastic_dockerfile_hadolint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/dockerfile/hadolint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_dockerfile_hadolint_GetLocList	plugged/syntastic/syntax_checkers/dockerfile/hadolint.vim	/^function! SyntaxCheckers_dockerfile_hadolint_GetLocList() dict$/;"	f
g:loaded_syntastic_dart_dartanalyzer_checker	plugged/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^let g:loaded_syntastic_dart_dartanalyzer_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_dart_dartanalyzer_GetHighlightRegex	plugged/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^function! SyntaxCheckers_dart_dartanalyzer_GetHighlightRegex(error)$/;"	f
SyntaxCheckers_dart_dartanalyzer_GetLocList	plugged/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^function! SyntaxCheckers_dart_dartanalyzer_GetLocList() dict$/;"	f
g:loaded_syntastic_eruby_ruby_checker	plugged/syntastic/syntax_checkers/eruby/ruby.vim	/^let g:loaded_syntastic_eruby_ruby_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/eruby/ruby.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_eruby_ruby_IsAvailable	plugged/syntastic/syntax_checkers/eruby/ruby.vim	/^function! SyntaxCheckers_eruby_ruby_IsAvailable() dict$/;"	f
SyntaxCheckers_eruby_ruby_GetLocList	plugged/syntastic/syntax_checkers/eruby/ruby.vim	/^function! SyntaxCheckers_eruby_ruby_GetLocList() dict$/;"	f
g:loaded_syntastic_markdown_remark_lint_checker	plugged/syntastic/syntax_checkers/markdown/remark_lint.vim	/^let g:loaded_syntastic_markdown_remark_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/markdown/remark_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_markdown_remark_lint_GetLocList	plugged/syntastic/syntax_checkers/markdown/remark_lint.vim	/^function! SyntaxCheckers_markdown_remark_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_markdown_textlint_checker	plugged/syntastic/syntax_checkers/markdown/textlint.vim	/^let g:loaded_syntastic_markdown_textlint_checker = 1$/;"	v
g:loaded_syntastic_markdown_mdl_checker	plugged/syntastic/syntax_checkers/markdown/mdl.vim	/^let g:loaded_syntastic_markdown_mdl_checker = 1$/;"	v
g:syntastic_markdown_mdl_sort	plugged/syntastic/syntax_checkers/markdown/mdl.vim	/^    let g:syntastic_markdown_mdl_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/markdown/mdl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_markdown_mdl_GetLocList	plugged/syntastic/syntax_checkers/markdown/mdl.vim	/^function! SyntaxCheckers_markdown_mdl_GetLocList() dict$/;"	f
g:loaded_syntastic_markdown_proselint_checker	plugged/syntastic/syntax_checkers/markdown/proselint.vim	/^let g:loaded_syntastic_markdown_proselint_checker = 1$/;"	v
g:loaded_syntastic_haxe_haxe_checker	plugged/syntastic/syntax_checkers/haxe/haxe.vim	/^let g:loaded_syntastic_haxe_haxe_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/haxe/haxe.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haxe_haxe_GetLocList	plugged/syntastic/syntax_checkers/haxe/haxe.vim	/^function! SyntaxCheckers_haxe_haxe_GetLocList() dict$/;"	f
g:loaded_syntastic_chef_foodcritic_checker	plugged/syntastic/syntax_checkers/chef/foodcritic.vim	/^let g:loaded_syntastic_chef_foodcritic_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/chef/foodcritic.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_chef_foodcritic_GetLocList	plugged/syntastic/syntax_checkers/chef/foodcritic.vim	/^function! SyntaxCheckers_chef_foodcritic_GetLocList() dict$/;"	f
g:loaded_syntastic_objcpp_gcc_checker	plugged/syntastic/syntax_checkers/objcpp/gcc.vim	/^let g:loaded_syntastic_objcpp_gcc_checker = 1$/;"	v
g:syntastic_objcpp_compiler_options	plugged/syntastic/syntax_checkers/objcpp/gcc.vim	/^    let g:syntastic_objcpp_compiler_options = '-std=gnu99'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/objcpp/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_objcpp_gcc_IsAvailable	plugged/syntastic/syntax_checkers/objcpp/gcc.vim	/^function! SyntaxCheckers_objcpp_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_objcpp_gcc_GetLocList	plugged/syntastic/syntax_checkers/objcpp/gcc.vim	/^function! SyntaxCheckers_objcpp_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_objcpp_oclint_checker	plugged/syntastic/syntax_checkers/objcpp/oclint.vim	/^let g:loaded_syntastic_objcpp_oclint_checker = 1$/;"	v
g:loaded_syntastic_cuda_nvcc_checker	plugged/syntastic/syntax_checkers/cuda/nvcc.vim	/^let g:loaded_syntastic_cuda_nvcc_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/cuda/nvcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cuda_nvcc_GetLocList	plugged/syntastic/syntax_checkers/cuda/nvcc.vim	/^function! SyntaxCheckers_cuda_nvcc_GetLocList() dict$/;"	f
g:loaded_syntastic_scss_sass_lint_checker	plugged/syntastic/syntax_checkers/scss/sass_lint.vim	/^let g:loaded_syntastic_scss_sass_lint_checker = 1$/;"	v
g:loaded_syntastic_scss_sass_checker	plugged/syntastic/syntax_checkers/scss/sass.vim	/^let g:loaded_syntastic_scss_sass_checker = 1$/;"	v
g:loaded_syntastic_scss_mixedindentlint_checker	plugged/syntastic/syntax_checkers/scss/mixedindentlint.vim	/^let g:loaded_syntastic_scss_mixedindentlint_checker = 1$/;"	v
g:loaded_syntastic_scss_scss_lint_checker	plugged/syntastic/syntax_checkers/scss/scss_lint.vim	/^let g:loaded_syntastic_scss_scss_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/scss/scss_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_scss_scss_lint_IsAvailable	plugged/syntastic/syntax_checkers/scss/scss_lint.vim	/^function! SyntaxCheckers_scss_scss_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_scss_scss_lint_GetLocList	plugged/syntastic/syntax_checkers/scss/scss_lint.vim	/^function! SyntaxCheckers_scss_scss_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_scss_sassc_checker	plugged/syntastic/syntax_checkers/scss/sassc.vim	/^let g:loaded_syntastic_scss_sassc_checker = 1$/;"	v
g:loaded_syntastic_perl_perl_checker	plugged/syntastic/syntax_checkers/perl/perl.vim	/^let g:loaded_syntastic_perl_perl_checker = 1$/;"	v
g:syntastic_perl_lib_path	plugged/syntastic/syntax_checkers/perl/perl.vim	/^    let g:syntastic_perl_lib_path = []$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/perl/perl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_perl_perl_IsAvailable	plugged/syntastic/syntax_checkers/perl/perl.vim	/^function! SyntaxCheckers_perl_perl_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_perl_perl_GetLocList	plugged/syntastic/syntax_checkers/perl/perl.vim	/^function! SyntaxCheckers_perl_perl_GetLocList() dict " {{{1$/;"	f
g:loaded_syntastic_perl_perlcritic_checker	plugged/syntastic/syntax_checkers/perl/perlcritic.vim	/^let g:loaded_syntastic_perl_perlcritic_checker = 1$/;"	v
g:syntastic_perl_perlcritic_thres	plugged/syntastic/syntax_checkers/perl/perlcritic.vim	/^    let g:syntastic_perl_perlcritic_thres = 5$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/perl/perlcritic.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_perl_perlcritic_GetLocList	plugged/syntastic/syntax_checkers/perl/perlcritic.vim	/^function! SyntaxCheckers_perl_perlcritic_GetLocList() dict$/;"	f
g:loaded_syntastic_perl_podchecker_checker	plugged/syntastic/syntax_checkers/perl/podchecker.vim	/^let g:loaded_syntastic_perl_podchecker_checker = 1$/;"	v
g:loaded_syntastic_typescript_lynt_checker	plugged/syntastic/syntax_checkers/typescript/lynt.vim	/^let g:loaded_syntastic_typescript_lynt_checker = 1$/;"	v
g:loaded_syntastic_typescript_tslint_checker	plugged/syntastic/syntax_checkers/typescript/tslint.vim	/^let g:loaded_syntastic_typescript_tslint_checker = 1$/;"	v
g:syntastic_typescript_tslint_sort	plugged/syntastic/syntax_checkers/typescript/tslint.vim	/^    let g:syntastic_typescript_tslint_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/typescript/tslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_typescript_tslint_GetHighlightRegex	plugged/syntastic/syntax_checkers/typescript/tslint.vim	/^function! SyntaxCheckers_typescript_tslint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_typescript_tslint_GetLocList	plugged/syntastic/syntax_checkers/typescript/tslint.vim	/^function! SyntaxCheckers_typescript_tslint_GetLocList() dict$/;"	f
g:loaded_syntastic_typescript_eslint_checker	plugged/syntastic/syntax_checkers/typescript/eslint.vim	/^let g:loaded_syntastic_typescript_eslint_checker = 1$/;"	v
g:loaded_syntastic_co_coco_checker	plugged/syntastic/syntax_checkers/co/coco.vim	/^let g:loaded_syntastic_co_coco_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/co/coco.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_co_coco_GetLocList	plugged/syntastic/syntax_checkers/co/coco.vim	/^function! SyntaxCheckers_co_coco_GetLocList() dict$/;"	f
g:loaded_syntastic_stylus_stylint_checker	plugged/syntastic/syntax_checkers/stylus/stylint.vim	/^let g:loaded_syntastic_stylus_stylint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/stylus/stylint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_stylus_stylint_GetLocList	plugged/syntastic/syntax_checkers/stylus/stylint.vim	/^function! SyntaxCheckers_stylus_stylint_GetLocList() dict$/;"	f
g:loaded_syntastic_vue_eslint_checker	plugged/syntastic/syntax_checkers/vue/eslint.vim	/^let g:loaded_syntastic_vue_eslint_checker = 1$/;"	v
g:loaded_syntastic_vue_pug_lint_vue_checker	plugged/syntastic/syntax_checkers/vue/pug_lint_vue.vim	/^let g:loaded_syntastic_vue_pug_lint_vue_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/vue/pug_lint_vue.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vue_pug_lint_vue_GetLocList	plugged/syntastic/syntax_checkers/vue/pug_lint_vue.vim	/^function! SyntaxCheckers_vue_pug_lint_vue_GetLocList() dict$/;"	f
g:loaded_syntastic_vue_stylelint_checker	plugged/syntastic/syntax_checkers/vue/stylelint.vim	/^let g:loaded_syntastic_vue_stylelint_checker = 1$/;"	v
g:loaded_syntastic_rst_rstcheck_checker	plugged/syntastic/syntax_checkers/rst/rstcheck.vim	/^let g:loaded_syntastic_rst_rstcheck_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/rst/rstcheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_rst_rstcheck_GetLocList	plugged/syntastic/syntax_checkers/rst/rstcheck.vim	/^function! SyntaxCheckers_rst_rstcheck_GetLocList() dict$/;"	f
g:loaded_syntastic_rst_proselint_checker	plugged/syntastic/syntax_checkers/rst/proselint.vim	/^let g:loaded_syntastic_rst_proselint_checker = 1$/;"	v
g:loaded_syntastic_rst_rst2pseudoxml_checker	plugged/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^let g:loaded_syntastic_rst_rst2pseudoxml_checker = 1$/;"	v
s:rst2pseudoxml	plugged/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^let s:rst2pseudoxml = (executable('rst2pseudoxml.py') && !syntastic#util#isRunningWindows()) ? 'rst2pseudoxml.py' : 'rst2pseudoxml'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_rst_rst2pseudoxml_IsAvailable	plugged/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^function! SyntaxCheckers_rst_rst2pseudoxml_IsAvailable() dict$/;"	f
SyntaxCheckers_rst_rst2pseudoxml_GetLocList	plugged/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^function! SyntaxCheckers_rst_rst2pseudoxml_GetLocList() dict$/;"	f
g:loaded_syntastic_rst_sphinx_checker	plugged/syntastic/syntax_checkers/rst/sphinx.vim	/^let g:loaded_syntastic_rst_sphinx_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/rst/sphinx.vim	/^let s:save_cpo = &cpo$/;"	v
s:sphinx_cache_location	plugged/syntastic/syntax_checkers/rst/sphinx.vim	/^let s:sphinx_cache_location = syntastic#util#tmpdir()$/;"	v
syntastic	plugged/syntastic/syntax_checkers/rst/sphinx.vim	/^augroup syntastic$/;"	a
SyntaxCheckers_rst_sphinx_GetLocList	plugged/syntastic/syntax_checkers/rst/sphinx.vim	/^function! SyntaxCheckers_rst_sphinx_GetLocList() dict$/;"	f
g:loaded_syntastic_cs_mcs_checker	plugged/syntastic/syntax_checkers/cs/mcs.vim	/^let g:loaded_syntastic_cs_mcs_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/cs/mcs.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cs_mcs_GetLocList	plugged/syntastic/syntax_checkers/cs/mcs.vim	/^function! SyntaxCheckers_cs_mcs_GetLocList() dict$/;"	f
g:loaded_syntastic_cucumber_cucumber_checker	plugged/syntastic/syntax_checkers/cucumber/cucumber.vim	/^let g:loaded_syntastic_cucumber_cucumber_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/cucumber/cucumber.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cucumber_cucumber_GetLocList	plugged/syntastic/syntax_checkers/cucumber/cucumber.vim	/^function! SyntaxCheckers_cucumber_cucumber_GetLocList() dict$/;"	f
g:loaded_syntastic_pug_pug_lint_checker	plugged/syntastic/syntax_checkers/pug/pug_lint.vim	/^let g:loaded_syntastic_pug_pug_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/pug/pug_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_pug_pug_lint_GetLocList	plugged/syntastic/syntax_checkers/pug/pug_lint.vim	/^function! SyntaxCheckers_pug_pug_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_docbk_igor_checker	plugged/syntastic/syntax_checkers/docbk/igor.vim	/^let g:loaded_syntastic_docbk_igor_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/docbk/igor.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_docbk_igor_GetLocList	plugged/syntastic/syntax_checkers/docbk/igor.vim	/^function! SyntaxCheckers_docbk_igor_GetLocList() dict$/;"	f
g:loaded_syntastic_docbk_xmllint_checker	plugged/syntastic/syntax_checkers/docbk/xmllint.vim	/^let g:loaded_syntastic_docbk_xmllint_checker = 1$/;"	v
main	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^main([File]) ->$/;"	f
main	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^main(_) ->$/;"	f
which_compile_opts_profile	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^which_compile_opts_profile(File) ->$/;"	f
which_build_tool	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^which_build_tool(Dir, Profile) ->$/;"	f
rebar_file	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^rebar_file(Dir, normal) -> filename:join(Dir, "rebar.config");$/;"	f
rebar_file	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^rebar_file(Dir, test)   ->$/;"	f
erlangmk_file	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_file(Dir) -> filename:join(Dir, "erlang.mk").$/;"	f
rebar_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^rebar_opts(RebarFile) ->$/;"	f
erlangmk_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_opts(BaseDir, Profile) ->$/;"	f
erlangmk_port_receive_loop	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_port_receive_loop(Port, Stdout, BaseDir) ->$/;"	f
erlangmk_format_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_opts(Stdout, BaseDir) ->$/;"	f
erlangmk_format_erl_libs	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erl_libs(ErlLibsLine) ->$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(ErlcOptsLines, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["+" ++ Option | Rest], Opts, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-I" ++ Opt | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-I", [C | _] = Dir | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-W" ++ Warn | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-W", Warn | Rest], Opts, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-D" ++ Opt | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-D", [C | _] = Val0 | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts([PathFlag, [_ | _] = Dir | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts([_ | Rest], Opts, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts([], Opts, _) ->$/;"	f
make_term	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^make_term(Str) ->$/;"	f
split_at_equals	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^split_at_equals([$=|T], Acc) ->$/;"	f
split_at_equals	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^split_at_equals([H|T], Acc) ->$/;"	f
split_at_equals	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^split_at_equals([], Acc) ->$/;"	f
fallback_opts	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^fallback_opts() ->$/;"	f
nested_app_ebins	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^nested_app_ebins() ->$/;"	f
apps_dir_from_src	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^apps_dir_from_src(SrcFile) ->$/;"	f
get_root	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(Dir) ->$/;"	f
get_root	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root([], Path) ->$/;"	f
get_root	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(["src", _Appname, "apps" | Tail], _Path) ->$/;"	f
get_root	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(["src" | Tail], _Path) ->$/;"	f
get_root	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(["test" | Tail], _Path) ->$/;"	f
get_root	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root([_ | Tail], Path) ->$/;"	f
translate_paths	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^translate_paths(Dir, RebarOpts) ->$/;"	f
translate_path	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^translate_path(Dir, {i, Path}) ->$/;"	f
translate_path	plugged/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^translate_path(_, Other) -> Other.$/;"	f
g:loaded_syntastic_erlang_syntaxerl_checker	plugged/syntastic/syntax_checkers/erlang/syntaxerl.vim	/^let g:loaded_syntastic_erlang_syntaxerl_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/erlang/syntaxerl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_erlang_syntaxerl_GetLocList	plugged/syntastic/syntax_checkers/erlang/syntaxerl.vim	/^function! SyntaxCheckers_erlang_syntaxerl_GetLocList() dict$/;"	f
g:loaded_syntastic_erlang_erlang_checker	plugged/syntastic/syntax_checkers/erlang/escript.vim	/^let g:loaded_syntastic_erlang_erlang_checker = 1$/;"	v
g:syntastic_erlc_include_path	plugged/syntastic/syntax_checkers/erlang/escript.vim	/^    let g:syntastic_erlc_include_path = ''$/;"	v
s:check_file	plugged/syntastic/syntax_checkers/erlang/escript.vim	/^let s:check_file = syntastic#util#shescape(expand('<sfile>:p:h', 1) . syntastic#util#Slash() . 'erlang_check_file.erl')$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/erlang/escript.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_erlang_escript_GetLocList	plugged/syntastic/syntax_checkers/erlang/escript.vim	/^function! SyntaxCheckers_erlang_escript_GetLocList() dict$/;"	f
g:loaded_syntastic_llvm_llvm_checker	plugged/syntastic/syntax_checkers/llvm/llvm.vim	/^let g:loaded_syntastic_llvm_llvm_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/llvm/llvm.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_llvm_llvm_GetLocList	plugged/syntastic/syntax_checkers/llvm/llvm.vim	/^function! SyntaxCheckers_llvm_llvm_GetLocList() dict$/;"	f
g:loaded_syntastic_spec_rpmlint_checker	plugged/syntastic/syntax_checkers/spec/rpmlint.vim	/^let g:loaded_syntastic_spec_rpmlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/spec/rpmlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_spec_rpmlint_GetLocList	plugged/syntastic/syntax_checkers/spec/rpmlint.vim	/^function! SyntaxCheckers_spec_rpmlint_GetLocList() dict$/;"	f
g:loaded_syntastic_r_svtools_checker	plugged/syntastic/syntax_checkers/r/svtools.vim	/^let g:loaded_syntastic_r_svtools_checker = 1$/;"	v
g:syntastic_r_svtools_styles	plugged/syntastic/syntax_checkers/r/svtools.vim	/^    let g:syntastic_r_svtools_styles = 'lint.style'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/r/svtools.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_r_svtools_GetHighlightRegex	plugged/syntastic/syntax_checkers/r/svtools.vim	/^function! SyntaxCheckers_r_svtools_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_r_svtools_IsAvailable	plugged/syntastic/syntax_checkers/r/svtools.vim	/^function! SyntaxCheckers_r_svtools_IsAvailable() dict$/;"	f
SyntaxCheckers_r_svtools_GetLocList	plugged/syntastic/syntax_checkers/r/svtools.vim	/^function! SyntaxCheckers_r_svtools_GetLocList() dict$/;"	f
g:loaded_syntastic_r_lint_checker	plugged/syntastic/syntax_checkers/r/lint.vim	/^let g:loaded_syntastic_r_lint_checker = 1$/;"	v
g:syntastic_r_lint_styles	plugged/syntastic/syntax_checkers/r/lint.vim	/^    let g:syntastic_r_lint_styles = 'lint.style'$/;"	v
g:syntastic_r_lint_sort	plugged/syntastic/syntax_checkers/r/lint.vim	/^    let g:syntastic_r_lint_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/r/lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_r_lint_GetHighlightRegex	plugged/syntastic/syntax_checkers/r/lint.vim	/^function! SyntaxCheckers_r_lint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_r_lint_IsAvailable	plugged/syntastic/syntax_checkers/r/lint.vim	/^function! SyntaxCheckers_r_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_r_lint_GetLocList	plugged/syntastic/syntax_checkers/r/lint.vim	/^function! SyntaxCheckers_r_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_r_lintr_checker	plugged/syntastic/syntax_checkers/r/lintr.vim	/^let g:loaded_syntastic_r_lintr_checker = 1$/;"	v
g:syntastic_r_lintr_linters	plugged/syntastic/syntax_checkers/r/lintr.vim	/^    let g:syntastic_r_lintr_linters = 'default_linters'$/;"	v
g:syntastic_r_lintr_cache	plugged/syntastic/syntax_checkers/r/lintr.vim	/^    let g:syntastic_r_lintr_cache = 'FALSE'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/r/lintr.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_r_lintr_GetHighlightRegex	plugged/syntastic/syntax_checkers/r/lintr.vim	/^function! SyntaxCheckers_r_lintr_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_r_lintr_IsAvailable	plugged/syntastic/syntax_checkers/r/lintr.vim	/^function! SyntaxCheckers_r_lintr_IsAvailable() dict$/;"	f
SyntaxCheckers_r_lintr_GetLocList	plugged/syntastic/syntax_checkers/r/lintr.vim	/^function! SyntaxCheckers_r_lintr_GetLocList() dict$/;"	f
g:loaded_syntastic_yara_yarac_checker	plugged/syntastic/syntax_checkers/yara/yara.vim	/^let g:loaded_syntastic_yara_yarac_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/yara/yara.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yara_yarac_GetLocList	plugged/syntastic/syntax_checkers/yara/yara.vim	/^function! SyntaxCheckers_yara_yarac_GetLocList() dict$/;"	f
g:loaded_syntastic_nasm_nasm_checker	plugged/syntastic/syntax_checkers/nasm/nasm.vim	/^let g:loaded_syntastic_nasm_nasm_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/nasm/nasm.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_nasm_nasm_GetLocList	plugged/syntastic/syntax_checkers/nasm/nasm.vim	/^function! SyntaxCheckers_nasm_nasm_GetLocList() dict$/;"	f
g:loaded_syntastic_rmd_lintr_checker	plugged/syntastic/syntax_checkers/rmd/lintr.vim	/^let g:loaded_syntastic_rmd_lintr_checker = 1$/;"	v
g:loaded_syntastic_java_javac_checker	plugged/syntastic/syntax_checkers/java/javac.vim	/^let g:loaded_syntastic_java_javac_checker = 1$/;"	v
g:syntastic_java_javac_maven_pom_tags	plugged/syntastic/syntax_checkers/java/javac.vim	/^let g:syntastic_java_javac_maven_pom_tags = ['build', 'properties']$/;"	v
g:syntastic_java_javac_maven_pom_properties	plugged/syntastic/syntax_checkers/java/javac.vim	/^let g:syntastic_java_javac_maven_pom_properties = {}$/;"	v
s:has_maven	plugged/syntastic/syntax_checkers/java/javac.vim	/^let s:has_maven = 0$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/java/javac.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_java_javac_executable	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_executable = 'javac'$/;"	v
g:syntastic_java_javac_exec	plugged/syntastic/syntax_checkers/java/javac.vim	/^let g:syntastic_java_javac_exec = g:syntastic_java_javac_executable$/;"	v
g:syntastic_java_maven_executable	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_maven_executable = 'mvn'$/;"	v
g:syntastic_java_javac_options	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_options = '-Xlint'$/;"	v
g:syntastic_java_maven_options	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_maven_options = ''$/;"	v
g:syntastic_java_javac_classpath	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_classpath = ''$/;"	v
g:syntastic_java_javac_delete_output	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_delete_output = 1$/;"	v
g:syntastic_java_javac_autoload_maven_classpath	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_autoload_maven_classpath = 1$/;"	v
g:syntastic_java_javac_config_file_enabled	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_config_file_enabled = 0$/;"	v
g:syntastic_java_javac_config_file	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_config_file = '.syntastic_javac_config'$/;"	v
g:syntastic_java_javac_custom_classpath_command	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_custom_classpath_command = ''$/;"	v
g:syntastic_java_javac_maven_pom_ftime	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_maven_pom_ftime = {}$/;"	v
g:syntastic_java_javac_maven_pom_classpath	plugged/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_maven_pom_classpath = {}$/;"	v
s:_FILE_SHORTCUTS	plugged/syntastic/syntax_checkers/java/javac.vim	/^let s:_FILE_SHORTCUTS = {$/;"	v
SyntasticJavacEditClasspath	plugged/syntastic/syntax_checkers/java/javac.vim	/^command! SyntasticJavacEditClasspath call s:EditClasspath()$/;"	c
SyntasticJavacEditConfig	plugged/syntastic/syntax_checkers/java/javac.vim	/^command! SyntasticJavacEditConfig    call s:EditConfig()$/;"	c
SyntaxCheckers_java_javac_IsAvailable	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! SyntaxCheckers_java_javac_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_java_javac_GetLocList	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! SyntaxCheckers_java_javac_GetLocList() dict " {{{1$/;"	f
RemoveCarriageReturn	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:RemoveCarriageReturn(line) " {{{2$/;"	f
ClassSep	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:ClassSep() " {{{2$/;"	f
AddToClasspath	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:AddToClasspath(classpath, path) " {{{2$/;"	f
SplitClasspath	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:SplitClasspath(classpath) " {{{2$/;"	f
LoadConfigFile	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:LoadConfigFile() " {{{2$/;"	f
SaveClasspath	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:SaveClasspath() " {{{2$/;"	f
EditClasspath	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:EditClasspath() " {{{2$/;"	f
SaveConfig	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:SaveConfig() " {{{2$/;"	f
EditConfig	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:EditConfig() " {{{2$/;"	f
GetMavenProperties	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:GetMavenProperties() " {{{2$/;"	f
GetMavenClasspath	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:GetMavenClasspath() " {{{2$/;"	f
MavenOutputDirectory	plugged/syntastic/syntax_checkers/java/javac.vim	/^function! s:MavenOutputDirectory() " {{{2$/;"	f
g:loaded_syntastic_java_checkstyle_checker	plugged/syntastic/syntax_checkers/java/checkstyle.vim	/^let g:loaded_syntastic_java_checkstyle_checker = 1$/;"	v
g:syntastic_java_checkstyle_classpath	plugged/syntastic/syntax_checkers/java/checkstyle.vim	/^    let g:syntastic_java_checkstyle_classpath = 'checkstyle-6.10.1-all.jar'$/;"	v
g:syntastic_java_checkstyle_conf_file	plugged/syntastic/syntax_checkers/java/checkstyle.vim	/^    let g:syntastic_java_checkstyle_conf_file = 'sun_checks.xml'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/java/checkstyle.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_java_checkstyle_IsAvailable	plugged/syntastic/syntax_checkers/java/checkstyle.vim	/^function! SyntaxCheckers_java_checkstyle_IsAvailable() dict$/;"	f
SyntaxCheckers_java_checkstyle_GetLocList	plugged/syntastic/syntax_checkers/java/checkstyle.vim	/^function! SyntaxCheckers_java_checkstyle_GetLocList() dict$/;"	f
g:loaded_syntastic_html_jshint_checker	plugged/syntastic/syntax_checkers/html/jshint.vim	/^let g:loaded_syntastic_html_jshint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/html/jshint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_html_jshint_IsAvailable	plugged/syntastic/syntax_checkers/html/jshint.vim	/^function! SyntaxCheckers_html_jshint_IsAvailable() dict$/;"	f
SyntaxCheckers_html_jshint_GetLocList	plugged/syntastic/syntax_checkers/html/jshint.vim	/^function! SyntaxCheckers_html_jshint_GetLocList() dict$/;"	f
g:loaded_syntastic_html_tidy_checker	plugged/syntastic/syntax_checkers/html/tidy.vim	/^let g:loaded_syntastic_html_tidy_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/html/tidy.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_html_tidy_ignore_errors	plugged/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_ignore_errors = []$/;"	v
g:syntastic_html_tidy_blocklevel_tags	plugged/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_blocklevel_tags = []$/;"	v
g:syntastic_html_tidy_inline_tags	plugged/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_inline_tags = []$/;"	v
g:syntastic_html_tidy_empty_tags	plugged/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_empty_tags = []$/;"	v
s:IGNORE_ERRORS	plugged/syntastic/syntax_checkers/html/tidy.vim	/^let s:IGNORE_ERRORS = [$/;"	v
s:BLOCKLEVEL_TAGS	plugged/syntastic/syntax_checkers/html/tidy.vim	/^let s:BLOCKLEVEL_TAGS = [$/;"	v
s:INLINE_TAGS	plugged/syntastic/syntax_checkers/html/tidy.vim	/^let s:INLINE_TAGS = [$/;"	v
s:EMPTY_TAGS	plugged/syntastic/syntax_checkers/html/tidy.vim	/^let s:EMPTY_TAGS = [$/;"	v
SyntaxCheckers_html_tidy_GetLocList	plugged/syntastic/syntax_checkers/html/tidy.vim	/^function! SyntaxCheckers_html_tidy_GetLocList() dict " {{{1$/;"	f
TidyEncOptByFenc	plugged/syntastic/syntax_checkers/html/tidy.vim	/^function! s:TidyEncOptByFenc() " {{{2$/;"	f
IgnoreError	plugged/syntastic/syntax_checkers/html/tidy.vim	/^function! s:IgnoreError(text) " {{{2$/;"	f
NewTags	plugged/syntastic/syntax_checkers/html/tidy.vim	/^function! s:NewTags(name) " {{{2$/;"	f
Args	plugged/syntastic/syntax_checkers/html/tidy.vim	/^function! s:Args() " {{{2$/;"	f
g:loaded_syntastic_html_htmlhint_checker	plugged/syntastic/syntax_checkers/html/htmlhint.vim	/^let g:loaded_syntastic_html_htmlhint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/html/htmlhint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_html_htmlhint_IsAvailable	plugged/syntastic/syntax_checkers/html/htmlhint.vim	/^function! SyntaxCheckers_html_htmlhint_IsAvailable() dict$/;"	f
SyntaxCheckers_html_htmlhint_GetLocList	plugged/syntastic/syntax_checkers/html/htmlhint.vim	/^function! SyntaxCheckers_html_htmlhint_GetLocList() dict$/;"	f
g:loaded_syntastic_html_textlint_checker	plugged/syntastic/syntax_checkers/html/textlint.vim	/^let g:loaded_syntastic_html_textlint_checker = 1$/;"	v
g:loaded_syntastic_html_validator_checker	plugged/syntastic/syntax_checkers/html/validator.vim	/^let g:loaded_syntastic_html_validator_checker=1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/html/validator.vim	/^let s:save_cpo = &cpo$/;"	v
s:DEFAULTS	plugged/syntastic/syntax_checkers/html/validator.vim	/^let s:DEFAULTS = {$/;"	v
s:CONTENT_TYPE	plugged/syntastic/syntax_checkers/html/validator.vim	/^let s:CONTENT_TYPE = {$/;"	v
SyntaxCheckers_html_validator_GetLocList	plugged/syntastic/syntax_checkers/html/validator.vim	/^function! SyntaxCheckers_html_validator_GetLocList() dict " {{{1$/;"	f
g:loaded_syntastic_html_proselint_checker	plugged/syntastic/syntax_checkers/html/proselint.vim	/^let g:loaded_syntastic_html_proselint_checker = 1$/;"	v
g:loaded_syntastic_html_w3_checker	plugged/syntastic/syntax_checkers/html/w3.vim	/^let g:loaded_syntastic_html_w3_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/html/w3.vim	/^let s:save_cpo = &cpo$/;"	v
s:DEFAULTS	plugged/syntastic/syntax_checkers/html/w3.vim	/^let s:DEFAULTS = {$/;"	v
SyntaxCheckers_html_w3_GetLocList	plugged/syntastic/syntax_checkers/html/w3.vim	/^function! SyntaxCheckers_html_w3_GetLocList() dict " {{{1$/;"	f
g:loaded_syntastic_html_eslint_checker	plugged/syntastic/syntax_checkers/html/eslint.vim	/^let g:loaded_syntastic_html_eslint_checker = 1$/;"	v
g:loaded_syntastic_html_gjslint_checker	plugged/syntastic/syntax_checkers/html/gjslint.vim	/^let g:loaded_syntastic_html_gjslint_checker = 1$/;"	v
g:loaded_syntastic_html_stylelint_checker	plugged/syntastic/syntax_checkers/html/stylelint.vim	/^let g:loaded_syntastic_html_stylelint_checker = 1$/;"	v
g:loaded_syntastic_haskell_hdevtools_checker	plugged/syntastic/syntax_checkers/haskell/hdevtools.vim	/^let g:loaded_syntastic_haskell_hdevtools_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/haskell/hdevtools.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haskell_hdevtools_GetLocList	plugged/syntastic/syntax_checkers/haskell/hdevtools.vim	/^function! SyntaxCheckers_haskell_hdevtools_GetLocList() dict$/;"	f
g:loaded_syntastic_haskell_hlint_checker	plugged/syntastic/syntax_checkers/haskell/hlint.vim	/^let g:loaded_syntastic_haskell_hlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/haskell/hlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haskell_hlint_IsAvailable	plugged/syntastic/syntax_checkers/haskell/hlint.vim	/^function! SyntaxCheckers_haskell_hlint_IsAvailable() dict$/;"	f
SyntaxCheckers_haskell_hlint_GetLocList	plugged/syntastic/syntax_checkers/haskell/hlint.vim	/^function! SyntaxCheckers_haskell_hlint_GetLocList() dict$/;"	f
g:loaded_syntastic_haskell_scan_checker	plugged/syntastic/syntax_checkers/haskell/scan.vim	/^let g:loaded_syntastic_haskell_scan_checker = 1$/;"	v
g:syntastic_haskell_scan_sort	plugged/syntastic/syntax_checkers/haskell/scan.vim	/^    let g:syntastic_haskell_scan_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/haskell/scan.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haskell_scan_GetLocList	plugged/syntastic/syntax_checkers/haskell/scan.vim	/^function! SyntaxCheckers_haskell_scan_GetLocList() dict$/;"	f
g:loaded_syntastic_php_phpmd_checker	plugged/syntastic/syntax_checkers/php/phpmd.vim	/^let g:loaded_syntastic_php_phpmd_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/php/phpmd.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_phpmd_GetHighlightRegex	plugged/syntastic/syntax_checkers/php/phpmd.vim	/^function! SyntaxCheckers_php_phpmd_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_php_phpmd_GetLocList	plugged/syntastic/syntax_checkers/php/phpmd.vim	/^function! SyntaxCheckers_php_phpmd_GetLocList() dict$/;"	f
g:loaded_syntastic_php_phpstan_checker	plugged/syntastic/syntax_checkers/php/phpstan.vim	/^let g:loaded_syntastic_php_phpstan_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/php/phpstan.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_phpstan_IsAvailable	plugged/syntastic/syntax_checkers/php/phpstan.vim	/^function! SyntaxCheckers_php_phpstan_IsAvailable() dict$/;"	f
SyntaxCheckers_php_phpstan_GetLocList	plugged/syntastic/syntax_checkers/php/phpstan.vim	/^function! SyntaxCheckers_php_phpstan_GetLocList() dict$/;"	f
g:loaded_syntastic_php_php_checker	plugged/syntastic/syntax_checkers/php/php.vim	/^let g:loaded_syntastic_php_php_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/php/php.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_php_GetHighlightRegex	plugged/syntastic/syntax_checkers/php/php.vim	/^function! SyntaxCheckers_php_php_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_php_php_GetLocList	plugged/syntastic/syntax_checkers/php/php.vim	/^function! SyntaxCheckers_php_php_GetLocList() dict$/;"	f
g:loaded_syntastic_php_phplint_checker	plugged/syntastic/syntax_checkers/php/phplint.vim	/^let g:loaded_syntastic_php_phplint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/php/phplint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_phplint_GetHighlightRegex	plugged/syntastic/syntax_checkers/php/phplint.vim	/^function! SyntaxCheckers_php_phplint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_php_phplint_GetLocList	plugged/syntastic/syntax_checkers/php/phplint.vim	/^function! SyntaxCheckers_php_phplint_GetLocList() dict$/;"	f
g:loaded_syntastic_php_phpcs_checker	plugged/syntastic/syntax_checkers/php/phpcs.vim	/^let g:loaded_syntastic_php_phpcs_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/php/phpcs.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_phpcs_GetLocList	plugged/syntastic/syntax_checkers/php/phpcs.vim	/^function! SyntaxCheckers_php_phpcs_GetLocList() dict$/;"	f
g:loaded_syntastic_rnc_rnv_checker	plugged/syntastic/syntax_checkers/rnc/rnv.vim	/^let g:loaded_syntastic_rnc_rnv_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/rnc/rnv.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_rnc_rnv_GetLocList	plugged/syntastic/syntax_checkers/rnc/rnv.vim	/^function! SyntaxCheckers_rnc_rnv_GetLocList() dict$/;"	f
g:loaded_syntastic_lua_luac_checker	plugged/syntastic/syntax_checkers/lua/luac.vim	/^let g:loaded_syntastic_lua_luac_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/lua/luac.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_lua_luac_GetHighlightRegex	plugged/syntastic/syntax_checkers/lua/luac.vim	/^function! SyntaxCheckers_lua_luac_GetHighlightRegex(pos)$/;"	f
SyntaxCheckers_lua_luac_GetLocList	plugged/syntastic/syntax_checkers/lua/luac.vim	/^function! SyntaxCheckers_lua_luac_GetLocList() dict$/;"	f
g:loaded_syntastic_lua_luacheck_checker	plugged/syntastic/syntax_checkers/lua/luacheck.vim	/^let g:loaded_syntastic_lua_luacheck_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/lua/luacheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_lua_luacheck_GetHighlightRegex	plugged/syntastic/syntax_checkers/lua/luacheck.vim	/^function! SyntaxCheckers_lua_luacheck_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_lua_luacheck_GetLocList	plugged/syntastic/syntax_checkers/lua/luacheck.vim	/^function! SyntaxCheckers_lua_luacheck_GetLocList() dict$/;"	f
g:loaded_syntastic_xml_xmllint_checker	plugged/syntastic/syntax_checkers/xml/xmllint.vim	/^let g:loaded_syntastic_xml_xmllint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/xml/xmllint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_xml_xmllint_GetLocList	plugged/syntastic/syntax_checkers/xml/xmllint.vim	/^function! SyntaxCheckers_xml_xmllint_GetLocList() dict$/;"	f
g:loaded_syntastic_xml_plutil_checker	plugged/syntastic/syntax_checkers/xml/plutil.vim	/^let g:loaded_syntastic_xml_plutil_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/xml/plutil.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_xml_plutil_GetLocList	plugged/syntastic/syntax_checkers/xml/plutil.vim	/^function! SyntaxCheckers_xml_plutil_GetLocList() dict$/;"	f
g:loaded_syntastic_solidity_solhint_checker	plugged/syntastic/syntax_checkers/solidity/solhint.vim	/^let g:loaded_syntastic_solidity_solhint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/solidity/solhint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_solidity_solhint_GetLocList	plugged/syntastic/syntax_checkers/solidity/solhint.vim	/^function! SyntaxCheckers_solidity_solhint_GetLocList() dict$/;"	f
g:loaded_syntastic_solidity_solium_checker	plugged/syntastic/syntax_checkers/solidity/solium.vim	/^let g:loaded_syntastic_solidity_solium_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/solidity/solium.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_solidity_solium_GetLocList	plugged/syntastic/syntax_checkers/solidity/solium.vim	/^function! SyntaxCheckers_solidity_solium_GetLocList() dict$/;"	f
g:loaded_syntastic_solidity_solc_checker	plugged/syntastic/syntax_checkers/solidity/solc.vim	/^let g:loaded_syntastic_solidity_solc_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/solidity/solc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_solidity_solc_GetLocList	plugged/syntastic/syntax_checkers/solidity/solc.vim	/^function! SyntaxCheckers_solidity_solc_GetLocList() dict$/;"	f
g:loaded_syntastic_bemhtml_bemhtmllint_checker	plugged/syntastic/syntax_checkers/bemhtml/bemhtmllint.vim	/^let g:loaded_syntastic_bemhtml_bemhtmllint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/bemhtml/bemhtmllint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_bemhtml_bemhtmllint_GetLocList	plugged/syntastic/syntax_checkers/bemhtml/bemhtmllint.vim	/^function SyntaxCheckers_bemhtml_bemhtmllint_GetLocList() dict$/;"	f
g:loaded_syntastic_glsl_cgc_checker	plugged/syntastic/syntax_checkers/glsl/cgc.vim	/^let g:loaded_syntastic_glsl_cgc_checker = 1$/;"	v
s:glsl_extensions	plugged/syntastic/syntax_checkers/glsl/cgc.vim	/^let s:glsl_extensions = {$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/glsl/cgc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_glsl_cgc_GetLocList	plugged/syntastic/syntax_checkers/glsl/cgc.vim	/^function! SyntaxCheckers_glsl_cgc_GetLocList() dict " {{{1$/;"	f
GetProfile	plugged/syntastic/syntax_checkers/glsl/cgc.vim	/^function! s:GetProfile(buf) " {{{2$/;"	f
g:loaded_syntastic_ansible_ansible_lint_checker	plugged/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^let g:loaded_syntastic_ansible_ansible_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ansible_ansible_lint_IsAvailable	plugged/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^function! SyntaxCheckers_ansible_ansible_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_ansible_ansible_lint_GetLocList	plugged/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^function! SyntaxCheckers_ansible_ansible_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_sh_bashate_checker	plugged/syntastic/syntax_checkers/sh/bashate.vim	/^let g:loaded_syntastic_sh_bashate_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sh/bashate.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sh_bashate_GetLocList	plugged/syntastic/syntax_checkers/sh/bashate.vim	/^function! SyntaxCheckers_sh_bashate_GetLocList() dict$/;"	f
g:loaded_syntastic_sh_shellcheck_checker	plugged/syntastic/syntax_checkers/sh/shellcheck.vim	/^let g:loaded_syntastic_sh_shellcheck_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sh/shellcheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sh_shellcheck_GetLocList	plugged/syntastic/syntax_checkers/sh/shellcheck.vim	/^function! SyntaxCheckers_sh_shellcheck_GetLocList() dict " {{{1$/;"	f
GetShell	plugged/syntastic/syntax_checkers/sh/shellcheck.vim	/^function! s:GetShell(buf) " {{{2$/;"	f
g:loaded_syntastic_sh_checkbashisms_checker	plugged/syntastic/syntax_checkers/sh/checkbashisms.vim	/^let g:loaded_syntastic_sh_checkbashisms_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sh/checkbashisms.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sh_checkbashisms_GetLocList	plugged/syntastic/syntax_checkers/sh/checkbashisms.vim	/^function! SyntaxCheckers_sh_checkbashisms_GetLocList() dict$/;"	f
g:loaded_syntastic_sh_shfmt_checker	plugged/syntastic/syntax_checkers/sh/shfmt.vim	/^let g:loaded_syntastic_sh_shfmt_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sh/shfmt.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sh_shfmt_GetLocList	plugged/syntastic/syntax_checkers/sh/shfmt.vim	/^function! SyntaxCheckers_sh_shfmt_GetLocList() dict$/;"	f
g:loaded_syntastic_sh_sh_checker	plugged/syntastic/syntax_checkers/sh/sh.vim	/^let g:loaded_syntastic_sh_sh_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sh/sh.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sh_sh_IsAvailable	plugged/syntastic/syntax_checkers/sh/sh.vim	/^function! SyntaxCheckers_sh_sh_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_sh_sh_GetLocList	plugged/syntastic/syntax_checkers/sh/sh.vim	/^function! SyntaxCheckers_sh_sh_GetLocList() dict " {{{1$/;"	f
GetShell	plugged/syntastic/syntax_checkers/sh/sh.vim	/^function! s:GetShell(buf) " {{{2$/;"	f
IsShellValid	plugged/syntastic/syntax_checkers/sh/sh.vim	/^function! s:IsShellValid(buf) " {{{2$/;"	f
ForwardToZshChecker	plugged/syntastic/syntax_checkers/sh/sh.vim	/^function! s:ForwardToZshChecker() " {{{2$/;"	f
g:loaded_syntastic_vhdl_ghdl_checker	plugged/syntastic/syntax_checkers/vhdl/ghdl.vim	/^let g:loaded_syntastic_vhdl_ghdl_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/vhdl/ghdl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vhdl_ghdl_GetLocList	plugged/syntastic/syntax_checkers/vhdl/ghdl.vim	/^function! SyntaxCheckers_vhdl_ghdl_GetLocList() dict$/;"	f
g:loaded_syntastic_vhdl_vcom_checker	plugged/syntastic/syntax_checkers/vhdl/vcom.vim	/^let g:loaded_syntastic_vhdl_vcom_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/vhdl/vcom.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vhdl_vcom_GetLocList	plugged/syntastic/syntax_checkers/vhdl/vcom.vim	/^function! SyntaxCheckers_vhdl_vcom_GetLocList() dict$/;"	f
g:loaded_syntastic_tcl_nagelfar_checker	plugged/syntastic/syntax_checkers/tcl/nagelfar.vim	/^let g:loaded_syntastic_tcl_nagelfar_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/tcl/nagelfar.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_tcl_nagelfar_GetLocList	plugged/syntastic/syntax_checkers/tcl/nagelfar.vim	/^function! SyntaxCheckers_tcl_nagelfar_GetLocList() dict$/;"	f
g:loaded_syntastic_perl6_perl6_checker	plugged/syntastic/syntax_checkers/perl6/perl6.vim	/^let g:loaded_syntastic_perl6_perl6_checker = 1$/;"	v
g:loaded_syntastic_json_jsonlint_checker	plugged/syntastic/syntax_checkers/json/jsonlint.vim	/^let g:loaded_syntastic_json_jsonlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/json/jsonlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_json_jsonlint_GetLocList	plugged/syntastic/syntax_checkers/json/jsonlint.vim	/^function! SyntaxCheckers_json_jsonlint_GetLocList() dict$/;"	f
g:loaded_syntastic_json_jsonval_checker	plugged/syntastic/syntax_checkers/json/jsonval.vim	/^let g:loaded_syntastic_json_jsonval_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/json/jsonval.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_json_jsonval_GetLocList	plugged/syntastic/syntax_checkers/json/jsonval.vim	/^function! SyntaxCheckers_json_jsonval_GetLocList() dict$/;"	f
g:loaded_syntastic_po_msgfmt_checker	plugged/syntastic/syntax_checkers/po/msgfmt.vim	/^let g:loaded_syntastic_po_msgfmt_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/po/msgfmt.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_po_msgfmt_GetHighlightRegex	plugged/syntastic/syntax_checkers/po/msgfmt.vim	/^function! SyntaxCheckers_po_msgfmt_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_po_msgfmt_GetLocList	plugged/syntastic/syntax_checkers/po/msgfmt.vim	/^function! SyntaxCheckers_po_msgfmt_GetLocList() dict$/;"	f
g:loaded_syntastic_po_dennis_checker	plugged/syntastic/syntax_checkers/po/dennis.vim	/^let g:loaded_syntastic_po_dennis_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/po/dennis.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_po_dennis_GetLocList	plugged/syntastic/syntax_checkers/po/dennis.vim	/^function! SyntaxCheckers_po_dennis_GetLocList() dict$/;"	f
g:loaded_syntastic_verilog_iverilog_checker	plugged/syntastic/syntax_checkers/verilog/iverilog.vim	/^let g:loaded_syntastic_verilog_iverilog_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/verilog/iverilog.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_verilog_iverilog_GetLocList	plugged/syntastic/syntax_checkers/verilog/iverilog.vim	/^function! SyntaxCheckers_verilog_iverilog_GetLocList() dict$/;"	f
g:loaded_syntastic_verilog_verilator_checker	plugged/syntastic/syntax_checkers/verilog/verilator.vim	/^let g:loaded_syntastic_verilog_verilator_checker = 1$/;"	v
g:syntastic_verilog_compiler_options	plugged/syntastic/syntax_checkers/verilog/verilator.vim	/^    let g:syntastic_verilog_compiler_options = '-Wall'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/verilog/verilator.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_verilog_verilator_IsAvailable	plugged/syntastic/syntax_checkers/verilog/verilator.vim	/^function! SyntaxCheckers_verilog_verilator_IsAvailable() dict$/;"	f
SyntaxCheckers_verilog_verilator_GetLocList	plugged/syntastic/syntax_checkers/verilog/verilator.vim	/^function! SyntaxCheckers_verilog_verilator_GetLocList() dict$/;"	f
g:loaded_syntastic_asciidoc_proselint_checker	plugged/syntastic/syntax_checkers/asciidoc/proselint.vim	/^let g:loaded_syntastic_asciidoc_proselint_checker = 1$/;"	v
g:loaded_syntastic_asciidoc_asciidoc_checker	plugged/syntastic/syntax_checkers/asciidoc/asciidoc.vim	/^let g:loaded_syntastic_asciidoc_asciidoc_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/asciidoc/asciidoc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_asciidoc_asciidoc_GetLocList	plugged/syntastic/syntax_checkers/asciidoc/asciidoc.vim	/^function! SyntaxCheckers_asciidoc_asciidoc_GetLocList() dict$/;"	f
g:loaded_syntastic_handlebars_handlebars_checker	plugged/syntastic/syntax_checkers/handlebars/handlebars.vim	/^let g:loaded_syntastic_handlebars_handlebars_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/handlebars/handlebars.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_handlebars_handlebars_GetLocList	plugged/syntastic/syntax_checkers/handlebars/handlebars.vim	/^function! SyntaxCheckers_handlebars_handlebars_GetLocList() dict$/;"	f
g:loaded_syntastic_scala_scalastyle_checker	plugged/syntastic/syntax_checkers/scala/scalastyle.vim	/^let g:loaded_syntastic_scala_scalastyle_checker = 1$/;"	v
g:syntastic_scala_scalastyle_jar	plugged/syntastic/syntax_checkers/scala/scalastyle.vim	/^    let g:syntastic_scala_scalastyle_jar = 'scalastyle-batch_2.10.jar'$/;"	v
g:syntastic_scala_scalastyle_config_file	plugged/syntastic/syntax_checkers/scala/scalastyle.vim	/^    let g:syntastic_scala_scalastyle_config_file = 'scalastyle_config.xml'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/scala/scalastyle.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_scala_scalastyle_IsAvailable	plugged/syntastic/syntax_checkers/scala/scalastyle.vim	/^function! SyntaxCheckers_scala_scalastyle_IsAvailable() dict$/;"	f
SyntaxCheckers_scala_scalastyle_GetLocList	plugged/syntastic/syntax_checkers/scala/scalastyle.vim	/^function! SyntaxCheckers_scala_scalastyle_GetLocList() dict$/;"	f
g:loaded_syntastic_scala_scalac_checker	plugged/syntastic/syntax_checkers/scala/scalac.vim	/^let g:loaded_syntastic_scala_scalac_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/scala/scalac.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_scala_scalac_GetLocList	plugged/syntastic/syntax_checkers/scala/scalac.vim	/^function! SyntaxCheckers_scala_scalac_GetLocList() dict$/;"	f
g:loaded_syntastic_scala_fsc_checker	plugged/syntastic/syntax_checkers/scala/fsc.vim	/^let g:loaded_syntastic_scala_fsc_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/scala/fsc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_scala_fsc_GetLocList	plugged/syntastic/syntax_checkers/scala/fsc.vim	/^function! SyntaxCheckers_scala_fsc_GetLocList() dict$/;"	f
g:loaded_syntastic_dustjs_swiffer_checker	plugged/syntastic/syntax_checkers/dustjs/swiffer.vim	/^let g:loaded_syntastic_dustjs_swiffer_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/dustjs/swiffer.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_dustjs_swiffer_GetLocList	plugged/syntastic/syntax_checkers/dustjs/swiffer.vim	/^function! SyntaxCheckers_dustjs_swiffer_GetLocList() dict$/;"	f
g:loaded_syntastic_cpp_avrgcc_checker	plugged/syntastic/syntax_checkers/cpp/avrgcc.vim	/^let g:loaded_syntastic_cpp_avrgcc_checker = 1$/;"	v
g:loaded_syntastic_cpp_clang_check_checker	plugged/syntastic/syntax_checkers/cpp/clang_check.vim	/^let g:loaded_syntastic_cpp_clang_check_checker = 1$/;"	v
g:loaded_syntastic_cpp_flawfinder_checker	plugged/syntastic/syntax_checkers/cpp/flawfinder.vim	/^let g:loaded_syntastic_cpp_flawfinder_checker = 1$/;"	v
g:syntastic_cpp_flawfinder_thres	plugged/syntastic/syntax_checkers/cpp/flawfinder.vim	/^    let g:syntastic_cpp_flawfinder_thres = 3$/;"	v
g:loaded_syntastic_cpp_gcc_checker	plugged/syntastic/syntax_checkers/cpp/gcc.vim	/^let g:loaded_syntastic_cpp_gcc_checker = 1$/;"	v
g:syntastic_cpp_compiler_options	plugged/syntastic/syntax_checkers/cpp/gcc.vim	/^    let g:syntastic_cpp_compiler_options = ''$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/cpp/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cpp_gcc_IsAvailable	plugged/syntastic/syntax_checkers/cpp/gcc.vim	/^function! SyntaxCheckers_cpp_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_cpp_gcc_GetLocList	plugged/syntastic/syntax_checkers/cpp/gcc.vim	/^function! SyntaxCheckers_cpp_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_cpp_oclint_checker	plugged/syntastic/syntax_checkers/cpp/oclint.vim	/^let g:loaded_syntastic_cpp_oclint_checker = 1$/;"	v
g:loaded_syntastic_cpp_verapp_checker	plugged/syntastic/syntax_checkers/cpp/verapp.vim	/^let g:loaded_syntastic_cpp_verapp_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/cpp/verapp.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cpp_verapp_GetLocList	plugged/syntastic/syntax_checkers/cpp/verapp.vim	/^function! SyntaxCheckers_cpp_verapp_GetLocList() dict$/;"	f
g:loaded_syntastic_cpp_cppcheck_checker	plugged/syntastic/syntax_checkers/cpp/cppcheck.vim	/^let g:loaded_syntastic_cpp_cppcheck_checker = 1$/;"	v
g:loaded_syntastic_cpp_clang_tidy_checker	plugged/syntastic/syntax_checkers/cpp/clang_tidy.vim	/^let g:loaded_syntastic_cpp_clang_tidy_checker = 1$/;"	v
g:loaded_syntastic_cpp_pc_lint_checker	plugged/syntastic/syntax_checkers/cpp/pc_lint.vim	/^let g:loaded_syntastic_cpp_pc_lint_checker = 1$/;"	v
g:loaded_syntastic_cpp_cpplint_checker	plugged/syntastic/syntax_checkers/cpp/cpplint.vim	/^let g:loaded_syntastic_cpp_cpplint_checker = 1$/;"	v
g:syntastic_cpp_cpplint_thres	plugged/syntastic/syntax_checkers/cpp/cpplint.vim	/^    let g:syntastic_cpp_cpplint_thres = 5$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/cpp/cpplint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cpp_cpplint_GetLocList	plugged/syntastic/syntax_checkers/cpp/cpplint.vim	/^function! SyntaxCheckers_cpp_cpplint_GetLocList() dict$/;"	f
g:loaded_syntastic_cpp_cppclean_checker	plugged/syntastic/syntax_checkers/cpp/cppclean.vim	/^let g:loaded_syntastic_cpp_cppclean_checker = 1$/;"	v
g:loaded_syntastic_matlab_mlint_checker	plugged/syntastic/syntax_checkers/matlab/mlint.vim	/^let g:loaded_syntastic_matlab_mlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/matlab/mlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_matlab_mlint_GetLocList	plugged/syntastic/syntax_checkers/matlab/mlint.vim	/^function! SyntaxCheckers_matlab_mlint_GetLocList() dict$/;"	f
g:loaded_syntastic_coffee_coffee_jshint_checker	plugged/syntastic/syntax_checkers/coffee/coffee_jshint.vim	/^let g:loaded_syntastic_coffee_coffee_jshint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/coffee/coffee_jshint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_coffee_coffee_jshint_GetLocList	plugged/syntastic/syntax_checkers/coffee/coffee_jshint.vim	/^function! SyntaxCheckers_coffee_coffee_jshint_GetLocList() dict$/;"	f
g:loaded_syntastic_coffee_coffee_checker	plugged/syntastic/syntax_checkers/coffee/coffee.vim	/^let g:loaded_syntastic_coffee_coffee_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/coffee/coffee.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_coffee_coffee_IsAvailable	plugged/syntastic/syntax_checkers/coffee/coffee.vim	/^function! SyntaxCheckers_coffee_coffee_IsAvailable() dict$/;"	f
SyntaxCheckers_coffee_coffee_GetLocList	plugged/syntastic/syntax_checkers/coffee/coffee.vim	/^function! SyntaxCheckers_coffee_coffee_GetLocList() dict$/;"	f
g:loaded_syntastic_coffee_coffeelint_checker	plugged/syntastic/syntax_checkers/coffee/coffeelint.vim	/^let g:loaded_syntastic_coffee_coffeelint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/coffee/coffeelint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_coffee_coffeelint_GetLocList	plugged/syntastic/syntax_checkers/coffee/coffeelint.vim	/^function! SyntaxCheckers_coffee_coffeelint_GetLocList() dict$/;"	f
g:loaded_syntastic_yaml_yamllint_checker	plugged/syntastic/syntax_checkers/yaml/yamllint.vim	/^let g:loaded_syntastic_yaml_yamllint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/yaml/yamllint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yaml_yamllint_GetLocList	plugged/syntastic/syntax_checkers/yaml/yamllint.vim	/^function! SyntaxCheckers_yaml_yamllint_GetLocList() dict$/;"	f
g:loaded_syntastic_yaml_jsyaml_checker	plugged/syntastic/syntax_checkers/yaml/jsyaml.vim	/^let g:loaded_syntastic_yaml_jsyaml_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/yaml/jsyaml.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yaml_jsyaml_GetLocList	plugged/syntastic/syntax_checkers/yaml/jsyaml.vim	/^function! SyntaxCheckers_yaml_jsyaml_GetLocList() dict$/;"	f
g:loaded_syntastic_yaml_yamlxs_checker	plugged/syntastic/syntax_checkers/yaml/yamlxs.vim	/^let g:loaded_syntastic_yaml_yamlxs_checker = 1$/;"	v
g:syntastic_perl_lib_path	plugged/syntastic/syntax_checkers/yaml/yamlxs.vim	/^    let g:syntastic_perl_lib_path = []$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/yaml/yamlxs.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yaml_yamlxs_IsAvailable	plugged/syntastic/syntax_checkers/yaml/yamlxs.vim	/^function! SyntaxCheckers_yaml_yamlxs_IsAvailable() dict$/;"	f
SyntaxCheckers_yaml_yamlxs_GetLocList	plugged/syntastic/syntax_checkers/yaml/yamlxs.vim	/^function! SyntaxCheckers_yaml_yamlxs_GetLocList() dict$/;"	f
Modules	plugged/syntastic/syntax_checkers/yaml/yamlxs.vim	/^function s:Modules(buf)$/;"	f
g:loaded_syntastic_fortran_gfortran_checker	plugged/syntastic/syntax_checkers/fortran/gfortran.vim	/^let g:loaded_syntastic_fortran_gfortran_checker = 1$/;"	v
g:syntastic_fortran_compiler_options	plugged/syntastic/syntax_checkers/fortran/gfortran.vim	/^    let g:syntastic_fortran_compiler_options = ''$/;"	v
s:type_map	plugged/syntastic/syntax_checkers/fortran/gfortran.vim	/^let s:type_map = {}$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/fortran/gfortran.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_fortran_gfortran_IsAvailable	plugged/syntastic/syntax_checkers/fortran/gfortran.vim	/^function! SyntaxCheckers_fortran_gfortran_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_fortran_gfortran_GetLocList	plugged/syntastic/syntax_checkers/fortran/gfortran.vim	/^function! SyntaxCheckers_fortran_gfortran_GetLocList() dict " {{{1$/;"	f
SetCompilerType	plugged/syntastic/syntax_checkers/fortran/gfortran.vim	/^function! s:SetCompilerType(exe) " {{{2$/;"	f
g:loaded_syntastic_sml_smlnj_checker	plugged/syntastic/syntax_checkers/sml/smlnj.vim	/^let g:loaded_syntastic_sml_smlnj_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sml/smlnj.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sml_smlnj_GetLocList	plugged/syntastic/syntax_checkers/sml/smlnj.vim	/^function! SyntaxCheckers_sml_smlnj_GetLocList() dict$/;"	f
g:loaded_syntastic_limbo_limbo_checker	plugged/syntastic/syntax_checkers/limbo/limbo.vim	/^let g:loaded_syntastic_limbo_limbo_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/limbo/limbo.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_limbo_limbo_GetLocList	plugged/syntastic/syntax_checkers/limbo/limbo.vim	/^function! SyntaxCheckers_limbo_limbo_GetLocList() dict$/;"	f
g:loaded_syntastic_zpt_zptlint_checker	plugged/syntastic/syntax_checkers/zpt/zptlint.vim	/^let g:loaded_syntastic_zpt_zptlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/zpt/zptlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_zpt_zptlint_GetLocList	plugged/syntastic/syntax_checkers/zpt/zptlint.vim	/^function! SyntaxCheckers_zpt_zptlint_GetLocList() dict$/;"	f
g:loaded_syntastic_text_atdtool_checker	plugged/syntastic/syntax_checkers/text/atdtool.vim	/^let g:loaded_syntastic_text_atdtool_checker = 1$/;"	v
g:syntastic_text_atdtool_sort	plugged/syntastic/syntax_checkers/text/atdtool.vim	/^    let g:syntastic_text_atdtool_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/text/atdtool.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_text_atdtool_GetHighlightRegex	plugged/syntastic/syntax_checkers/text/atdtool.vim	/^function! SyntaxCheckers_text_atdtool_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_text_atdtool_GetLocList	plugged/syntastic/syntax_checkers/text/atdtool.vim	/^function! SyntaxCheckers_text_atdtool_GetLocList() dict$/;"	f
g:loaded_syntastic_text_textlint_checker	plugged/syntastic/syntax_checkers/text/textlint.vim	/^let g:loaded_syntastic_text_textlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/text/textlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_text_textlint_GetLocList	plugged/syntastic/syntax_checkers/text/textlint.vim	/^function! SyntaxCheckers_text_textlint_GetLocList() dict$/;"	f
g:loaded_syntastic_text_language_check_checker	plugged/syntastic/syntax_checkers/text/language_check.vim	/^let g:loaded_syntastic_text_language_check_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/text/language_check.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_text_language_check_GetLocList	plugged/syntastic/syntax_checkers/text/language_check.vim	/^function! SyntaxCheckers_text_language_check_GetLocList() dict$/;"	f
g:loaded_syntastic_text_igor_checker	plugged/syntastic/syntax_checkers/text/igor.vim	/^let g:loaded_syntastic_text_igor_checker = 1$/;"	v
g:loaded_syntastic_text_proselint_checker	plugged/syntastic/syntax_checkers/text/proselint.vim	/^let g:loaded_syntastic_text_proselint_checker = 1$/;"	v
g:syntastic_text_proselint_sort	plugged/syntastic/syntax_checkers/text/proselint.vim	/^    let g:syntastic_text_proselint_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/text/proselint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_text_proselint_GetLocList	plugged/syntastic/syntax_checkers/text/proselint.vim	/^function! SyntaxCheckers_text_proselint_GetLocList() dict$/;"	f
g:loaded_syntastic_nroff_mandoc_checker	plugged/syntastic/syntax_checkers/nroff/mandoc.vim	/^let g:loaded_syntastic_nroff_mandoc_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/nroff/mandoc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_nroff_mandoc_GetLocList	plugged/syntastic/syntax_checkers/nroff/mandoc.vim	/^function! SyntaxCheckers_nroff_mandoc_GetLocList() dict$/;"	f
g:loaded_syntastic_nroff_igor_checker	plugged/syntastic/syntax_checkers/nroff/igor.vim	/^let g:loaded_syntastic_nroff_igor_checker = 1$/;"	v
g:loaded_syntastic_nroff_proselint_checker	plugged/syntastic/syntax_checkers/nroff/proselint.vim	/^let g:loaded_syntastic_nroff_proselint_checker = 1$/;"	v
g:loaded_syntastic_raku_raku_checker	plugged/syntastic/syntax_checkers/raku/raku.vim	/^let g:loaded_syntastic_raku_raku_checker = 1$/;"	v
g:syntastic_raku_lib_path	plugged/syntastic/syntax_checkers/raku/raku.vim	/^    let g:syntastic_raku_lib_path = []$/;"	v
g:syntastic_raku_raku_sort	plugged/syntastic/syntax_checkers/raku/raku.vim	/^    let g:syntastic_raku_raku_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/raku/raku.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_raku_raku_IsAvailable	plugged/syntastic/syntax_checkers/raku/raku.vim	/^function! SyntaxCheckers_raku_raku_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_raku_raku_GetHighlightRegex	plugged/syntastic/syntax_checkers/raku/raku.vim	/^function! SyntaxCheckers_raku_raku_GetHighlightRegex(item) " {{{1$/;"	f
SyntaxCheckers_raku_raku_GetLocList	plugged/syntastic/syntax_checkers/raku/raku.vim	/^function! SyntaxCheckers_raku_raku_GetLocList() dict " {{{1$/;"	f
g:loaded_syntastic_slim_slimrb_checker	plugged/syntastic/syntax_checkers/slim/slimrb.vim	/^let g:loaded_syntastic_slim_slimrb_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/slim/slimrb.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_slim_slimrb_GetLocList	plugged/syntastic/syntax_checkers/slim/slimrb.vim	/^function! SyntaxCheckers_slim_slimrb_GetLocList() dict$/;"	f
g:loaded_syntastic_slim_slim_lint_checker	plugged/syntastic/syntax_checkers/slim/slim_lint.vim	/^let g:loaded_syntastic_slim_slim_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/slim/slim_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_slim_slim_lint_GetLocList	plugged/syntastic/syntax_checkers/slim/slim_lint.vim	/^function! SyntaxCheckers_slim_slim_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_xslt_xmllint_checker	plugged/syntastic/syntax_checkers/xslt/xmllint.vim	/^let g:loaded_syntastic_xslt_xmllint_checker = 1$/;"	v
g:loaded_syntastic_javascript_lynt_checker	plugged/syntastic/syntax_checkers/javascript/lynt.vim	/^let g:loaded_syntastic_javascript_lynt_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/lynt.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_lynt_GetLocList	plugged/syntastic/syntax_checkers/javascript/lynt.vim	/^function! SyntaxCheckers_javascript_lynt_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_jshint_checker	plugged/syntastic/syntax_checkers/javascript/jshint.vim	/^let g:loaded_syntastic_javascript_jshint_checker = 1$/;"	v
g:syntastic_javascript_jshint_sort	plugged/syntastic/syntax_checkers/javascript/jshint.vim	/^    let g:syntastic_javascript_jshint_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/jshint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jshint_IsAvailable	plugged/syntastic/syntax_checkers/javascript/jshint.vim	/^function! SyntaxCheckers_javascript_jshint_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_jshint_GetLocList	plugged/syntastic/syntax_checkers/javascript/jshint.vim	/^function! SyntaxCheckers_javascript_jshint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_closurecompiler_checker	plugged/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^let g:loaded_syntastic_javascript_closurecompiler_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_closurecompiler_IsAvailable	plugged/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^function! SyntaxCheckers_javascript_closurecompiler_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_closurecompiler_GetLocList	plugged/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^function! SyntaxCheckers_javascript_closurecompiler_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_mixedindentlint_checker	plugged/syntastic/syntax_checkers/javascript/mixedindentlint.vim	/^let g:loaded_syntastic_javascript_mixedindentlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/mixedindentlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_mixedindentlint_GetLocList	plugged/syntastic/syntax_checkers/javascript/mixedindentlint.vim	/^function! SyntaxCheckers_javascript_mixedindentlint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_standard_checker	plugged/syntastic/syntax_checkers/javascript/standard.vim	/^let g:loaded_syntastic_javascript_standard_checker = 1$/;"	v
g:syntastic_javascript_standard_generic	plugged/syntastic/syntax_checkers/javascript/standard.vim	/^    let g:syntastic_javascript_standard_generic = 0$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/standard.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_standard_IsAvailable	plugged/syntastic/syntax_checkers/javascript/standard.vim	/^function! SyntaxCheckers_javascript_standard_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_standard_GetLocList	plugged/syntastic/syntax_checkers/javascript/standard.vim	/^function! SyntaxCheckers_javascript_standard_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_jslint_checker	plugged/syntastic/syntax_checkers/javascript/jslint.vim	/^let g:loaded_syntastic_javascript_jslint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/jslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jslint_GetHighlightRegex	plugged/syntastic/syntax_checkers/javascript/jslint.vim	/^function! SyntaxCheckers_javascript_jslint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_javascript_jslint_GetLocList	plugged/syntastic/syntax_checkers/javascript/jslint.vim	/^function! SyntaxCheckers_javascript_jslint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_jscs_checker	plugged/syntastic/syntax_checkers/javascript/jscs.vim	/^let g:loaded_syntastic_javascript_jscs_checker = 1$/;"	v
g:syntastic_javascript_jscs_sort	plugged/syntastic/syntax_checkers/javascript/jscs.vim	/^    let g:syntastic_javascript_jscs_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/jscs.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jscs_IsAvailable	plugged/syntastic/syntax_checkers/javascript/jscs.vim	/^function! SyntaxCheckers_javascript_jscs_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_jscs_GetLocList	plugged/syntastic/syntax_checkers/javascript/jscs.vim	/^function! SyntaxCheckers_javascript_jscs_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_flow_checker	plugged/syntastic/syntax_checkers/javascript/flow.vim	/^let g:loaded_syntastic_javascript_flow_checker = 1$/;"	v
g:syntastic_javascript_flow_sort	plugged/syntastic/syntax_checkers/javascript/flow.vim	/^    let g:syntastic_javascript_flow_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/flow.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_flow_IsAvailable	plugged/syntastic/syntax_checkers/javascript/flow.vim	/^function! SyntaxCheckers_javascript_flow_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_flow_GetLocList	plugged/syntastic/syntax_checkers/javascript/flow.vim	/^function! SyntaxCheckers_javascript_flow_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_tern_lint_checker	plugged/syntastic/syntax_checkers/javascript/tern_lint.vim	/^let g:loaded_syntastic_javascript_tern_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/tern_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_tern_lint_IsAvailable	plugged/syntastic/syntax_checkers/javascript/tern_lint.vim	/^function! SyntaxCheckers_javascript_tern_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_tern_lint_GetLocList	plugged/syntastic/syntax_checkers/javascript/tern_lint.vim	/^function! SyntaxCheckers_javascript_tern_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_eslint_checker	plugged/syntastic/syntax_checkers/javascript/eslint.vim	/^let g:loaded_syntastic_javascript_eslint_checker = 1$/;"	v
g:syntastic_javascript_eslint_sort	plugged/syntastic/syntax_checkers/javascript/eslint.vim	/^    let g:syntastic_javascript_eslint_sort = 1$/;"	v
g:syntastic_javascript_eslint_generic	plugged/syntastic/syntax_checkers/javascript/eslint.vim	/^    let g:syntastic_javascript_eslint_generic = 0$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/eslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_eslint_IsAvailable	plugged/syntastic/syntax_checkers/javascript/eslint.vim	/^function! SyntaxCheckers_javascript_eslint_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_eslint_GetLocList	plugged/syntastic/syntax_checkers/javascript/eslint.vim	/^function! SyntaxCheckers_javascript_eslint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_gjslint_checker	plugged/syntastic/syntax_checkers/javascript/gjslint.vim	/^let g:loaded_syntastic_javascript_gjslint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/gjslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_gjslint_GetLocList	plugged/syntastic/syntax_checkers/javascript/gjslint.vim	/^function! SyntaxCheckers_javascript_gjslint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_jsxhint_checker	plugged/syntastic/syntax_checkers/javascript/jsxhint.vim	/^let g:loaded_syntastic_javascript_jsxhint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/jsxhint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jsxhint_IsAvailable	plugged/syntastic/syntax_checkers/javascript/jsxhint.vim	/^function! SyntaxCheckers_javascript_jsxhint_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_javascript_jsxhint_GetLocList	plugged/syntastic/syntax_checkers/javascript/jsxhint.vim	/^function! SyntaxCheckers_javascript_jsxhint_GetLocList() dict " {{{1$/;"	f
g:loaded_syntastic_javascript_jsl_checker	plugged/syntastic/syntax_checkers/javascript/jsl.vim	/^let g:loaded_syntastic_javascript_jsl_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/javascript/jsl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jsl_GetLocList	plugged/syntastic/syntax_checkers/javascript/jsl.vim	/^function! SyntaxCheckers_javascript_jsl_GetLocList() dict$/;"	f
g:loaded_syntastic_yacc_bison_checker	plugged/syntastic/syntax_checkers/yacc/bison.vim	/^let g:loaded_syntastic_yacc_bison_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/yacc/bison.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yacc_bison_GetLocList	plugged/syntastic/syntax_checkers/yacc/bison.vim	/^function! SyntaxCheckers_yacc_bison_GetLocList() dict$/;"	f
g:loaded_syntastic_texinfo_proselint_checker	plugged/syntastic/syntax_checkers/texinfo/proselint.vim	/^let g:loaded_syntastic_texinfo_proselint_checker = 1$/;"	v
g:loaded_syntastic_texinfo_makeinfo_checker	plugged/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^let g:loaded_syntastic_texinfo_makeinfo_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_texinfo_makeinfo_GetHighlightRegex	plugged/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^function! SyntaxCheckers_texinfo_makeinfo_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_texinfo_makeinfo_GetLocList	plugged/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^function! SyntaxCheckers_texinfo_makeinfo_GetLocList() dict$/;"	f
g:loaded_syntastic_twig_twiglint_checker	plugged/syntastic/syntax_checkers/twig/twiglint.vim	/^let g:loaded_syntastic_twig_twiglint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/twig/twiglint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_twig_twiglint_GetLocList	plugged/syntastic/syntax_checkers/twig/twiglint.vim	/^function! SyntaxCheckers_twig_twiglint_GetLocList() dict$/;"	f
g:loaded_syntastic_twig_twigcs_checker	plugged/syntastic/syntax_checkers/twig/twigcs.vim	/^let g:loaded_syntastic_twig_twigcs_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/twig/twigcs.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_twig_twigcs_GetLocList	plugged/syntastic/syntax_checkers/twig/twigcs.vim	/^function! SyntaxCheckers_twig_twigcs_GetLocList() dict$/;"	f
g:loaded_syntastic_jade_jade_lint_checker	plugged/syntastic/syntax_checkers/jade/jade_lint.vim	/^let g:loaded_syntastic_jade_jade_lint_checker = 1$/;"	v
g:loaded_syntastic_zsh_zsh_checker	plugged/syntastic/syntax_checkers/zsh/zsh.vim	/^let g:loaded_syntastic_zsh_zsh_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/zsh/zsh.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_zsh_zsh_GetLocList	plugged/syntastic/syntax_checkers/zsh/zsh.vim	/^function! SyntaxCheckers_zsh_zsh_GetLocList() dict$/;"	f
g:loaded_syntastic_cobol_cobc_checker	plugged/syntastic/syntax_checkers/cobol/cobc.vim	/^let g:loaded_syntastic_cobol_cobc_checker = 1$/;"	v
g:syntastic_cobol_compiler_options	plugged/syntastic/syntax_checkers/cobol/cobc.vim	/^    let g:syntastic_cobol_compiler_options = ''$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/cobol/cobc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cobol_cobc_IsAvailable	plugged/syntastic/syntax_checkers/cobol/cobc.vim	/^function! SyntaxCheckers_cobol_cobc_IsAvailable() dict$/;"	f
SyntaxCheckers_cobol_cobc_GetLocList	plugged/syntastic/syntax_checkers/cobol/cobc.vim	/^function! SyntaxCheckers_cobol_cobc_GetLocList() dict$/;"	f
g:loaded_syntastic_sass_sass_lint_checker	plugged/syntastic/syntax_checkers/sass/sass_lint.vim	/^let g:loaded_syntastic_sass_sass_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sass/sass_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sass_sass_lint_IsAvailable	plugged/syntastic/syntax_checkers/sass/sass_lint.vim	/^function! SyntaxCheckers_sass_sass_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_sass_sass_lint_GetLocList	plugged/syntastic/syntax_checkers/sass/sass_lint.vim	/^function! SyntaxCheckers_sass_sass_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_sass_sass_checker	plugged/syntastic/syntax_checkers/sass/sass.vim	/^let g:loaded_syntastic_sass_sass_checker = 1$/;"	v
s:sass_cache_location	plugged/syntastic/syntax_checkers/sass/sass.vim	/^let s:sass_cache_location = syntastic#util#tmpdir()$/;"	v
syntastic	plugged/syntastic/syntax_checkers/sass/sass.vim	/^augroup syntastic$/;"	a
g:syntastic_sass_check_partials	plugged/syntastic/syntax_checkers/sass/sass.vim	/^    let g:syntastic_sass_check_partials = 0$/;"	v
s:imports	plugged/syntastic/syntax_checkers/sass/sass.vim	/^let s:imports = ''$/;"	v
s:imports	plugged/syntastic/syntax_checkers/sass/sass.vim	/^    let s:imports = '--compass'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sass/sass.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sass_sass_GetLocList	plugged/syntastic/syntax_checkers/sass/sass.vim	/^function! SyntaxCheckers_sass_sass_GetLocList() dict$/;"	f
g:loaded_syntastic_sass_sassc_checker	plugged/syntastic/syntax_checkers/sass/sassc.vim	/^let g:loaded_syntastic_sass_sassc_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sass/sassc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sass_sassc_GetLocList	plugged/syntastic/syntax_checkers/sass/sassc.vim	/^function! SyntaxCheckers_sass_sassc_GetLocList() dict$/;"	f
g:loaded_syntastic_objc_gcc_checker	plugged/syntastic/syntax_checkers/objc/gcc.vim	/^let g:loaded_syntastic_objc_gcc_checker = 1$/;"	v
g:syntastic_objc_compiler_options	plugged/syntastic/syntax_checkers/objc/gcc.vim	/^    let g:syntastic_objc_compiler_options = '-std=gnu99'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/objc/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_objc_gcc_IsAvailable	plugged/syntastic/syntax_checkers/objc/gcc.vim	/^function! SyntaxCheckers_objc_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_objc_gcc_GetLocList	plugged/syntastic/syntax_checkers/objc/gcc.vim	/^function! SyntaxCheckers_objc_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_objc_oclint_checker	plugged/syntastic/syntax_checkers/objc/oclint.vim	/^let g:loaded_syntastic_objc_oclint_checker = 1$/;"	v
g:loaded_syntastic_coq_coqtop_checker	plugged/syntastic/syntax_checkers/coq/coqtop.vim	/^let g:loaded_syntastic_coq_coqtop_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/coq/coqtop.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_coq_coqtop_GetLocList	plugged/syntastic/syntax_checkers/coq/coqtop.vim	/^function! SyntaxCheckers_coq_coqtop_GetLocList() dict$/;"	f
g:loaded_syntastic_puppet_puppet_checker	plugged/syntastic/syntax_checkers/puppet/puppet.vim	/^let g:loaded_syntastic_puppet_puppet_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/puppet/puppet.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_puppet_puppet_GetLocList	plugged/syntastic/syntax_checkers/puppet/puppet.vim	/^function! SyntaxCheckers_puppet_puppet_GetLocList() dict$/;"	f
g:loaded_syntastic_puppet_puppetlint_checker	plugged/syntastic/syntax_checkers/puppet/puppetlint.vim	/^let g:loaded_syntastic_puppet_puppetlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/puppet/puppetlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_puppet_puppetlint_IsAvailable	plugged/syntastic/syntax_checkers/puppet/puppetlint.vim	/^function! SyntaxCheckers_puppet_puppetlint_IsAvailable() dict$/;"	f
SyntaxCheckers_puppet_puppetlint_GetLocList	plugged/syntastic/syntax_checkers/puppet/puppetlint.vim	/^function! SyntaxCheckers_puppet_puppetlint_GetLocList() dict$/;"	f
g:loaded_syntastic_apiblueprint_drafter_checker	plugged/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^let g:loaded_syntastic_apiblueprint_drafter_checker = 1$/;"	v
g:syntastic_apiblueprint_drafter_sort	plugged/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^    let g:syntastic_apiblueprint_drafter_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_apiblueprint_drafter_GetLocList	plugged/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^function! SyntaxCheckers_apiblueprint_drafter_GetLocList() dict$/;"	f
g:loaded_syntastic_c_avrgcc_checker	plugged/syntastic/syntax_checkers/c/avrgcc.vim	/^let g:loaded_syntastic_c_avrgcc_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/avrgcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:opt_x	plugged/syntastic/syntax_checkers/c/avrgcc.vim	/^let s:opt_x = { 'c': 'c', 'cpp': 'c++' }$/;"	v
SyntaxCheckers_c_avrgcc_GetLocList	plugged/syntastic/syntax_checkers/c/avrgcc.vim	/^function! SyntaxCheckers_c_avrgcc_GetLocList() dict$/;"	f
g:loaded_syntastic_c_clang_check_checker	plugged/syntastic/syntax_checkers/c/clang_check.vim	/^let g:loaded_syntastic_c_clang_check_checker = 1$/;"	v
g:syntastic_c_clang_check_sort	plugged/syntastic/syntax_checkers/c/clang_check.vim	/^    let g:syntastic_c_clang_check_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/clang_check.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_clang_check_GetLocList	plugged/syntastic/syntax_checkers/c/clang_check.vim	/^function! SyntaxCheckers_c_clang_check_GetLocList() dict$/;"	f
g:loaded_syntastic_c_flawfinder_checker	plugged/syntastic/syntax_checkers/c/flawfinder.vim	/^let g:loaded_syntastic_c_flawfinder_checker = 1$/;"	v
g:syntastic_c_flawfinder_sort	plugged/syntastic/syntax_checkers/c/flawfinder.vim	/^    let g:syntastic_c_flawfinder_sort = 1$/;"	v
g:syntastic_c_flawfinder_thres	plugged/syntastic/syntax_checkers/c/flawfinder.vim	/^    let g:syntastic_c_flawfinder_thres = 3$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/flawfinder.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_flawfinder_GetHighlightRegex	plugged/syntastic/syntax_checkers/c/flawfinder.vim	/^function! SyntaxCheckers_c_flawfinder_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_c_flawfinder_GetLocList	plugged/syntastic/syntax_checkers/c/flawfinder.vim	/^function! SyntaxCheckers_c_flawfinder_GetLocList() dict$/;"	f
g:loaded_syntastic_c_gcc_checker	plugged/syntastic/syntax_checkers/c/gcc.vim	/^let g:loaded_syntastic_c_gcc_checker = 1$/;"	v
g:syntastic_c_compiler_options	plugged/syntastic/syntax_checkers/c/gcc.vim	/^    let g:syntastic_c_compiler_options = '-std=gnu99'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_gcc_IsAvailable	plugged/syntastic/syntax_checkers/c/gcc.vim	/^function! SyntaxCheckers_c_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_c_gcc_GetLocList	plugged/syntastic/syntax_checkers/c/gcc.vim	/^function! SyntaxCheckers_c_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_c_oclint_checker	plugged/syntastic/syntax_checkers/c/oclint.vim	/^let g:loaded_syntastic_c_oclint_checker = 1$/;"	v
g:syntastic_c_oclint_sort	plugged/syntastic/syntax_checkers/c/oclint.vim	/^    let g:syntastic_c_oclint_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/oclint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_oclint_GetLocList	plugged/syntastic/syntax_checkers/c/oclint.vim	/^function! SyntaxCheckers_c_oclint_GetLocList() dict$/;"	f
g:loaded_syntastic_c_sparse_checker	plugged/syntastic/syntax_checkers/c/sparse.vim	/^let g:loaded_syntastic_c_sparse_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/sparse.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_sparse_GetLocList	plugged/syntastic/syntax_checkers/c/sparse.vim	/^function! SyntaxCheckers_c_sparse_GetLocList() dict$/;"	f
g:loaded_syntastic_c_make_checker	plugged/syntastic/syntax_checkers/c/make.vim	/^let g:loaded_syntastic_c_make_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/make.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_make_GetLocList	plugged/syntastic/syntax_checkers/c/make.vim	/^function! SyntaxCheckers_c_make_GetLocList() dict$/;"	f
g:loaded_syntastic_c_splint_checker	plugged/syntastic/syntax_checkers/c/splint.vim	/^let g:loaded_syntastic_c_splint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/splint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_splint_GetLocList	plugged/syntastic/syntax_checkers/c/splint.vim	/^function! SyntaxCheckers_c_splint_GetLocList() dict$/;"	f
g:loaded_syntastic_c_cppcheck_checker	plugged/syntastic/syntax_checkers/c/cppcheck.vim	/^let g:loaded_syntastic_c_cppcheck_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/cppcheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_cppcheck_GetLocList	plugged/syntastic/syntax_checkers/c/cppcheck.vim	/^function! SyntaxCheckers_c_cppcheck_GetLocList() dict$/;"	f
g:loaded_syntastic_c_clang_tidy_checker	plugged/syntastic/syntax_checkers/c/clang_tidy.vim	/^let g:loaded_syntastic_c_clang_tidy_checker = 1$/;"	v
g:syntastic_c_clang_tidy_sort	plugged/syntastic/syntax_checkers/c/clang_tidy.vim	/^    let g:syntastic_c_clang_tidy_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/clang_tidy.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_clang_tidy_GetLocList	plugged/syntastic/syntax_checkers/c/clang_tidy.vim	/^function! SyntaxCheckers_c_clang_tidy_GetLocList() dict$/;"	f
g:loaded_syntastic_c_pc_lint_checker	plugged/syntastic/syntax_checkers/c/pc_lint.vim	/^let g:loaded_syntastic_c_pc_lint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/pc_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_pc_lint_GetLocList	plugged/syntastic/syntax_checkers/c/pc_lint.vim	/^function! SyntaxCheckers_c_pc_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_c_checkpatch_checker	plugged/syntastic/syntax_checkers/c/checkpatch.vim	/^let g:loaded_syntastic_c_checkpatch_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/checkpatch.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_checkpatch_IsAvailable	plugged/syntastic/syntax_checkers/c/checkpatch.vim	/^function! SyntaxCheckers_c_checkpatch_IsAvailable() dict$/;"	f
SyntaxCheckers_c_checkpatch_GetLocList	plugged/syntastic/syntax_checkers/c/checkpatch.vim	/^function! SyntaxCheckers_c_checkpatch_GetLocList() dict$/;"	f
g:loaded_syntastic_c_cppclean_checker	plugged/syntastic/syntax_checkers/c/cppclean.vim	/^let g:loaded_syntastic_c_cppclean_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/c/cppclean.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_cppclean_GetLocList	plugged/syntastic/syntax_checkers/c/cppclean.vim	/^function! SyntaxCheckers_c_cppclean_GetLocList() dict$/;"	f
g:loaded_syntastic_d_dscanner_checker	plugged/syntastic/syntax_checkers/d/dscanner.vim	/^let g:loaded_syntastic_d_dscanner_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/d/dscanner.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_d_dscanner_GetHighlightRegex	plugged/syntastic/syntax_checkers/d/dscanner.vim	/^function! SyntaxCheckers_d_dscanner_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_d_dscanner_GetLocList	plugged/syntastic/syntax_checkers/d/dscanner.vim	/^function! SyntaxCheckers_d_dscanner_GetLocList() dict$/;"	f
g:loaded_syntastic_d_dmd_checker	plugged/syntastic/syntax_checkers/d/dmd.vim	/^let g:loaded_syntastic_d_dmd_checker = 1$/;"	v
g:syntastic_d_compiler_options	plugged/syntastic/syntax_checkers/d/dmd.vim	/^    let g:syntastic_d_compiler_options = ''$/;"	v
g:syntastic_d_use_dub	plugged/syntastic/syntax_checkers/d/dmd.vim	/^    let g:syntastic_d_use_dub = 1$/;"	v
g:syntastic_d_dub_exec	plugged/syntastic/syntax_checkers/d/dmd.vim	/^    let g:syntastic_d_dub_exec = 'dub'$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/d/dmd.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_d_dmd_IsAvailable	plugged/syntastic/syntax_checkers/d/dmd.vim	/^function! SyntaxCheckers_d_dmd_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_d_dmd_GetLocList	plugged/syntastic/syntax_checkers/d/dmd.vim	/^function! SyntaxCheckers_d_dmd_GetLocList() dict " {{{1$/;"	f
GetIncludes	plugged/syntastic/syntax_checkers/d/dmd.vim	/^function! s:GetIncludes(checker, base) " {{{2$/;"	f
ValidateDub	plugged/syntastic/syntax_checkers/d/dmd.vim	/^function! s:ValidateDub(checker) " {{{2$/;"	f
g:loaded_syntastic_ruby_rubocop_checker	plugged/syntastic/syntax_checkers/ruby/rubocop.vim	/^let g:loaded_syntastic_ruby_rubocop_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ruby/rubocop.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_rubocop_IsAvailable	plugged/syntastic/syntax_checkers/ruby/rubocop.vim	/^function! SyntaxCheckers_ruby_rubocop_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_rubocop_GetLocList	plugged/syntastic/syntax_checkers/ruby/rubocop.vim	/^function! SyntaxCheckers_ruby_rubocop_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_rubylint_checker	plugged/syntastic/syntax_checkers/ruby/rubylint.vim	/^let g:loaded_syntastic_ruby_rubylint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ruby/rubylint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_rubylint_GetLocList	plugged/syntastic/syntax_checkers/ruby/rubylint.vim	/^function! SyntaxCheckers_ruby_rubylint_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_mri_checker	plugged/syntastic/syntax_checkers/ruby/mri.vim	/^let g:loaded_syntastic_ruby_mri_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ruby/mri.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_mri_IsAvailable	plugged/syntastic/syntax_checkers/ruby/mri.vim	/^function! SyntaxCheckers_ruby_mri_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_mri_GetHighlightRegex	plugged/syntastic/syntax_checkers/ruby/mri.vim	/^function! SyntaxCheckers_ruby_mri_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_ruby_mri_GetLocList	plugged/syntastic/syntax_checkers/ruby/mri.vim	/^function! SyntaxCheckers_ruby_mri_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_sorbet_checker	plugged/syntastic/syntax_checkers/ruby/sorbet.vim	/^let g:loaded_syntastic_ruby_sorbet_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ruby/sorbet.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_sorbet_IsAvailable	plugged/syntastic/syntax_checkers/ruby/sorbet.vim	/^function! SyntaxCheckers_ruby_sorbet_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_sorbet_GetLocList	plugged/syntastic/syntax_checkers/ruby/sorbet.vim	/^function! SyntaxCheckers_ruby_sorbet_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_reek_checker	plugged/syntastic/syntax_checkers/ruby/reek.vim	/^let g:loaded_syntastic_ruby_reek_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ruby/reek.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_reek_IsAvailable	plugged/syntastic/syntax_checkers/ruby/reek.vim	/^function! SyntaxCheckers_ruby_reek_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_reek_GetLocList	plugged/syntastic/syntax_checkers/ruby/reek.vim	/^function! SyntaxCheckers_ruby_reek_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_flog_checker	plugged/syntastic/syntax_checkers/ruby/flog.vim	/^let g:loaded_syntastic_ruby_flog_checker = 1$/;"	v
g:syntastic_ruby_flog_threshold_warning	plugged/syntastic/syntax_checkers/ruby/flog.vim	/^    let g:syntastic_ruby_flog_threshold_warning = 45$/;"	v
g:syntastic_ruby_flog_threshold_error	plugged/syntastic/syntax_checkers/ruby/flog.vim	/^    let g:syntastic_ruby_flog_threshold_error = 90$/;"	v
g:syntastic_ruby_flog_sort	plugged/syntastic/syntax_checkers/ruby/flog.vim	/^    let g:syntastic_ruby_flog_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ruby/flog.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_flog_GetLocList	plugged/syntastic/syntax_checkers/ruby/flog.vim	/^function! SyntaxCheckers_ruby_flog_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_jruby_checker	plugged/syntastic/syntax_checkers/ruby/jruby.vim	/^let g:loaded_syntastic_ruby_jruby_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ruby/jruby.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_jruby_GetLocList	plugged/syntastic/syntax_checkers/ruby/jruby.vim	/^function! SyntaxCheckers_ruby_jruby_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_macruby_checker	plugged/syntastic/syntax_checkers/ruby/macruby.vim	/^let g:loaded_syntastic_ruby_macruby_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/ruby/macruby.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_macruby_GetLocList	plugged/syntastic/syntax_checkers/ruby/macruby.vim	/^function! SyntaxCheckers_ruby_macruby_GetLocList() dict$/;"	f
g:loaded_syntastic_actionscript_mxmlc_checker	plugged/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^let g:loaded_syntastic_actionscript_mxmlc_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_actionscript_mxmlc_GetHighlightRegex	plugged/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^function! SyntaxCheckers_actionscript_mxmlc_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_actionscript_mxmlc_GetLocList	plugged/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^function! SyntaxCheckers_actionscript_mxmlc_GetLocList() dict$/;"	f
g:loaded_syntastic_cabal_cabal_checker	plugged/syntastic/syntax_checkers/cabal/cabal.vim	/^let g:loaded_syntastic_cabal_cabal_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/cabal/cabal.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cabal_cabal_GetHighlightRegex	plugged/syntastic/syntax_checkers/cabal/cabal.vim	/^function! SyntaxCheckers_cabal_cabal_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_cabal_cabal_GetLocList	plugged/syntastic/syntax_checkers/cabal/cabal.vim	/^function! SyntaxCheckers_cabal_cabal_GetLocList() dict$/;"	f
g:loaded_syntastic_help_proselint_checker	plugged/syntastic/syntax_checkers/help/proselint.vim	/^let g:loaded_syntastic_help_proselint_checker = 1$/;"	v
g:loaded_syntastic_hss_hss_checker	plugged/syntastic/syntax_checkers/hss/hss.vim	/^let g:loaded_syntastic_hss_hss_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/hss/hss.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_hss_hss_GetLocList	plugged/syntastic/syntax_checkers/hss/hss.vim	/^function! SyntaxCheckers_hss_hss_GetLocList() dict$/;"	f
g:loaded_syntastic_sql_sqlint_checker	plugged/syntastic/syntax_checkers/sql/sqlint.vim	/^let g:loaded_syntastic_sql_sqlint_checker = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sql/sqlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sql_sqlint_GetHighlightRegex	plugged/syntastic/syntax_checkers/sql/sqlint.vim	/^function! SyntaxCheckers_sql_sqlint_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_sql_sqlint_IsAvailable	plugged/syntastic/syntax_checkers/sql/sqlint.vim	/^function! SyntaxCheckers_sql_sqlint_IsAvailable() dict$/;"	f
SyntaxCheckers_sql_sqlint_GetLocList	plugged/syntastic/syntax_checkers/sql/sqlint.vim	/^function! SyntaxCheckers_sql_sqlint_GetLocList() dict$/;"	f
g:loaded_syntastic_sql_tsqllint_checker	plugged/syntastic/syntax_checkers/sql/tsqllint.vim	/^let g:loaded_syntastic_sql_tsqllint_checker = 1$/;"	v
g:syntastic_sql_tsqllint_sort	plugged/syntastic/syntax_checkers/sql/tsqllint.vim	/^    let g:syntastic_sql_tsqllint_sort = 1$/;"	v
s:save_cpo	plugged/syntastic/syntax_checkers/sql/tsqllint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sql_tsqllint_GetLocList	plugged/syntastic/syntax_checkers/sql/tsqllint.vim	/^function! SyntaxCheckers_sql_tsqllint_GetLocList() dict$/;"	f
g:loaded_syntastic_checker	plugged/syntastic/plugin/syntastic/checker.vim	/^let g:loaded_syntastic_checker = 1$/;"	v
g:SyntasticChecker	plugged/syntastic/plugin/syntastic/checker.vim	/^let g:SyntasticChecker = {}$/;"	v
SyntasticChecker.New	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.New(args, ...) abort " {{{2$/;"	f
SyntasticChecker.getFiletype	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getFiletype() abort " {{{2$/;"	f
SyntasticChecker.getName	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getName() abort " {{{2$/;"	f
SyntasticChecker.getCName	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getCName() abort " {{{2$/;"	f
SyntasticChecker.syncExec	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.syncExec(...) abort " {{{2$/;"	f
SyntasticChecker.getExec	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getExec() abort " {{{2$/;"	f
SyntasticChecker.getExecEscaped	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getExecEscaped() abort " {{{2$/;"	f
SyntasticChecker.getLocListRaw	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getLocListRaw() abort " {{{2$/;"	f
SyntasticChecker.getLocList	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getLocList() abort " {{{2$/;"	f
SyntasticChecker.getVersion	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getVersion(...) abort " {{{2$/;"	f
SyntasticChecker.setVersion	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.setVersion(version) abort " {{{2$/;"	f
SyntasticChecker.log	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.log(msg, ...) abort " {{{2$/;"	f
SyntasticChecker.makeprgBuild	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.makeprgBuild(opts) abort " {{{2$/;"	f
SyntasticChecker.isAvailable	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.isAvailable() abort " {{{2$/;"	f
SyntasticChecker.isDisabled	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.isDisabled() abort " {{{2$/;"	f
SyntasticChecker.wantSort	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.wantSort() abort " {{{2$/;"	f
SyntasticChecker.setWantSort	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.setWantSort(val) abort " {{{2$/;"	f
SyntasticChecker._quietMessages	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker._quietMessages(errors) abort " {{{2$/;"	f
SyntasticChecker._populateHighlightRegexes	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker._populateHighlightRegexes(errors) abort " {{{2$/;"	f
SyntasticChecker._getOpt	plugged/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker._getOpt(opts, basename, name, default) abort " {{{2$/;"	f
_isAvailableDefault	plugged/syntastic/plugin/syntastic/checker.vim	/^function! s:_isAvailableDefault() dict " {{{2$/;"	f
g:loaded_syntastic_loclist	plugged/syntastic/plugin/syntastic/loclist.vim	/^let g:loaded_syntastic_loclist = 1$/;"	v
g:SyntasticLoclist	plugged/syntastic/plugin/syntastic/loclist.vim	/^let g:SyntasticLoclist = {}$/;"	v
SyntasticLoclist.New	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.New(rawLoclist) abort " {{{2$/;"	f
SyntasticLoclist.current	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.current(...) abort " {{{2$/;"	f
SyntasticLoclist.extend	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.extend(other) abort " {{{2$/;"	f
SyntasticLoclist.sort	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.sort() abort " {{{2$/;"	f
SyntasticLoclist.isEmpty	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.isEmpty() abort " {{{2$/;"	f
SyntasticLoclist.isNewerThan	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.isNewerThan(stamp) abort " {{{2$/;"	f
SyntasticLoclist.copyRaw	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.copyRaw() abort " {{{2$/;"	f
SyntasticLoclist.getRaw	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getRaw() abort " {{{2$/;"	f
SyntasticLoclist.getBuffers	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getBuffers() abort " {{{2$/;"	f
SyntasticLoclist.getCursorColumns	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getCursorColumns() abort " {{{2$/;"	f
SyntasticLoclist.getStatuslineFlag	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getStatuslineFlag() abort " {{{2$/;"	f
SyntasticLoclist.getFirstError	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getFirstError(...) abort " {{{2$/;"	f
SyntasticLoclist.getName	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getName() abort " {{{2$/;"	f
SyntasticLoclist.setName	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.setName(name) abort " {{{2$/;"	f
SyntasticLoclist.getOwner	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getOwner() abort " {{{2$/;"	f
SyntasticLoclist.setOwner	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.setOwner(buffer) abort " {{{2$/;"	f
SyntasticLoclist.deploy	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.deploy() abort " {{{2$/;"	f
SyntasticLoclist.destroy	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.destroy() abort " {{{2$/;"	f
SyntasticLoclist.decorate	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.decorate(tag) abort " {{{2$/;"	f
SyntasticLoclist.balloons	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.balloons() abort " {{{2$/;"	f
SyntasticLoclist.errors	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.errors() abort " {{{2$/;"	f
SyntasticLoclist.warnings	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.warnings() abort " {{{2$/;"	f
SyntasticLoclist.hasErrorsOrWarningsToDisplay	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.hasErrorsOrWarningsToDisplay() abort " {{{2$/;"	f
SyntasticLoclist.messages	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.messages(buf) abort " {{{2$/;"	f
SyntasticLoclist.filter	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.filter(filters) abort " {{{2$/;"	f
SyntasticLoclist.setloclist	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.setloclist(new) abort " {{{2$/;"	f
SyntasticLoclist.show	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.show() abort " {{{2$/;"	f
SyntasticLoclistHide	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! SyntasticLoclistHide() abort " {{{2$/;"	f
_translate	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! s:_translate(key, val) abort " {{{2$/;"	f
_set_screen_column	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! s:_set_screen_column(item) abort " {{{2$/;"	f
_remove_shadowed_items	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! s:_remove_shadowed_items(errors) abort " {{{2$/;"	f
_compare_error_items_by_columns	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! s:_compare_error_items_by_columns(a, b) abort " {{{2$/;"	f
_compare_error_items_by_lines	plugged/syntastic/plugin/syntastic/loclist.vim	/^function! s:_compare_error_items_by_lines(a, b) abort " {{{2$/;"	f
g:loaded_syntastic_registry	plugged/syntastic/plugin/syntastic/registry.vim	/^let g:loaded_syntastic_registry = 1$/;"	v
s:_DEFAULT_CHECKERS	plugged/syntastic/plugin/syntastic/registry.vim	/^let s:_DEFAULT_CHECKERS = {$/;"	v
s:_DEFAULT_FILETYPE_MAP	plugged/syntastic/plugin/syntastic/registry.vim	/^let s:_DEFAULT_FILETYPE_MAP = {$/;"	v
s:_ECLIM_TYPES	plugged/syntastic/plugin/syntastic/registry.vim	/^let s:_ECLIM_TYPES = [$/;"	v
s:_YCM_TYPES	plugged/syntastic/plugin/syntastic/registry.vim	/^let s:_YCM_TYPES = [$/;"	v
g:SyntasticRegistry	plugged/syntastic/plugin/syntastic/registry.vim	/^let g:SyntasticRegistry = {}$/;"	v
SyntasticRegistry.Instance	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.Instance() abort " {{{2$/;"	f
SyntasticRegistry.CreateAndRegisterChecker	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.CreateAndRegisterChecker(args) abort " {{{2$/;"	f
SyntasticRegistry.getCheckers	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getCheckers(ftalias, hints_list) abort " {{{2$/;"	f
SyntasticRegistry.getCheckersAvailable	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getCheckersAvailable(ftalias, hints_list) abort " {{{2$/;"	f
SyntasticRegistry.getCheckersDisabled	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getCheckersDisabled(ftalias, hints_list) abort " {{{2$/;"	f
SyntasticRegistry.getKnownFiletypes	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getKnownFiletypes() abort " {{{2$/;"	f
SyntasticRegistry.getNamesOfAvailableCheckers	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getNamesOfAvailableCheckers(ftalias) abort " {{{2$/;"	f
SyntasticRegistry.resolveFiletypes	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.resolveFiletypes(ftalias) abort " {{{2$/;"	f
SyntasticRegistry.echoInfoFor	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.echoInfoFor(ftalias_list) abort " {{{2$/;"	f
SyntasticRegistry._registerChecker	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._registerChecker(checker) abort " {{{2$/;"	f
SyntasticRegistry._findChecker	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._findChecker(cname) abort " {{{2$/;"	f
SyntasticRegistry._filterCheckersByName	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._filterCheckersByName(cnames) abort " {{{2$/;"	f
SyntasticRegistry._loadCheckersFor	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._loadCheckersFor(filetype, force) abort " {{{2$/;"	f
SyntasticRegistry._sanityCheck	plugged/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._sanityCheck(filetype) abort " {{{2$/;"	f
_normalise_filetype	plugged/syntastic/plugin/syntastic/registry.vim	/^function! s:_normalise_filetype(ftalias) abort " {{{2$/;"	f
_disabled_by_eclim	plugged/syntastic/plugin/syntastic/registry.vim	/^function! s:_disabled_by_eclim(filetype) abort " {{{2$/;"	f
_disabled_by_ycm	plugged/syntastic/plugin/syntastic/registry.vim	/^function! s:_disabled_by_ycm(filetype) abort " {{{2$/;"	f
_compare_checker_names	plugged/syntastic/plugin/syntastic/registry.vim	/^function! s:_compare_checker_names(a, b) abort " {{{2$/;"	f
g:loaded_syntastic_notifiers	plugged/syntastic/plugin/syntastic/notifiers.vim	/^let g:loaded_syntastic_notifiers = 1$/;"	v
g:SyntasticNotifiers	plugged/syntastic/plugin/syntastic/notifiers.vim	/^let g:SyntasticNotifiers = {}$/;"	v
s:_NOTIFIER_TYPES	plugged/syntastic/plugin/syntastic/notifiers.vim	/^let s:_NOTIFIER_TYPES = ['signs', 'balloons', 'highlighting', 'cursor', 'autoloclist']$/;"	v
s:_PERSISTENT_NOTIFIERS	plugged/syntastic/plugin/syntastic/notifiers.vim	/^let s:_PERSISTENT_NOTIFIERS = ['signs', 'balloons']$/;"	v
SyntasticNotifiers.Instance	plugged/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers.Instance() abort " {{{2$/;"	f
SyntasticNotifiers.refresh	plugged/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers.refresh(loclist) abort " {{{2$/;"	f
SyntasticNotifiers.reset	plugged/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers.reset(loclist) abort " {{{2$/;"	f
SyntasticNotifiers._initNotifiers	plugged/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers._initNotifiers() abort " {{{2$/;"	f
g:loaded_syntastic_notifier_autoloclist	plugged/syntastic/plugin/syntastic/autoloclist.vim	/^let g:loaded_syntastic_notifier_autoloclist = 1$/;"	v
g:SyntasticAutoloclistNotifier	plugged/syntastic/plugin/syntastic/autoloclist.vim	/^let g:SyntasticAutoloclistNotifier = {}$/;"	v
SyntasticAutoloclistNotifier.New	plugged/syntastic/plugin/syntastic/autoloclist.vim	/^function! g:SyntasticAutoloclistNotifier.New() abort " {{{2$/;"	f
SyntasticAutoloclistNotifier.refresh	plugged/syntastic/plugin/syntastic/autoloclist.vim	/^function! g:SyntasticAutoloclistNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticAutoloclistNotifier.AutoToggle	plugged/syntastic/plugin/syntastic/autoloclist.vim	/^function! g:SyntasticAutoloclistNotifier.AutoToggle(loclist) abort " {{{2$/;"	f
g:loaded_syntastic_modemap	plugged/syntastic/plugin/syntastic/modemap.vim	/^let g:loaded_syntastic_modemap = 1$/;"	v
g:SyntasticModeMap	plugged/syntastic/plugin/syntastic/modemap.vim	/^let g:SyntasticModeMap = {}$/;"	v
SyntasticModeMap.Instance	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.Instance() abort " {{{2$/;"	f
SyntasticModeMap.synch	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.synch() abort " {{{2$/;"	f
SyntasticModeMap.allowsAutoChecking	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.allowsAutoChecking(filetype) abort " {{{2$/;"	f
SyntasticModeMap.doAutoChecking	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.doAutoChecking(buf) abort " {{{2$/;"	f
SyntasticModeMap.isPassive	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.isPassive() abort " {{{2$/;"	f
SyntasticModeMap.toggleMode	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.toggleMode() abort " {{{2$/;"	f
SyntasticModeMap.echoMode	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.echoMode() abort " {{{2$/;"	f
SyntasticModeMap.modeInfo	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.modeInfo(filetypes) abort " {{{2$/;"	f
SyntasticModeMap._isOneFiletypeActive	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap._isOneFiletypeActive(filetypes) abort " {{{2$/;"	f
SyntasticModeMap._noFiletypesArePassive	plugged/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap._noFiletypesArePassive(filetypes) abort " {{{2$/;"	f
g:loaded_syntastic_notifier_cursor	plugged/syntastic/plugin/syntastic/cursor.vim	/^let g:loaded_syntastic_notifier_cursor = 1$/;"	v
g:SyntasticCursorNotifier	plugged/syntastic/plugin/syntastic/cursor.vim	/^let g:SyntasticCursorNotifier = {}$/;"	v
SyntasticCursorNotifier.New	plugged/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.New() abort " {{{2$/;"	f
SyntasticCursorNotifier.enabled	plugged/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.enabled() abort " {{{2$/;"	f
SyntasticCursorNotifier.refresh	plugged/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticCursorNotifier.reset	plugged/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.reset(loclist) abort " {{{2$/;"	f
SyntasticRefreshCursor	plugged/syntastic/plugin/syntastic/cursor.vim	/^function! SyntasticRefreshCursor() abort " {{{2$/;"	f
_is_same_index	plugged/syntastic/plugin/syntastic/cursor.vim	/^function! s:_is_same_index(line, old_line, column, idx, messages) abort " {{{2$/;"	f
_find_index	plugged/syntastic/plugin/syntastic/cursor.vim	/^function! s:_find_index(column, messages) abort " {{{2$/;"	f
g:loaded_syntastic_notifier_balloons	plugged/syntastic/plugin/syntastic/balloons.vim	/^let g:loaded_syntastic_notifier_balloons = 1$/;"	v
g:syntastic_enable_balloons	plugged/syntastic/plugin/syntastic/balloons.vim	/^    let g:syntastic_enable_balloons = 0$/;"	v
g:SyntasticBalloonsNotifier	plugged/syntastic/plugin/syntastic/balloons.vim	/^let g:SyntasticBalloonsNotifier = {}$/;"	v
SyntasticBalloonsNotifier.New	plugged/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.New() abort " {{{2$/;"	f
SyntasticBalloonsNotifier.enabled	plugged/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.enabled() abort " {{{2$/;"	f
SyntasticBalloonsNotifier.refresh	plugged/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticBalloonsNotifier.reset	plugged/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.reset(loclist) abort " {{{2$/;"	f
SyntasticBalloonsExprNotifier	plugged/syntastic/plugin/syntastic/balloons.vim	/^function! SyntasticBalloonsExprNotifier() abort " {{{2$/;"	f
g:loaded_syntastic_notifier_signs	plugged/syntastic/plugin/syntastic/signs.vim	/^let g:loaded_syntastic_notifier_signs = 1$/;"	v
s:first_sign_id	plugged/syntastic/plugin/syntastic/signs.vim	/^let s:first_sign_id = 5000$/;"	v
s:next_sign_id	plugged/syntastic/plugin/syntastic/signs.vim	/^let s:next_sign_id = s:first_sign_id$/;"	v
g:SyntasticSignsNotifier	plugged/syntastic/plugin/syntastic/signs.vim	/^let g:SyntasticSignsNotifier = {}$/;"	v
s:setup_done	plugged/syntastic/plugin/syntastic/signs.vim	/^let s:setup_done = 0$/;"	v
SyntasticSignsNotifier.New	plugged/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier.New() abort " {{{2$/;"	f
SyntasticSignsNotifier.enabled	plugged/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier.enabled() abort " {{{2$/;"	f
SyntasticSignsNotifier.refresh	plugged/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticSignsNotifier._setup	plugged/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._setup() abort " {{{2$/;"	f
SyntasticSignsNotifier._signErrors	plugged/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._signErrors(loclist) abort " {{{2$/;"	f
SyntasticSignsNotifier._removeSigns	plugged/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._removeSigns(ids) abort " {{{2$/;"	f
SyntasticSignsNotifier._bufSignIds	plugged/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._bufSignIds() abort " {{{2$/;"	f
g:loaded_syntastic_notifier_highlighting	plugged/syntastic/plugin/syntastic/highlighting.vim	/^let g:loaded_syntastic_notifier_highlighting = 1$/;"	v
s:has_highlighting	plugged/syntastic/plugin/syntastic/highlighting.vim	/^let s:has_highlighting = v:version > 701 || (v:version == 701 && has('patch040'))$/;"	v
g:SyntasticHighlightingNotifier	plugged/syntastic/plugin/syntastic/highlighting.vim	/^let g:SyntasticHighlightingNotifier = {}$/;"	v
s:setup_done	plugged/syntastic/plugin/syntastic/highlighting.vim	/^let s:setup_done = 0$/;"	v
SyntasticHighlightingNotifier.New	plugged/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.New() abort " {{{2$/;"	f
SyntasticHighlightingNotifier.enabled	plugged/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.enabled() abort " {{{2$/;"	f
SyntasticHighlightingNotifier.refresh	plugged/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticHighlightingNotifier.reset	plugged/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.reset(loclist) abort " {{{2$/;"	f
SyntasticHighlightingNotifier._setup	plugged/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier._setup() abort " {{{2$/;"	f
SyntasticHighlightingNotifier._reset	plugged/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier._reset() abort " {{{2$/;"	f
g:loaded_syntastic_plugin	plugged/syntastic/plugin/syntastic.vim	/^let g:loaded_syntastic_plugin = 1$/;"	v
g:_SYNTASTIC_START	plugged/syntastic/plugin/syntastic.vim	/^    let g:_SYNTASTIC_START = reltime()$/;"	v
g:_SYNTASTIC_VERSION	plugged/syntastic/plugin/syntastic.vim	/^let g:_SYNTASTIC_VERSION = '3.10.0-32'$/;"	v
s:_running_windows	plugged/syntastic/plugin/syntastic.vim	/^let s:_running_windows = syntastic#util#isRunningWindows()$/;"	v
g:syntastic_shell	plugged/syntastic/plugin/syntastic.vim	/^    let g:syntastic_shell = &shell$/;"	v
g:_SYNTASTIC_UNAME	plugged/syntastic/plugin/syntastic.vim	/^    let g:_SYNTASTIC_UNAME = 'Windows'$/;"	v
g:_SYNTASTIC_UNAME	plugged/syntastic/plugin/syntastic.vim	/^        let g:_SYNTASTIC_UNAME = split(syntastic#util#system('uname'), "\\n")[0]$/;"	v
g:_SYNTASTIC_UNAME	plugged/syntastic/plugin/syntastic.vim	/^        let g:_SYNTASTIC_UNAME = 'Unknown'$/;"	v
g:_SYNTASTIC_UNAME	plugged/syntastic/plugin/syntastic.vim	/^    let g:_SYNTASTIC_UNAME = 'Unknown'$/;"	v
g:syntastic_version	plugged/syntastic/plugin/syntastic.vim	/^let g:syntastic_version =$/;"	v
g:_SYNTASTIC_DEFAULTS	plugged/syntastic/plugin/syntastic.vim	/^let g:_SYNTASTIC_DEFAULTS = {$/;"	v
g:syntastic_	plugged/syntastic/plugin/syntastic.vim	/^        let g:syntastic_{s:key} = copy(g:_SYNTASTIC_DEFAULTS[s:key])$/;"	v
s:quiet_warnings	plugged/syntastic/plugin/syntastic.vim	/^        let s:quiet_warnings = get(g:syntastic_quiet_messages, 'type', [])$/;"	v
s:quiet_warnings	plugged/syntastic/plugin/syntastic.vim	/^            let s:quiet_warnings = [s:quiet_warnings]$/;"	v
g:syntastic_quiet_messages	plugged/syntastic/plugin/syntastic.vim	/^        let g:syntastic_quiet_messages['type'] = s:quiet_warnings$/;"	v
g:_SYNTASTIC_SHELL_OPTIONS	plugged/syntastic/plugin/syntastic.vim	/^let g:_SYNTASTIC_SHELL_OPTIONS = [$/;"	v
g:_SYNTASTIC_DEBUG_TRACE	plugged/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_TRACE         = 1$/;"	v
g:_SYNTASTIC_DEBUG_LOCLIST	plugged/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_LOCLIST       = 2$/;"	v
g:_SYNTASTIC_DEBUG_NOTIFICATIONS	plugged/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_NOTIFICATIONS = 4$/;"	v
g:_SYNTASTIC_DEBUG_AUTOCOMMANDS	plugged/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_AUTOCOMMANDS  = 8$/;"	v
g:_SYNTASTIC_DEBUG_VARIABLES	plugged/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_VARIABLES     = 16$/;"	v
g:_SYNTASTIC_DEBUG_CHECKERS	plugged/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_CHECKERS      = 32$/;"	v
s:registry	plugged/syntastic/plugin/syntastic.vim	/^let s:registry = g:SyntasticRegistry.Instance()$/;"	v
s:notifiers	plugged/syntastic/plugin/syntastic.vim	/^let s:notifiers = g:SyntasticNotifiers.Instance()$/;"	v
s:modemap	plugged/syntastic/plugin/syntastic.vim	/^let s:modemap = g:SyntasticModeMap.Instance()$/;"	v
s:_check_stack	plugged/syntastic/plugin/syntastic.vim	/^let s:_check_stack = []$/;"	v
s:_quit_pre	plugged/syntastic/plugin/syntastic.vim	/^let s:_quit_pre = []$/;"	v
CompleteCheckerName	plugged/syntastic/plugin/syntastic.vim	/^function! s:CompleteCheckerName(argLead, cmdLine, cursorPos) abort " {{{2$/;"	f
CompleteFiletypes	plugged/syntastic/plugin/syntastic.vim	/^function! s:CompleteFiletypes(argLead, cmdLine, cursorPos) abort " {{{2$/;"	f
SyntasticCheck	plugged/syntastic/plugin/syntastic.vim	/^command! -bar -nargs=* -complete=custom,s:CompleteCheckerName SyntasticCheck call SyntasticCheck(<f-args>)$/;"	c
SyntasticInfo	plugged/syntastic/plugin/syntastic.vim	/^command! -bar -nargs=? -complete=custom,s:CompleteFiletypes   SyntasticInfo  call SyntasticInfo(<f-args>)$/;"	c
Errors	plugged/syntastic/plugin/syntastic.vim	/^command! -bar Errors              call SyntasticErrors()$/;"	c
SyntasticReset	plugged/syntastic/plugin/syntastic.vim	/^command! -bar SyntasticReset      call SyntasticReset()$/;"	c
SyntasticToggleMode	plugged/syntastic/plugin/syntastic.vim	/^command! -bar SyntasticToggleMode call SyntasticToggleMode()$/;"	c
SyntasticSetLoclist	plugged/syntastic/plugin/syntastic.vim	/^command! -bar SyntasticSetLoclist call SyntasticSetLoclist()$/;"	c
SyntasticJavacEditClasspath	plugged/syntastic/plugin/syntastic.vim	/^command! SyntasticJavacEditClasspath runtime! syntax_checkers\/java\/*.vim | SyntasticJavacEditClasspath$/;"	c
SyntasticJavacEditConfig	plugged/syntastic/plugin/syntastic.vim	/^command! SyntasticJavacEditConfig    runtime! syntax_checkers\/java\/*.vim | SyntasticJavacEditConfig$/;"	c
SyntasticCheck	plugged/syntastic/plugin/syntastic.vim	/^function! SyntasticCheck(...) abort " {{{2$/;"	f
SyntasticInfo	plugged/syntastic/plugin/syntastic.vim	/^function! SyntasticInfo(...) abort " {{{2$/;"	f
SyntasticErrors	plugged/syntastic/plugin/syntastic.vim	/^function! SyntasticErrors() abort " {{{2$/;"	f
SyntasticReset	plugged/syntastic/plugin/syntastic.vim	/^function! SyntasticReset() abort " {{{2$/;"	f
SyntasticToggleMode	plugged/syntastic/plugin/syntastic.vim	/^function! SyntasticToggleMode() abort " {{{2$/;"	f
SyntasticSetLoclist	plugged/syntastic/plugin/syntastic.vim	/^function! SyntasticSetLoclist() abort " {{{2$/;"	f
syntastic	plugged/syntastic/plugin/syntastic.vim	/^augroup syntastic$/;"	a
syntastic	plugged/syntastic/plugin/syntastic.vim	/^    augroup syntastic$/;"	a
syntastic	plugged/syntastic/plugin/syntastic.vim	/^    augroup syntastic$/;"	a
syntastic	plugged/syntastic/plugin/syntastic.vim	/^    augroup syntastic$/;"	a
BufReadPostHook	plugged/syntastic/plugin/syntastic.vim	/^function! s:BufReadPostHook(fname) abort " {{{2$/;"	f
BufWritePostHook	plugged/syntastic/plugin/syntastic.vim	/^function! s:BufWritePostHook(fname) abort " {{{2$/;"	f
BufEnterHook	plugged/syntastic/plugin/syntastic.vim	/^function! s:BufEnterHook(fname) abort " {{{2$/;"	f
BufWinEnterHook	plugged/syntastic/plugin/syntastic.vim	/^function! s:BufWinEnterHook(fname) abort " {{{2$/;"	f
VimEnterHook	plugged/syntastic/plugin/syntastic.vim	/^function! s:VimEnterHook() abort " {{{2$/;"	f
QuitPreHook	plugged/syntastic/plugin/syntastic.vim	/^function! s:QuitPreHook(fname) abort " {{{2$/;"	f
UpdateErrors	plugged/syntastic/plugin/syntastic.vim	/^function! s:UpdateErrors(buf, auto_invoked, checker_names) abort " {{{2$/;"	f
ClearCache	plugged/syntastic/plugin/syntastic.vim	/^function! s:ClearCache(buf) abort " {{{2$/;"	f
CacheErrors	plugged/syntastic/plugin/syntastic.vim	/^function! s:CacheErrors(buf, checker_names) abort " {{{2$/;"	f
SyntasticMake	plugged/syntastic/plugin/syntastic.vim	/^function! SyntasticMake(options) abort " {{{2$/;"	f
SyntasticStatuslineFlag	plugged/syntastic/plugin/syntastic.vim	/^function! SyntasticStatuslineFlag() abort " {{{2$/;"	f
_ignore_file	plugged/syntastic/plugin/syntastic.vim	/^function! s:_ignore_file(filename) abort " {{{2$/;"	f
_is_quitting	plugged/syntastic/plugin/syntastic.vim	/^function! s:_is_quitting(buf) abort " {{{2$/;"	f
_skip_file	plugged/syntastic/plugin/syntastic.vim	/^function! s:_skip_file(buf) abort " {{{2$/;"	f
_explain_skip	plugged/syntastic/plugin/syntastic.vim	/^function! s:_explain_skip(filetypes) abort " {{{2$/;"	f
_add_to_errors	plugged/syntastic/plugin/syntastic.vim	/^function! s:_add_to_errors(errors, options) abort " {{{2$/;"	f
_os_name	plugged/syntastic/plugin/syntastic.vim	/^function! s:_os_name() abort " {{{2$/;"	f
g:loaded_syntastic_preprocess_autoload	plugged/syntastic/autoload/syntastic/preprocess.vim	/^let g:loaded_syntastic_preprocess_autoload = 1$/;"	v
s:save_cpo	plugged/syntastic/autoload/syntastic/preprocess.vim	/^let s:save_cpo = &cpo$/;"	v
syntastic#preprocess#bandit	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#bandit(errors) abort " {{{2$/;"	f
syntastic#preprocess#cabal	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#cabal(errors) abort " {{{2$/;"	f
syntastic#preprocess#checkstyle	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#checkstyle(errors) abort " {{{2$/;"	f
syntastic#preprocess#cppcheck	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#cppcheck(errors) abort " {{{2$/;"	f
syntastic#preprocess#dockerfile_lint	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#dockerfile_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#dscanner	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#dscanner(errors) abort " {{{2$/;"	f
syntastic#preprocess#flow	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#flow(errors) abort " {{{2$/;"	f
syntastic#preprocess#iconv	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#iconv(errors) abort " {{{2$/;"	f
syntastic#preprocess#jscs	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#jscs(errors) abort " {{{2$/;"	f
syntastic#preprocess#killEmpty	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#killEmpty(errors) abort " {{{2$/;"	f
syntastic#preprocess#lynt	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#lynt(errors) abort " {{{2$/;"	f
syntastic#preprocess#perl	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#perl(errors) abort " {{{2$/;"	f
syntastic#preprocess#prospector	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#prospector(errors) abort " {{{2$/;"	f
syntastic#preprocess#rparse	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#rparse(errors) abort " {{{2$/;"	f
syntastic#preprocess#raku	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#raku(errors) abort " {{{2$/;"	f
syntastic#preprocess#remark_lint	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#remark_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#scss_lint	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#scss_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#stylelint	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#stylelint(errors) abort " {{{2$/;"	f
syntastic#preprocess#tern_lint	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#tern_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#tslint	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#tslint(errors) abort " {{{2$/;"	f
syntastic#preprocess#validator	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#validator(errors) abort " {{{2$/;"	f
syntastic#preprocess#vint	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#vint(errors) abort " {{{2$/;"	f
syntastic#preprocess#basex	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#basex(errors) abort " {{{2$/;"	f
syntastic#preprocess#bro	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#bro(errors) abort " {{{2$/;"	f
syntastic#preprocess#coffeelint	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#coffeelint(errors) abort " {{{2$/;"	f
syntastic#preprocess#mypy	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#mypy(errors) abort " {{{2$/;"	f
syntastic#preprocess#nix	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#nix(errors) abort " {{{2$/;"	f
_decode_JSON	plugged/syntastic/autoload/syntastic/preprocess.vim	/^function! s:_decode_JSON(json) abort " {{{2$/;"	f
g:loaded_syntastic_c_autoload	plugged/syntastic/autoload/syntastic/c.vim	/^let g:loaded_syntastic_c_autoload = 1$/;"	v
s:save_cpo	plugged/syntastic/autoload/syntastic/c.vim	/^let s:save_cpo = &cpo$/;"	v
syntastic#c#NullOutput	plugged/syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#NullOutput() abort " {{{2$/;"	f
syntastic#c#ReadConfig	plugged/syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#ReadConfig(file) abort " {{{2$/;"	f
syntastic#c#GetLocList	plugged/syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#GetLocList(filetype, subchecker, options) abort " {{{2$/;"	f
_init	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_init() abort " {{{2$/;"	f
_registerHandler	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_registerHandler(regex, function, args) abort " {{{2$/;"	f
_checkPackage	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_checkPackage(name, ...) abort " {{{2$/;"	f
_checkPhp	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_checkPhp() abort " {{{2$/;"	f
_checkPython	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_checkPython() abort " {{{2$/;"	f
_checkRuby	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_checkRuby() abort " {{{2$/;"	f
_get_checker_var	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_get_checker_var(scope, filetype, subchecker, name, default) abort " {{{2$/;"	f
_get_cflags	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_get_cflags(ft, ck, opts) abort " {{{2$/;"	f
_get_include_dirs	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_get_include_dirs(filetype) abort " {{{2$/;"	f
_search_headers	plugged/syntastic/autoload/syntastic/c.vim	/^function! s:_search_headers() abort " {{{2$/;"	f
s:default_includes	plugged/syntastic/autoload/syntastic/c.vim	/^let s:default_includes = [$/;"	v
g:loaded_syntastic_log_autoload	plugged/syntastic/autoload/syntastic/log.vim	/^let g:loaded_syntastic_log_autoload = 1$/;"	v
s:save_cpo	plugged/syntastic/autoload/syntastic/log.vim	/^let s:save_cpo = &cpo$/;"	v
s:one_time_notices_issued	plugged/syntastic/autoload/syntastic/log.vim	/^let s:one_time_notices_issued = []$/;"	v
syntastic#log#info	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#info(msg) abort " {{{2$/;"	f
syntastic#log#warn	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#warn(msg) abort " {{{2$/;"	f
syntastic#log#error	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#error(msg) abort " {{{2$/;"	f
syntastic#log#oneTimeWarn	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#oneTimeWarn(msg) abort " {{{2$/;"	f
syntastic#log#deprecationWarn	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#deprecationWarn(old, new, ...) abort " {{{2$/;"	f
syntastic#log#debug	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debug(level, msg, ...) abort " {{{2$/;"	f
syntastic#log#debugShowOptions	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debugShowOptions(level, names) abort " {{{2$/;"	f
syntastic#log#debugShowVariables	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debugShowVariables(level, names) abort " {{{2$/;"	f
syntastic#log#debugDump	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debugDump(level) abort " {{{2$/;"	f
syntastic#log#ndebug	plugged/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#ndebug(level, title, messages) abort " {{{2$/;"	f
_isDebugEnabled_smart	plugged/syntastic/autoload/syntastic/log.vim	/^function! s:_isDebugEnabled_smart(level) abort " {{{2$/;"	f
_isDebugEnabled_dumb	plugged/syntastic/autoload/syntastic/log.vim	/^function! s:_isDebugEnabled_dumb(level) abort " {{{2$/;"	f
s:_isDebugEnabled	plugged/syntastic/autoload/syntastic/log.vim	/^let s:_isDebugEnabled = function(exists('*and') ? 's:_isDebugEnabled_smart' : 's:_isDebugEnabled_dumb')$/;"	v
_logRedirect	plugged/syntastic/autoload/syntastic/log.vim	/^function! s:_logRedirect(on) abort " {{{2$/;"	f
_log_timestamp_smart	plugged/syntastic/autoload/syntastic/log.vim	/^function! s:_log_timestamp_smart() abort " {{{2$/;"	f
_log_timestamp_dumb	plugged/syntastic/autoload/syntastic/log.vim	/^function! s:_log_timestamp_dumb() abort " {{{2$/;"	f
s:_log_timestamp	plugged/syntastic/autoload/syntastic/log.vim	/^let s:_log_timestamp = function(has('float') && exists('*reltimefloat') ? 's:_log_timestamp_smart' : 's:_log_timestamp_dumb')$/;"	v
_format_variable	plugged/syntastic/autoload/syntastic/log.vim	/^function! s:_format_variable(name) abort " {{{2$/;"	f
_is_modified	plugged/syntastic/autoload/syntastic/log.vim	/^function! s:_is_modified(name) abort " {{{2$/;"	f
g:loaded_syntastic_util_autoload	plugged/syntastic/autoload/syntastic/util.vim	/^let g:loaded_syntastic_util_autoload = 1$/;"	v
s:save_cpo	plugged/syntastic/autoload/syntastic/util.vim	/^let s:save_cpo = &cpo$/;"	v
syntastic#util#isRunningWindows	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#isRunningWindows() abort " {{{2$/;"	f
syntastic#util#DevNull	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#DevNull() abort " {{{2$/;"	f
syntastic#util#Slash	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#Slash() abort " {{{2$/;"	f
syntastic#util#CygwinPath	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#CygwinPath(path) abort " {{{2$/;"	f
syntastic#util#system	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#system(command) abort " {{{2$/;"	f
syntastic#util#tmpdir	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#tmpdir() abort " {{{2$/;"	f
syntastic#util#rmrf	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#rmrf(what) abort " {{{2$/;"	f
syntastic#util#getbufvar	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#getbufvar(buf, name, ...) abort " {{{2$/;"	f
syntastic#util#parseShebang	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#parseShebang(buf) abort " {{{2$/;"	f
syntastic#util#bufRawVar	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#bufRawVar(buf, name, ...) abort " {{{2$/;"	f
syntastic#util#bufVar	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#bufVar(buf, name, ...) abort " {{{2$/;"	f
syntastic#util#rawVar	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#rawVar(name, ...) abort " {{{2$/;"	f
syntastic#util#var	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#var(name, ...) abort " {{{2$/;"	f
syntastic#util#parseVersion	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#parseVersion(version, ...) abort " {{{2$/;"	f
syntastic#util#versionIsAtLeast	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#versionIsAtLeast(installed, required) abort " {{{2$/;"	f
syntastic#util#compareLexi	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#compareLexi(a, b) abort " {{{2$/;"	f
syntastic#util#screenWidth	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#screenWidth(str, tabstop) abort " {{{2$/;"	f
syntastic#util#wideMsg	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#wideMsg(msg) abort " {{{2$/;"	f
syntastic#util#bufIsActive	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#bufIsActive(buffer) abort " {{{2$/;"	f
syntastic#util#findFileInParent	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#findFileInParent(what, where) abort " {{{2$/;"	f
syntastic#util#findGlobInParent	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#findGlobInParent(what, where) abort " {{{2$/;"	f
syntastic#util#fname2buf	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#fname2buf(fname) abort " {{{2$/;"	f
syntastic#util#unique	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#unique(list) abort " {{{2$/;"	f
syntastic#util#shescape	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#shescape(string) abort " {{{2$/;"	f
syntastic#util#shexpand	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#shexpand(string, ...) abort " {{{2$/;"	f
syntastic#util#argsescape	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#argsescape(opt) abort " {{{2$/;"	f
syntastic#util#decodeXMLEntities	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#decodeXMLEntities(string) abort " {{{2$/;"	f
syntastic#util#redraw	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#redraw(full) abort " {{{2$/;"	f
syntastic#util#dictFilter	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#dictFilter(errors, filter) abort " {{{2$/;"	f
syntastic#util#stamp	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#stamp() abort " {{{2$/;"	f
syntastic#util#setLastTick	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#setLastTick(buf) abort " {{{2$/;"	f
syntastic#util#setWids	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#setWids() abort " {{{2$/;"	f
syntastic#util#str2float	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#str2float(val) abort " {{{2$/;"	f
syntastic#util#float2str	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#float2str(val) abort " {{{2$/;"	f
syntastic#util#wformat	plugged/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#wformat(format, str) abort " {{{2$/;"	f
_translateFilter	plugged/syntastic/autoload/syntastic/util.vim	/^function! s:_translateFilter(filters) abort " {{{2$/;"	f
_translateElement	plugged/syntastic/autoload/syntastic/util.vim	/^function! s:_translateElement(key, term) abort " {{{2$/;"	f
s:_width	plugged/syntastic/autoload/syntastic/util.vim	/^let s:_width = function(exists('*strwidth') ? 'strwidth' : 'strlen')$/;"	v
_delete_dumb	plugged/syntastic/autoload/syntastic/util.vim	/^function! s:_delete_dumb(what, flags) abort " {{{2$/;"	f
s:_delete	plugged/syntastic/autoload/syntastic/util.vim	/^let s:_delete = function(v:version > 704 || (v:version == 704 && has('patch1128')) ? 'delete' : 's:_delete_dumb')$/;"	v
_rmrf	plugged/syntastic/autoload/syntastic/util.vim	/^function! s:_rmrf(what) abort " {{{2$/;"	f
s:_str2float	plugged/syntastic/autoload/syntastic/util.vim	/^let s:_str2float = function(exists('*str2float') ? 'str2float' : 'str2nr')$/;"	v
_float2str_smart	plugged/syntastic/autoload/syntastic/util.vim	/^function! s:_float2str_smart(val) abort " {{{2$/;"	f
_float2str_dumb	plugged/syntastic/autoload/syntastic/util.vim	/^function! s:_float2str_dumb(val) abort " {{{2$/;"	f
s:_float2str	plugged/syntastic/autoload/syntastic/util.vim	/^let s:_float2str = function(has('float') ? 's:_float2str_smart' : 's:_float2str_dumb')$/;"	v
_getbufvar_dumb	plugged/syntastic/autoload/syntastic/util.vim	/^function! s:_getbufvar_dumb(buf, name, ...) abort " {{{2$/;"	f
s:_getbufvar	plugged/syntastic/autoload/syntastic/util.vim	/^let s:_getbufvar = function(v:version > 703 || (v:version == 703 && has('patch831')) ? 'getbufvar' : 's:_getbufvar_dumb')$/;"	v
_fuzz_dumb	plugged/syntastic/autoload/syntastic/util.vim	/^function! s:_fuzz_dumb() abort " {{{2$/;"	f
s:_fuzz	plugged/syntastic/autoload/syntastic/util.vim	/^let s:_fuzz = function(exists('*getpid') ? 'getpid' : 's:_fuzz_dumb')$/;"	v
s:_wid_base	plugged/syntastic/autoload/syntastic/util.vim	/^let s:_wid_base = 'syntastic_' . s:_fuzz() . '_' . reltimestr(g:_SYNTASTIC_START) . '_'$/;"	v
s:_wid_pool	plugged/syntastic/autoload/syntastic/util.vim	/^let s:_wid_pool = 0$/;"	v
g:loaded_syntastic_postprocess_autoload	plugged/syntastic/autoload/syntastic/postprocess.vim	/^let g:loaded_syntastic_postprocess_autoload = 1$/;"	v
s:save_cpo	plugged/syntastic/autoload/syntastic/postprocess.vim	/^let s:save_cpo = &cpo$/;"	v
syntastic#postprocess#compressWhitespace	plugged/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#compressWhitespace(errors) abort " {{{2$/;"	f
syntastic#postprocess#cygwinRemoveCR	plugged/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#cygwinRemoveCR(errors) abort " {{{2$/;"	f
syntastic#postprocess#decodeXMLEntities	plugged/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#decodeXMLEntities(errors) abort " {{{2$/;"	f
syntastic#postprocess#filterForeignErrors	plugged/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#filterForeignErrors(errors) abort " {{{2$/;"	f
syntastic#postprocess#guards	plugged/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#guards(errors) abort " {{{2$/;"	f
syntastic#postprocess#iconv	plugged/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#iconv(errors) abort " {{{2$/;"	f
s:suite	plugged/lightline.vim/test/concatenate.vim	/^let s:suite = themis#suite('concatenate')$/;"	v
s:assert	plugged/lightline.vim/test/concatenate.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.before_each()$/;"	f
suite.nil	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.nil()$/;"	f
suite.one	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.one()$/;"	f
suite.two	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.two()$/;"	f
suite.three	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three()$/;"	f
suite.one_empty	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.one_empty()$/;"	f
suite.two_empty_left	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_left()$/;"	f
suite.two_empty_right	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_right()$/;"	f
suite.two_empty_both	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_both()$/;"	f
suite.three_empty_left	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left()$/;"	f
suite.three_empty_middle	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle()$/;"	f
suite.three_empty_right	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_right()$/;"	f
suite.three_empty_middle_right	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle_right()$/;"	f
suite.three_empty_left_right	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_right()$/;"	f
suite.three_empty_left_middle	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_middle()$/;"	f
suite.three_empty_all	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_all()$/;"	f
suite.keep_original	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.keep_original()$/;"	f
s:suite	plugged/lightline.vim/test/highlight.vim	/^let s:suite = themis#suite('highlight')$/;"	v
s:assert	plugged/lightline.vim/test/highlight.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.before_each()$/;"	f
hi	plugged/lightline.vim/test/highlight.vim	/^function! s:hi(name)$/;"	f
pattern	plugged/lightline.vim/test/highlight.vim	/^function! s:pattern(xs, ...) abort$/;"	f
suite.highlight	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.highlight()$/;"	f
suite.insert	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.insert()$/;"	f
suite.visual	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.visual()$/;"	f
suite.replace	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.replace()$/;"	f
suite.left_right	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.left_right()$/;"	f
suite.no_components	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.no_components()$/;"	f
suite.subseparator	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.subseparator()$/;"	f
suite.component_type	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.component_type()$/;"	f
s:suite	plugged/lightline.vim/test/uniq.vim	/^let s:suite = themis#suite('uniq')$/;"	v
s:assert	plugged/lightline.vim/test/uniq.vim	/^let s:assert = themis#helper('assert')$/;"	v
uniq	plugged/lightline.vim/test/uniq.vim	/^function! s:uniq(...)$/;"	f
suite.nil	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.nil()$/;"	f
suite.one	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.one()$/;"	f
suite.two	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.two()$/;"	f
suite.three	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.three()$/;"	f
suite.two_duplicated	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.two_duplicated()$/;"	f
suite.three_duplicated	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.three_duplicated()$/;"	f
suite.many1	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.many1()$/;"	f
suite.many2	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.many2()$/;"	f
suite.many3	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.many3()$/;"	f
s:suite	plugged/lightline.vim/test/link.vim	/^let s:suite = themis#suite('link')$/;"	v
s:assert	plugged/lightline.vim/test/link.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/link.vim	/^function! s:suite.before_each()$/;"	f
clear	plugged/lightline.vim/test/link.vim	/^function! s:clear()$/;"	f
hi	plugged/lightline.vim/test/link.vim	/^function! s:hi(name)$/;"	f
suite.link	plugged/lightline.vim/test/link.vim	/^function! s:suite.link()$/;"	f
suite.insert	plugged/lightline.vim/test/link.vim	/^function! s:suite.insert()$/;"	f
suite.visual	plugged/lightline.vim/test/link.vim	/^function! s:suite.visual()$/;"	f
suite.replace	plugged/lightline.vim/test/link.vim	/^function! s:suite.replace()$/;"	f
suite.left_right	plugged/lightline.vim/test/link.vim	/^function! s:suite.left_right()$/;"	f
suite.subseparator	plugged/lightline.vim/test/link.vim	/^function! s:suite.subseparator()$/;"	f
suite.component_type	plugged/lightline.vim/test/link.vim	/^function! s:suite.component_type()$/;"	f
suite.hi_clear	plugged/lightline.vim/test/link.vim	/^function! s:suite.hi_clear()$/;"	f
s:suite	plugged/lightline.vim/test/expand.vim	/^let s:suite = themis#suite('expand')$/;"	v
s:assert	plugged/lightline.vim/test/expand.vim	/^let s:assert = themis#helper('assert')$/;"	v
expand	plugged/lightline.vim/test/expand.vim	/^function! s:expand(...)$/;"	f
suite.expand	plugged/lightline.vim/test/expand.vim	/^function! s:suite.expand()$/;"	f
suite.default	plugged/lightline.vim/test/expand.vim	/^function! s:suite.default()$/;"	f
suite.custom	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.raw_type	plugged/lightline.vim/test/expand.vim	/^function! s:suite.raw_type()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'raw' } }$/;"	v
suite.component_raw	plugged/lightline.vim/test/expand.vim	/^function! s:suite.component_raw()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' }, 'component_raw': { 'custom': 1 } }$/;"	v
suite.multiple	plugged/lightline.vim/test/expand.vim	/^function! s:suite.multiple()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.multiple_type	plugged/lightline.vim/test/expand.vim	/^function! s:suite.multiple_type()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.flatten	plugged/lightline.vim/test/expand.vim	/^function! s:suite.flatten()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_flatten	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_flatten()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_string()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_string()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_number	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_number()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_number	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_number()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string_array	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string_array	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string_array_2	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_2()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string_array_2	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_2()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string_array_3	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_3()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string_array_3	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_3()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string_array_4	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_4()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string_array_4	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_4()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_left_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_left_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_left_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_left_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_right_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_right_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_right_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_right_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_one	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_one()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_one	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_one()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_two	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_two()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_two	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_two()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_mixed	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_mixed	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_mixed_2	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed_2()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_mixed_2	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed_2()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_error	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_error()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_error	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_error()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.notfound	plugged/lightline.vim/test/expand.vim	/^function! s:suite.notfound()$/;"	f
suite.custom_type_notfound	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_notfound()$/;"	f
suite.duplicated_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_string()$/;"	f
Modified	plugged/lightline.vim/test/expand.vim	/^  function! Modified()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom', 'modified': 'Modified' } }$/;"	v
suite.duplicated_left_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_left_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_left_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_left_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.duplicated_right_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_right_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_right_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_right_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.duplicated_both_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_both_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.duplicated_both_nil_left_most	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_left_most()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_both_nil_left_most	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_left_most()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.duplicated_both_nil_right_most	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_right_most()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_both_nil_right_most	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_right_most()$/;"	f
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.dictionary_function	plugged/lightline.vim/test/expand.vim	/^function! s:suite.dictionary_function()$/;"	f
s:suite	plugged/lightline.vim/test/mode.vim	/^let s:suite = themis#suite('mode')$/;"	v
s:assert	plugged/lightline.vim/test/mode.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.mode	plugged/lightline.vim/test/mode.vim	/^function! s:suite.mode()$/;"	f
suite.mode_map	plugged/lightline.vim/test/mode.vim	/^function! s:suite.mode_map()$/;"	f
s:suite	plugged/lightline.vim/test/tabline.vim	/^let s:suite = themis#suite('tabline')$/;"	v
s:assert	plugged/lightline.vim/test/tabline.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.before_each()$/;"	f
suite.tabline	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabline()$/;"	f
suite.enabled	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.enabled()$/;"	f
suite.disabled	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.disabled()$/;"	f
suite.tabnew	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew()$/;"	f
suite.tabnew_first	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew_first()$/;"	f
suite.tabnext	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabnext()$/;"	f
suite.tabonly	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabonly()$/;"	f
suite.tabclose	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose()$/;"	f
suite.tabclose_last	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose_last()$/;"	f
s:suite	plugged/lightline.vim/test/tabs.vim	/^let s:suite = themis#suite('tabs')$/;"	v
s:assert	plugged/lightline.vim/test/tabs.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.before_each()$/;"	f
tab	plugged/lightline.vim/test/tabs.vim	/^function! s:tab(number, ...) abort$/;"	f
suite.tabs	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabs()$/;"	f
suite.tabnew	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew()$/;"	f
suite.tabnew_tabnew	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
suite.tabnew_tabfirst	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabfirst()$/;"	f
suite.tabnew_tabnew_tabfirst	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabfirst()$/;"	f
suite.tabnew_tabnew_tabprevious	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabprevious()$/;"	f
suite.tabnew_20	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20()$/;"	f
suite.tabnew_20_tabfirst	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst()$/;"	f
suite.tabnew_20_tabfirst_tabnext	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst_tabnext()$/;"	f
suite.tabnew_20_tabnext_10	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabnext_10()$/;"	f
suite.tabnew_20_tabprevious	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious()$/;"	f
suite.tabnew_20_tabprevious_tabprevious	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious_tabprevious()$/;"	f
s:suite	plugged/lightline.vim/test/subseparator.vim	/^let s:suite = themis#suite('subseparator')$/;"	v
s:assert	plugged/lightline.vim/test/subseparator.vim	/^let s:assert = themis#helper('assert')$/;"	v
subseparator	plugged/lightline.vim/test/subseparator.vim	/^function! s:subseparator(...)$/;"	f
suite.subseparator_component	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component()$/;"	f
suite.subseparator_component_visible_condition_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_1()$/;"	f
suite.subseparator_component_visible_condition_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_2()$/;"	f
suite.subseparator_component_visible_condition_3	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_3()$/;"	f
suite.subseparator_component_visible_condition_4	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_4()$/;"	f
suite.subseparator_component_visible_condition_5	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_5()$/;"	f
suite.subseparator_component_visible_condition_6	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_6()$/;"	f
suite.subseparator_component_visible_condition_7	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_7()$/;"	f
suite.subseparator_component_function	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_1()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_2()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_3	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_3()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_4	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_4()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_5	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_5()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_6	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_6()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_7	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_7()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_visible_condition_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_1()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '1', 'custom2': '1', 'custom3': '1' } }$/;"	v
suite.subseparator_component_function_visible_condition_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_2()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '0', 'custom2': '1', 'custom3': '1' } }$/;"	v
suite.subseparator_component_function_visible_condition_3	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_3()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '1', 'custom2': '0', 'custom3': '1' } }$/;"	v
suite.subseparator_component_function_visible_condition_4	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_4()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '1', 'custom2': '0', 'custom3': '0' } }$/;"	v
suite.subseparator_component_function_visible_condition_5	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_5()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '0' } }$/;"	v
suite.subseparator_component_function_visible_condition_6	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_6()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom2': '1', 'custom3': '1' } }$/;"	v
suite.subseparator_component_function_visible_condition_7	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_7()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom3': '1' } }$/;"	v
suite.subseparator_component_expand	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_expand	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_expand_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_1()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1' }, 'component_function': { 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_expand_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_2()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'component_function': { 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_expand_3	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_3()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'component_expand': { 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_not_found	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1' } }$/;"	v
suite.subseparator_component_not_found_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_1()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom2': 'Custom2' } }$/;"	v
suite.subseparator_component_not_found_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_2()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' } }$/;"	v
s:suite	plugged/lightline.vim/test/toggle.vim	/^let s:suite = themis#suite('toggle')$/;"	v
s:assert	plugged/lightline.vim/test/toggle.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/toggle.vim	/^function! s:suite.before_each()$/;"	f
suite.default	plugged/lightline.vim/test/toggle.vim	/^function! s:suite.default()$/;"	f
suite.disable_enable	plugged/lightline.vim/test/toggle.vim	/^function! s:suite.disable_enable()$/;"	f
suite.toggle	plugged/lightline.vim/test/toggle.vim	/^function! s:suite.toggle()$/;"	f
s:suite	plugged/lightline.vim/test/autocmd.vim	/^let s:suite = themis#suite('autocmd')$/;"	v
s:assert	plugged/lightline.vim/test/autocmd.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/autocmd.vim	/^function! s:suite.before_each()$/;"	f
suite.doautoall	plugged/lightline.vim/test/autocmd.vim	/^function! s:suite.doautoall()$/;"	f
s:suite	plugged/lightline.vim/test/onetab.vim	/^let s:suite = themis#suite('onetab')$/;"	v
s:assert	plugged/lightline.vim/test/onetab.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.before_each()$/;"	f
suite.onetab	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.onetab()$/;"	f
suite.tabnew	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew()$/;"	f
suite.tabnew_tabnew	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
suite.modified	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.modified()$/;"	f
suite.filename	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.filename()$/;"	f
suite.filename_modified	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.filename_modified()$/;"	f
suite.active_inactive	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.active_inactive()$/;"	f
suite.tab_component	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component()$/;"	f
suite.tab_component_function	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_function()$/;"	f
g:lightline	plugged/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'custom' ] }, 'tab_component_function': { 'custom': 'Custom' } }$/;"	v
suite.tab_component_empty_middle	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_middle()$/;"	f
suite.tab_component_empty_left	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_left()$/;"	f
suite.tab_component_empty_middle	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_middle()$/;"	f
s:suite	plugged/lightline.vim/test/error.vim	/^let s:suite = themis#suite('error')$/;"	v
s:assert	plugged/lightline.vim/test/error.vim	/^let s:assert = themis#helper('assert')$/;"	v
message	plugged/lightline.vim/test/error.vim	/^function! s:message() abort$/;"	f
suite.error	plugged/lightline.vim/test/error.vim	/^function! s:suite.error()$/;"	f
s:suite	plugged/lightline.vim/test/quickfix.vim	/^let s:suite = themis#suite('quickfix')$/;"	v
s:assert	plugged/lightline.vim/test/quickfix.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/quickfix.vim	/^function! s:suite.before_each()$/;"	f
suite.quickfix_statusline	plugged/lightline.vim/test/quickfix.vim	/^function! s:suite.quickfix_statusline()$/;"	f
s:suite	plugged/lightline.vim/test/popup.vim	/^let s:suite = themis#suite('popup')$/;"	v
s:assert	plugged/lightline.vim/test/popup.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	plugged/lightline.vim/test/popup.vim	/^function! s:suite.before_each()$/;"	f
suite.win_execute_setfiletype	plugged/lightline.vim/test/popup.vim	/^function! s:suite.win_execute_setfiletype()$/;"	f
g:loaded_lightline	plugged/lightline.vim/plugin/lightline.vim	/^let g:loaded_lightline = 1$/;"	v
s:save_cpo	plugged/lightline.vim/plugin/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
lightline	plugged/lightline.vim/plugin/lightline.vim	/^augroup lightline$/;"	a
g:qf_disable_statusline	plugged/lightline.vim/plugin/lightline.vim	/^let g:qf_disable_statusline = 1$/;"	v
s:save_cpo	plugged/lightline.vim/autoload/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
s:_	plugged/lightline.vim/autoload/lightline.vim	/^let s:_ = 1 " 1: uninitialized, 2: disabled$/;"	v
lightline#update	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#update() abort$/;"	f
skip	plugged/lightline.vim/autoload/lightline.vim	/^  function! s:skip() abort " Vim 8.2.0257 (00f3b4e007), 8.2.0991 (0fe937fd86), 8.2.0996 (40a019f157)$/;"	f
skip	plugged/lightline.vim/autoload/lightline.vim	/^  function! s:skip() abort$/;"	f
lightline#update_disable	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#update_disable() abort$/;"	f
lightline#enable	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#enable() abort$/;"	f
lightline#disable	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#disable() abort$/;"	f
lightline#toggle	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#toggle() abort$/;"	f
s:_lightline	plugged/lightline.vim/autoload/lightline.vim	/^let s:_lightline = {$/;"	v
lightline#init	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#init() abort$/;"	f
lightline#colorscheme	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#colorscheme() abort$/;"	f
lightline#palette	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#palette() abort$/;"	f
lightline#mode	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#mode() abort$/;"	f
s:mode	plugged/lightline.vim/autoload/lightline.vim	/^let s:mode = ''$/;"	v
lightline#link	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#link(...) abort$/;"	f
term	plugged/lightline.vim/autoload/lightline.vim	/^function! s:term(p) abort$/;"	f
s:uniq	plugged/lightline.vim/autoload/lightline.vim	/^  let s:uniq = function('uniq')$/;"	v
uniq	plugged/lightline.vim/autoload/lightline.vim	/^  function! s:uniq(xs) abort$/;"	f
lightline#highlight	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#highlight(...) abort$/;"	f
subseparator	plugged/lightline.vim/autoload/lightline.vim	/^function! s:subseparator(components, subseparator, expanded) abort$/;"	f
lightline#concatenate	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#concatenate(xs, right) abort$/;"	f
lightline#statusline	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#statusline(inactive) abort$/;"	f
normalize	plugged/lightline.vim/autoload/lightline.vim	/^function! s:normalize(result) abort$/;"	f
evaluate_expand	plugged/lightline.vim/autoload/lightline.vim	/^function! s:evaluate_expand(component) abort$/;"	f
convert	plugged/lightline.vim/autoload/lightline.vim	/^function! s:convert(name, index) abort$/;"	f
expand	plugged/lightline.vim/autoload/lightline.vim	/^function! s:expand(components) abort$/;"	f
func	plugged/lightline.vim/autoload/lightline.vim	/^function! s:func(name) abort$/;"	f
line	plugged/lightline.vim/autoload/lightline.vim	/^function! s:line(tabline, inactive) abort$/;"	f
s:tabnr	plugged/lightline.vim/autoload/lightline.vim	/^let s:tabnr = -1$/;"	v
s:tabcnt	plugged/lightline.vim/autoload/lightline.vim	/^let s:tabcnt = -1$/;"	v
s:columns	plugged/lightline.vim/autoload/lightline.vim	/^let s:columns = -1$/;"	v
s:tabline	plugged/lightline.vim/autoload/lightline.vim	/^let s:tabline = ''$/;"	v
lightline#tabline	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#tabline() abort$/;"	f
lightline#tabs	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#tabs() abort$/;"	f
lightline#onetab	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#onetab(n, active) abort$/;"	f
lightline#error	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#error(msg) abort$/;"	f
s:save_cpo	plugged/lightline.vim/autoload/lightline/tab.vim	/^let s:save_cpo = &cpo$/;"	v
lightline#tab#filename	plugged/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#filename(n) abort$/;"	f
lightline#tab#modified	plugged/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#modified(n) abort$/;"	f
lightline#tab#readonly	plugged/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#readonly(n) abort$/;"	f
lightline#tab#tabnum	plugged/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#tabnum(n) abort$/;"	f
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:nord0	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord0 = ["#2E3440", "NONE"]$/;"	v
s:nord1	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord1 = ["#3B4252", 0]$/;"	v
s:nord2	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord2 = ["#434C5E", "NONE"]$/;"	v
s:nord3	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord3 = ["#4C566A", 8]$/;"	v
s:nord4	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord4 = ["#D8DEE9", "NONE"]$/;"	v
s:nord5	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord5 = ["#E5E9F0", 7]$/;"	v
s:nord6	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord6 = ["#ECEFF4", 15]$/;"	v
s:nord7	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord7 = ["#8FBCBB", 14]$/;"	v
s:nord8	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord8 = ["#88C0D0", 6]$/;"	v
s:nord9	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord9 = ["#81A1C1", 4]$/;"	v
s:nord10	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord10 = ["#5E81AC", 12]$/;"	v
s:nord11	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord11 = ["#BF616A", 1]$/;"	v
s:nord12	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord12 = ["#D08770", 11]$/;"	v
s:nord13	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord13 = ["#EBCB8B", 3]$/;"	v
s:nord14	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord14 = ["#A3BE8C", 2]$/;"	v
s:nord15	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord15 = ["#B48EAD", 5]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.left = [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.warning = [ [ s:nord1, s:nord13 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.error = [ [ s:nord1, s:nord11 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.left =  [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.middle = [ [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.insert.left = [ [ s:nord1, s:nord6 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.replace.left = [ [ s:nord1, s:nord13 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.visual.left = [ [ s:nord1, s:nord7 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.left = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.right = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.tabsel = [ [ s:nord1, s:nord8 ] ]$/;"	v
g:lightline#colorscheme#nord#palette	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let g:lightline#colorscheme#nord#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base02 = [ '#30302c', 236 ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:yellow = [ '#ffb964', 215 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:orange = [ '#fad07a', 222 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:red = [ '#cf6a4c', 167 ]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:magenta = [ '#f0a0c0', 217 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:blue = [ '#8197bf', 103 ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:cyan = [ '#8fbfdc', 110 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:green = [ '#99ad6a', 107 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.replace.left = [ [ s:base02, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.left = copy(s:p.normal.middle)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.middle = copy(s:p.normal.middle)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.right = copy(s:p.tabline.middle)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
g:lightline#colorscheme#jellybeans#palette	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let g:lightline#colorscheme#jellybeans#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base03 = [ '#242424', 235 ]$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base023 = [ '#353535', 236 ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base02 = [ '#444444', 238 ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base01 = [ '#585858', 240 ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base00 = [ '#666666', 242  ]$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base0 = [ '#808080', 244 ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base1 = [ '#969696', 247 ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base2 = [ '#a8a8a8', 248 ]$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base3 = [ '#d0d0d0', 252 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:yellow = [ '#cae682', 180 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:orange = [ '#e5786d', 173 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:red = [ '#e5786d', 203 ]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:magenta = [ '#f2c68a', 216 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:blue = [ '#8ac6f2', 117 ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:cyan = s:blue$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:green = [ '#95e454', 119 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.right = [ [ s:base023, s:base01 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base02 ], [ s:base00, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
g:lightline#colorscheme#wombat#palette	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let g:lightline#colorscheme#wombat#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base3 = '#cccccc'$/;"	v
s:base23	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base23 = '#bbbbbb'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base2 = '#aaaaaa'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base1 = '#999999'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base0 = '#777777'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base00 = '#666666'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base01 = '#555555'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base02 = '#444444'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base023 = '#333333'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base03 = '#2d2d2d'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:red = '#f2777a'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:orange = '#f99157'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:yellow = '#ffcc66'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:green = '#99cc99'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:cyan = '#009999'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:blue = '#99cccc'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:magenta = '#cc99cc'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Eighties#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Eighties#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:bg_1	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:bg_1      = ['#184956', 0]$/;"	v
s:bg_2	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:bg_2      = ['#2d5b69', 8]$/;"	v
s:dim_0	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:dim_0     = ['#72898f', 7]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:red       = ['#fa5750', 1]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:green     = ['#75b938', 2]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:yellow    = ['#dbb32d', 3]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:blue      = ['#4695f7', 4]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:magenta   = ['#f275be', 5]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:cyan      = ['#41c7b9', 6]$/;"	v
s:brred	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brred     = ['#ff665c', 9]$/;"	v
s:brgreen	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brgreen   = ['#84c747', 10]$/;"	v
s:bryellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:bryellow  = ['#ebc13d', 11]$/;"	v
s:brblue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brblue    = ['#58a3ff', 12]$/;"	v
s:brmagenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brmagenta = ['#ff84cd', 13]$/;"	v
s:brcyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brcyan    = ['#53d6c7', 14]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
g:lightline#colorscheme#selenized_dark#palette	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let g:lightline#colorscheme#selenized_dark#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base0 = '#e6e1cf'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base1 = '#e6e1cf'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base2 = '#3e4b59'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base3 = '#e6e1cf'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base00 = '#14191f'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base01 = '#14191f'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base02 = '#0f1419'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base023 = '#0f1419'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base03 = '#e6b673'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:yellow = '#e6b673'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:orange = '#ff7733'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:red = '#f07178'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:magenta = '#ffee99'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:blue = '#36a3d9'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:cyan = s:blue$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:green = '#b8cc52'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base01 ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.inactive.right = [ [ s:base1, s:base01 ], [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.tabsel = [ [ s:base02, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
g:lightline#colorscheme#ayu_dark#palette	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let g:lightline#colorscheme#ayu_dark#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:bg_1	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:bg_1      = ['#252525', 0]$/;"	v
s:bg_2	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:bg_2      = ['#3b3b3b', 8]$/;"	v
s:dim_0	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:dim_0     = ['#777777', 7]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:red       = ['#ed4a46', 1]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:green     = ['#70b433', 2]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:yellow    = ['#dbb32d', 3]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:blue      = ['#368aeb', 4]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:magenta   = ['#eb6eb7', 5]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:cyan      = ['#3fc5b7', 6]$/;"	v
s:brred	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brred     = ['#ff5e56', 9]$/;"	v
s:brgreen	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brgreen   = ['#83c746', 10]$/;"	v
s:bryellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:bryellow  = ['#efc541', 11]$/;"	v
s:brblue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brblue    = ['#4f9cfe', 12]$/;"	v
s:brmagenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brmagenta = ['#ff81ca', 13]$/;"	v
s:brcyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brcyan    = ['#56d8c9', 14]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
g:lightline#colorscheme#selenized_black#palette	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let g:lightline#colorscheme#selenized_black#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:almost_black	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:almost_black = [ '#1c1c1c', 234 ]$/;"	v
s:darker_grey	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:darker_grey  = [ '#262626', 235 ]$/;"	v
s:medium_grey	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:medium_grey  = [ '#585858', 240 ]$/;"	v
s:lighter_grey	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:lighter_grey = [ '#bcbcbc', 250 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:green        = [ '#5f875f',  65 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:red          = [ '#af5f5f', 131 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:orange       = [ '#ff8700', 208 ]$/;"	v
s:ocre	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:ocre         = [ '#87875f', 101 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:yellow       = [ '#ffffaf', 229 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.left     = [ [ s:darker_grey, s:ocre ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.middle   = [ [ s:lighter_grey, s:darker_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.right    = [ [ s:darker_grey, s:ocre ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.warning  = [ [ s:almost_black, s:orange ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.error    = [ [ s:almost_black, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.inactive.left   = [ [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.inactive.middle = [ [ s:medium_grey, s:darker_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.inactive.right  = [ [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.insert.left     = [ [ s:darker_grey, s:green ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.insert.right    = [ [ s:darker_grey, s:green ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.replace.left    = [ [ s:darker_grey, s:red ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.replace.right   = [ [ s:darker_grey, s:red ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.visual.left     = [ [ s:darker_grey, s:yellow ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.visual.right    = [ [ s:darker_grey, s:yellow ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.tabline.left    = [ [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.tabline.middle  = [ [ s:lighter_grey, s:darker_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.tabline.right   = [ [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.tabline.tabsel  = [ [ s:darker_grey, s:ocre ] ]$/;"	v
g:lightline#colorscheme#apprentice#palette	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let g:lightline#colorscheme#apprentice#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.left = [ ['#0000ff', '#ffffff', 21, 231, 'bold' ], [ '#ffffff', '#0000ff', 231, 21 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.right = [ [ '#303030', '#d0d0d0', 236, 252 ], [ '#303030', '#8a8a8a', 236, 245 ], [ '#bcbcbc', '#585858', 250, 240 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.right = [ [ '#121212', '#606060', 233, 241 ], [ '#121212', '#3a3a3a', 233, 237 ], [ '#121212', '#262626', 233, 235 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.insert.left =  [ ['#005f00', '#ffffff', 22, 231, 'bold' ], [ '#ffffff', '#005f00', 231, 22 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.replace.left = [ [ '#af0000', '#ffffff', 124, 231, 'bold' ], [ '#ffffff', '#af0000', 231, 124 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.visual.left = [ [ '#5f00ff', '#ffffff', 57, 231, 'bold' ], [ '#ffffff', '#5f00ff', 231, 57 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.middle = [ [ '#8a8a8a', '#303030', 245, 236 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.middle = [ [ '#303030', '#121212', 236, 233 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.left = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.tabsel = [ [ '#dadada', '#121212', 253, 233 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.middle = [ [ '#8a8a8a', '#3a3a3a', 245, 237 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.right = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.error = [ [ '#d0d0d0', '#ff0000', 252, 196 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.warning = [ [ '#262626', '#ffff00', 235, 226 ] ]$/;"	v
g:lightline#colorscheme#landscape#palette	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let g:lightline#colorscheme#landscape#palette = s:p$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base0 = '#5C6773'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base1 = '#5C6773'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base2 = '#828C99'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base3 = '#5C6773'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base00 = '#FFFFFF'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base01 = '#FFFFFF'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base02 = '#FAFAFA'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base023 = '#FAFAFA'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base03 = '#E6B673'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:yellow = '#E6B673'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:orange = '#FF7733'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:red = '#f07178'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:magenta = '#A37ACC'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:blue = '#59c2ff'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:cyan = s:blue$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:green = '#86B300'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base01 ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.inactive.right = [ [ s:base1, s:base01 ], [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.tabsel = [ [ s:base02, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
g:lightline#colorscheme#ayu_light#palette	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let g:lightline#colorscheme#ayu_light#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base3 = '#ffffff'$/;"	v
s:base23	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base23 = '#ffffff'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base2 = '#ffffff'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base1 = '#ffffff'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base0 = '#ffffff'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base00 = '#6060df'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base01 = '#6060af'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base02 = '#606087'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base023 = '#202087'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base03 = '#002451'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:red = '#ff9da4'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:orange = '#ffc58f'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:yellow = '#ffeead'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:green = '#d1f1a9'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:cyan = '#99ffff'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:blue = '#bbdaff'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:magenta = '#ebbbff'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Blue#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Blue#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:black	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:black = [ '#000000', 0 ]$/;"	v
s:maroon	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:maroon = [ '#800000', 1 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:green = [ '#008000', 2 ]$/;"	v
s:olive	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:olive = [ '#808000', 3 ]$/;"	v
s:navy	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:navy = [ '#000080', 4 ]$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:purple = [ '#800080', 5 ]$/;"	v
s:teal	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:teal = [ '#008080', 6 ]$/;"	v
s:silver	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:silver = [ '#c0c0c0', 7 ]$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:gray = [ '#808080', 8]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:red = [ '#ff0000', 9 ]$/;"	v
s:lime	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:lime = [ '#00ff00', 10 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:yellow = [ '#ffff00', 11 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:blue = [ '#0000ff', 12 ]$/;"	v
s:fuchsia	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:fuchsia = [ '#ff00ff', 13 ]$/;"	v
s:aqua	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:aqua = [ '#00ffff', 14 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:white = [ '#ffffff', 15 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.left = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.middle = [ [ s:silver, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.right = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.error = [ [ s:black, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.warning = [ [ s:black, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.left =  [ [ s:silver, s:gray ], [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.middle = [ [ s:silver, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.right = [ [ s:silver, s:gray ], [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.insert.left = [ [ s:white, s:green ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.insert.right = copy(s:p.insert.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.replace.left = [ [ s:white, s:red ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.replace.right = copy(s:p.replace.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.visual.left = [ [ s:white, s:purple ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.visual.right = copy(s:p.visual.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.left = [ [ s:silver, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.tabsel = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.middle = [ [ s:silver, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
g:lightline#colorscheme#16color#palette	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let g:lightline#colorscheme#16color#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:black	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:black = [ '#2b2b2b', 235 ]$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:gray = [ '#323232', 236 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:white = [ '#a9b7c6', 250 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:blue = [ '#6897bb' , 67 ] $/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:green = [ '#629755', 71 ] $/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:purple = [ '#9876aa', 104 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:red = [ '#ff6b68', 204 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:yellow = [ '#ffc66d', 222 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.left = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.right = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.left =  [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.right = [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:gray ] ] $/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.right = [ [ s:black, s:green ], [ s:green, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.right = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.right = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.left = [ [ s:blue, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:blue ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.middle = [ [ s:blue, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.right = [ [ s:black, s:blue ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.error = [ [ s:red, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
g:lightline#colorscheme#darcula#palette	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let g:lightline#colorscheme#darcula#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:red = '#df0000'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:green = '#008700'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:blue = '#4271ae'$/;"	v
s:pink	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:pink = '#d7005f'$/;"	v
s:olive	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:olive = '#718c00'$/;"	v
s:navy	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:navy = '#005f87'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:orange = '#d75f00'$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:purple = '#8959a8'$/;"	v
s:aqua	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:aqua = '#3e999f'$/;"	v
s:foreground	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:foreground = '#4d4d4c'$/;"	v
s:background	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:background = '#F5F5F5'$/;"	v
s:window	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:window = '#efefef'$/;"	v
s:status	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:status = s:aqua$/;"	v
s:error	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:error = '#ffafdf'$/;"	v
s:tabline_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_bg = s:navy$/;"	v
s:tabline_active_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_fg = s:foreground$/;"	v
s:tabline_active_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_bg = s:window$/;"	v
s:tabline_inactive_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_fg = s:background$/;"	v
s:tabline_inactive_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_bg = s:aqua$/;"	v
s:statusline_active_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_fg = s:window$/;"	v
s:statusline_active_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_bg = s:navy$/;"	v
s:statusline_inactive_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_fg = s:foreground$/;"	v
s:statusline_inactive_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_bg = '#dadada'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.insert.left = [ [ s:blue, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.visual.left = [ [ s:background, s:orange ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.warning = [ [ s:background, s:olive ] ]$/;"	v
g:lightline#colorscheme#PaperColor_light#palette	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let g:lightline#colorscheme#PaperColor_light#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:yellow = [ '#e5cd52' , 221 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:blue = [ '#4fb4d8' , 39 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:red = [ '#f92672' , 161 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:green = [ '#78bd65' , 41 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:orange = [ '#ef7c2a' , 202 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:white = [ '#ffffff' , 15 ]$/;"	v
s:lightGray	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:lightGray = [ '#848794' , 245 ]$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:gray = [ '#686b78' , 242 ]$/;"	v
s:darkGray	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:darkGray = [ '#45474f' , 238 ]$/;"	v
s:veryDarkGray	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:veryDarkGray = [ '#1c1d21' , 234 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.left = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.insert.left = [ [ s:white, s:green ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.visual.left = [ [ s:white, s:orange ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.replace.left = [ [ s:white, s:red ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.right = [ [ s:darkGray, s:gray ], [ s:darkGray, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.left = [ [ s:lightGray, s:darkGray ], [ s:white, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.middle = [ [ s:white, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.middle = [ [ s:white, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.error = [ [ s:red, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.warning = [ [ s:orange, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.left = [ [ s:lightGray, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.tabsel = [ [ s:darkGray, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.middle = [ [ s:yellow, s:veryDarkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.right = copy(s:p.normal.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.insert.right = copy(s:p.insert.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.visual.right = copy(s:p.visual.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.replace.right = copy(s:p.replace.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.right = copy(s:p.tabline.left)$/;"	v
g:lightline#colorscheme#OldHope#palette	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let g:lightline#colorscheme#OldHope#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#PaperColor#palette	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_light#palette$/;"	v
g:lightline#colorscheme#PaperColor#palette	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_dark#palette$/;"	v
s:fg	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:fg     = '#eeffff'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:blue   = '#82aaff'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:green  = '#c3e88d'$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:purple = '#c792ea'$/;"	v
s:red1	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:red1   = '#f07178'$/;"	v
s:red2	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:red2   = '#ff5370'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:yellow = '#ffcb6b'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:bg     = '#ffffff'$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray1  = '#2e3c43'$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray2  = '#eeffff'$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray3  = '#546e7a'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.insert.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:bg     = '#263238'$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray1  = '#314549'$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray2  = '#2E3C43'$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray3  = '#314549'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.insert.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.insert.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.left   = [ [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.right  = [ [ s:bg, s:red1, 'bold' ] ]$/;"	v
g:lightline#colorscheme#material#palette	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let g:lightline#colorscheme#material#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:cuicolors	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cuicolors = {$/;"	v
s:solarized_termcolors	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:solarized_termcolors = get(g:, 'solarized_termcolors', 256)$/;"	v
s:cuiindex	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 0$/;"	v
s:cuiindex	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 1$/;"	v
s:cuiindex	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 2$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base03 = [ '#002b36', s:cuicolors.base03[s:cuiindex] ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base02 = [ '#073642', s:cuicolors.base02[s:cuiindex] ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base01 = [ '#586e75', s:cuicolors.base01[s:cuiindex] ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base00 = [ '#657b83', s:cuicolors.base00[s:cuiindex] ]$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base0 = [ '#839496', s:cuicolors.base0[s:cuiindex] ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base1 = [ '#93a1a1', s:cuicolors.base1[s:cuiindex] ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base2 = [ '#eee8d5', s:cuicolors.base2[s:cuiindex] ]$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base3 = [ '#fdf6e3', s:cuicolors.base3[s:cuiindex] ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:yellow = [ '#b58900', s:cuicolors.yellow[s:cuiindex] ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:orange = [ '#cb4b16', s:cuicolors.orange[s:cuiindex] ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:red = [ '#dc322f', s:cuicolors.red[s:cuiindex] ]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:magenta = [ '#d33682', s:cuicolors.magenta[s:cuiindex] ]$/;"	v
s:violet	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:violet = [ '#6c71c4', s:cuicolors.violet[s:cuiindex] ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:blue = [ '#268bd2', s:cuicolors.blue[s:cuiindex] ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cyan = [ '#2aa198', s:cuicolors.cyan[s:cuiindex] ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:green = [ '#859900', s:cuicolors.green[s:cuiindex] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.left = [ [ s:base03, s:blue ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.right = [ [ s:base03, s:base1 ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.right = [ [ s:base03, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.insert.left = [ [ s:base03, s:green ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.replace.left = [ [ s:base03, s:red ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.visual.left = [ [ s:base03, s:magenta ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.middle = [ [ s:base01, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.left = [ [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.tabsel = [ [ s:base03, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.right = copy(s:p.tabline.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.warning = [ [ s:base03, s:yellow ] ]$/;"	v
g:lightline#colorscheme#solarized#palette	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let g:lightline#colorscheme#solarized#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base02 = [ '#30302c', 236 ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:yellow = [ '#fbb829', 3 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:orange = [ '#d75f00', 166 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:red = [ '#ff3128', 1 ]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:magenta = [ '#e02c6d', 5 ]$/;"	v
s:bright_magenta	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:bright_magenta = [ '#e35682', 13 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:blue = [ '#5573a3', 4 ]$/;"	v
s:bright_blue	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:bright_blue = [ '#8eb2f7', 12 ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:cyan = [ '#0aaeb3', 6 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:green = [ '#519f50', 2 ]$/;"	v
s:bright_green	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:bright_green = [ '#98bc37', 10 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:white = [ '#fce8c3', 15 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.left = [ [ s:base02, s:bright_blue, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.insert.left = [ [ s:base02, s:bright_green, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.replace.left = [ [ s:base3, s:red, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.visual.left = [ [ s:base3, s:bright_magenta, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00, 'bold'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
g:lightline#colorscheme#srcery_drk#palette	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let g:lightline#colorscheme#srcery_drk#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#default#palette	plugged/lightline.vim/autoload/lightline/colorscheme/default.vim	/^let g:lightline#colorscheme#default#palette = g:lightline#colorscheme#powerline#palette$/;"	v
s:bg_1	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:bg_1      = ['#ebebeb', 0]$/;"	v
s:bg_2	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:bg_2      = ['#cdcdcd', 8]$/;"	v
s:dim_0	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:dim_0     = ['#878787', 7]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:red       = ['#d6000c', 1]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:green     = ['#1d9700', 2]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:yellow    = ['#c49700', 3]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:blue      = ['#0064e4', 4]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:magenta   = ['#dd0f9d', 5]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:cyan      = ['#00ad9c', 6]$/;"	v
s:brred	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brred     = ['#bf0000', 9]$/;"	v
s:brgreen	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brgreen   = ['#008400', 10]$/;"	v
s:bryellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:bryellow  = ['#af8500', 11]$/;"	v
s:brblue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brblue    = ['#0054cf', 12]$/;"	v
s:brmagenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brmagenta = ['#c7008b', 13]$/;"	v
s:brcyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brcyan    = ['#009a8a', 14]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
g:lightline#colorscheme#selenized_white#palette	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let g:lightline#colorscheme#selenized_white#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base3 = '#c5c8c6'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base2 = '#bababa'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base1 = '#a0a0a0'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base0 = '#909090'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base00 = '#666666'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base01 = '#555555'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base02 = '#434343'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base023 = '#303030'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base03 = '#1d1f21'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:red = '#cc6666'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:orange = '#de935f'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:yellow = '#f0c674'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:green = '#b5bd68'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:cyan = '#8abeb7'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:blue = '#81a2be'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:magenta = '#b294bb'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base0 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
g:lightline#colorscheme#Tomorrow_Night#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let g:lightline#colorscheme#Tomorrow_Night#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.left = [ ['darkestgreen', 'brightgreen', 'bold'], ['white', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.right = [ ['gray10', 'gray2'], ['white', 'gray1'], ['white', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.inactive.right = [ ['gray1', 'gray5'], ['gray4', 'gray1'], ['gray4', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.insert.left = [ ['darkestcyan', 'white', 'bold'], ['mediumcyan', 'darkestblue'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.insert.right = [ [ 'darkestblue', 'mediumcyan' ], [ 'mediumcyan', 'darkblue' ], [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.replace.left = [ ['white', 'brightred', 'bold'], ['white', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.visual.left = [ ['black', 'brightestorange', 'bold'], ['white', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.middle = [ [ 'white', 'gray0' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.insert.middle = [ [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.replace.right = s:p.normal.right$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.left = [ [ 'gray9', 'gray0' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.tabsel = [ [ 'gray9', 'gray2' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.middle = [ [ 'gray2', 'gray0' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.right = [ [ 'gray9', 'gray1' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.error = [ [ 'gray9', 'brightestred' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.warning = [ [ 'gray1', 'yellow' ] ]$/;"	v
g:lightline#colorscheme#powerlineish#palette	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let g:lightline#colorscheme#powerlineish#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.left = [ ['darkestgreen', 'brightgreen', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.right = [ ['gray5', 'gray10'], ['gray9', 'gray4'], ['gray8', 'gray2'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.right = [ ['gray1', 'gray5'], ['gray4', 'gray1'], ['gray4', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.left = [ ['darkestcyan', 'white', 'bold'], ['white', 'darkblue'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.right = [ [ 'darkestcyan', 'mediumcyan' ], [ 'mediumcyan', 'darkblue' ], [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.left = [ ['white', 'brightred', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.visual.left = [ ['darkred', 'brightorange', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.middle = [ [ 'gray7', 'gray2' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.middle = [ [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.right = s:p.normal.right$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.left = [ [ 'gray9', 'gray4' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.tabsel = [ [ 'gray9', 'gray1' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.middle = [ [ 'gray2', 'gray8' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.right = [ [ 'gray9', 'gray3' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.error = [ [ 'gray9', 'brightestred' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.warning = [ [ 'gray1', 'yellow' ] ]$/;"	v
g:lightline#colorscheme#powerline#palette	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let g:lightline#colorscheme#powerline#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base02 = [ '#30302c', 236 ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:yellow = [ '#d8af5f', 3 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:orange = [ '#d7875f', 216 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:red = [ '#d68787', 131 ]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:magenta = [ '#df5f87', 168 ]$/;"	v
s:peach	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:peach = [ '#d7afaf', 181 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:blue = [ '#87afaf', 109 ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:cyan = [ '#87d7d7', 23 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:green = [ '#87af87', 108 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:white = [ '#d0d0d0', 252 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.replace.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.visual.left = [ [ s:base02, s:peach ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
g:lightline#colorscheme#seoul256#palette	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let g:lightline#colorscheme#seoul256#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:fg	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:fg     = '#d5dbe5'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:blue   = '#89ddff'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:green  = '#8bd649'$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:purple = '#82aaff'$/;"	v
s:red1	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:red1   = '#ec5f67'$/;"	v
s:red2	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:red2   = '#ec5f67'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:yellow = '#ffcc00'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:bg     = '#ffffff'$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray1  = '#2c393f'$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray2  = '#d5dbe5'$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray3  = '#707880'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:bg     = '#263238'$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray1  = '#37474f'$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray2  = '#2c393f'$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray3  = '#37474f'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.insert.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.left   = [ [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.right  = copy(s:p.normal.right)$/;"	v
g:lightline#colorscheme#materia#palette	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let g:lightline#colorscheme#materia#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base3 = '#eaeaea'$/;"	v
s:base23	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base23 = '#d0d0d0'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base2 = '#c6c6c6'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base1 = '#b2b2b2'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base0 = '#949494'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base00 = '#767676'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base01 = '#606060'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base02 = '#4e4e4e'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base023 = '#262626'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base03 = '#12124c'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:red = '#d54e53'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:orange = '#e78c45'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:yellow = '#e7c547'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:green = '#b9ca4a'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:cyan = '#70c0b1'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:blue = '#7aa6da'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:magenta = '#c397d8'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Bright#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Bright#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:bg_1	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:bg_1      = ['#ece3cc', 0]$/;"	v
s:bg_2	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:bg_2      = ['#d5cdb6', 8]$/;"	v
s:dim_0	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:dim_0     = ['#909995', 7]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:red       = ['#d2212d', 1]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:green     = ['#489100', 2]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:yellow    = ['#ad8900', 3]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:blue      = ['#0072d4', 4]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:magenta   = ['#ca4898', 5]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:cyan      = ['#009c8f', 6]$/;"	v
s:brred	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brred     = ['#cc1729', 9]$/;"	v
s:brgreen	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brgreen   = ['#428b00', 10]$/;"	v
s:bryellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:bryellow  = ['#a78300', 11]$/;"	v
s:brblue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brblue    = ['#006dce', 12]$/;"	v
s:brmagenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brmagenta = ['#c44392', 13]$/;"	v
s:brcyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brcyan    = ['#00978a', 14]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
g:lightline#colorscheme#selenized_light#palette	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let g:lightline#colorscheme#selenized_light#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:blue   = [ '#61afef', 75 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:green  = [ '#98c379', 76 ]$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:purple = [ '#c678dd', 176 ]$/;"	v
s:red1	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red1   = [ '#e06c75', 168 ]$/;"	v
s:red2	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red2   = [ '#be5046', 168 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:yellow = [ '#e5c07b', 180 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:fg	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:fg    = [ '#494b53', 238 ]$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg    = [ '#fafafa', 255 ]$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1 = [ '#494b53', 238 ]$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2 = [ '#f0f0f0', 255 ]$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3 = [ '#d0d0d0', 250 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:green = [ '#98c379', 35 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ] ]$/;"	v
s:fg	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:fg    = [ '#abb2bf', 145 ]$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg    = [ '#282c34', 235 ]$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1 = [ '#5c6370', 241 ]$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2 = [ '#2c323d', 235 ]$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3 = [ '#3e4452', 240 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.left    = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.middle  = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.right   = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.error   = [ [ s:red2, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.insert.right   = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.insert.left    = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.replace.left   = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.visual.left    = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.left   = [ [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.right  = copy(s:p.normal.right)$/;"	v
g:lightline#colorscheme#one#palette	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let g:lightline#colorscheme#one#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:black	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:black = [ '#232526', 233 ]$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:gray = [ '#808080', 244 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:white = [ '#f8f8f2', 234 ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:cyan = [ '#66d9ef', 81 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:green = [ '#a6e22e', 118 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:orange = [ '#ef5939', 166 ]$/;"	v
s:pink	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:pink = [ '#f92672', 161 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:red = [ '#ff0000', 160 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:yellow = [ '#e6db74', 229 ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.left = [ [ s:black, s:cyan ], [ s:orange, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.middle = [ [ s:orange, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.right = [ [ s:pink, s:black ], [ s:black, s:pink ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.error = [ [ s:pink, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.left =  [ [ s:pink, s:black ], [ s:white, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.middle = [ [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.right = [ [ s:white, s:pink ], [ s:pink, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.left = [ [ s:pink, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.middle = [ [ s:pink, s:black] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:pink ] ]$/;"	v
g:lightline#colorscheme#molokai#palette	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let g:lightline#colorscheme#molokai#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:red = '#df0000'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:green = '#008700'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:blue = '#00afaf'$/;"	v
s:pink	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:pink = '#afdf00'$/;"	v
s:olive	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:olive = '#dfaf5f'$/;"	v
s:navy	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:navy = '#df875f'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:orange = '#d75f00'$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:purple = '#8959a8'$/;"	v
s:aqua	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:aqua = '#3e999f'$/;"	v
s:foreground	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:foreground = '#d0d0d0'$/;"	v
s:background	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:background = '#444444'$/;"	v
s:window	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:window = '#efefef'$/;"	v
s:status	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:status = '#c6c6c6'$/;"	v
s:error	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:error = '#5f0000'$/;"	v
s:tabline_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_bg = '#3a3a3a'$/;"	v
s:tabline_active_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_fg = '#1c1c1c'$/;"	v
s:tabline_active_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_bg = '#00afaf'$/;"	v
s:tabline_inactive_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_fg = '#c6c6c6'$/;"	v
s:tabline_inactive_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_bg = '#585858'$/;"	v
s:statusline_active_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_fg = '#1c1c1c'$/;"	v
s:statusline_active_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_bg = '#5f8787'$/;"	v
s:statusline_inactive_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_fg = '#c6c6c6'$/;"	v
s:statusline_inactive_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_bg = '#444444'$/;"	v
s:visual_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_fg = '#000000'$/;"	v
s:visual_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_bg = '#8787af'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.insert.left = [ [ s:background, s:blue], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.visual.left = [ [ s:visual_fg, s:visual_bg ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
g:lightline#colorscheme#PaperColor_dark#palette	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let g:lightline#colorscheme#PaperColor_dark#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:black	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:black = [ '#000000', '0' ]$/;"	v
s:black2	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:black2 = [ '#121212', '233' ]$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray = [ '#262626', '235' ]$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray2 = [ '#3a3a3a', '237' ]$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray3 = [ '#4e4e4e', '239' ]$/;"	v
s:gray4	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray4 = [ '#626262', '241' ]$/;"	v
s:violet	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:violet = [ '#cf73e6', '170' ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:blue = [ '#5f87af', '67' ]$/;"	v
s:blue2	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:blue2 = [ '#91aadf', '110' ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:green = [ '#57ba37', '71' ]$/;"	v
s:gold	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gold = [ '#f0d50c', '220' ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:red = [ '#d70000', '160' ]$/;"	v
s:none	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:none = [ 'NONE', 'NONE' ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.left = [ [ s:black, s:blue ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.right = [ [ s:gray, s:gray4 ], [ s:gray3, s:gray ], [ s:gray2, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.inactive.right = [ [ s:black, s:black2 ], [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.inactive.left =  [ [ s:gray, s:black ], [ s:black2, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.visual.left = [ [ s:black, s:violet ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.middle = [ [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.inactive.middle = [ [ s:black2, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.left = [ [ s:gray4, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.tabsel = [ [ s:blue, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.middle = [ [ s:black2, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.error = [ [ s:red, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.warning = [ [ s:gold, s:black2 ] ]$/;"	v
g:lightline#colorscheme#simpleblack#palette	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let g:lightline#colorscheme#simpleblack#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base0 = '#d9d7ce'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base1 = '#d9d7ce'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base2 = '#607080'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base3 = '#d9d7ce'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base00 = '#272d38'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base01 = '#272d38'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base02 = '#212733'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base023 = '#212733'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base03 = '#ffc44c'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:yellow = '#ffc44c'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:orange = '#ffae57'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:red = '#f07178'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:magenta = '#d4bfff'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:blue = '#59c2ff'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:cyan = s:blue$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:green = '#bbe67e'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base01 ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.inactive.right = [ [ s:base1, s:base01 ], [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.tabsel = [ [ s:base02, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
g:lightline#colorscheme#ayu_mirage#palette	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let g:lightline#colorscheme#ayu_mirage#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base03 = '#fafafa'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base023 = '#dfdfdf'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base02 = '#c8c8c8'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base01 = '#b4b4b4'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base00 = '#808080'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base0 = '#666666'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base1 = '#555555'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base2 = '#4f4f4f'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base3 = '#4d4d4c'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:red = '#c82829'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:orange = '#f5871f'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:yellow = '#eab700'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:green = '#718c00'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:cyan = '#3e999f'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:blue = '#4271ae'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:magenta = '#8959a8'$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.error = [ [ s:red, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base0 ] ]$/;"	v
g:lightline#colorscheme#Tomorrow#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let g:lightline#colorscheme#Tomorrow#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:term_red	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_red = 204$/;"	v
s:term_green	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_green = 114$/;"	v
s:term_yellow	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_yellow = 180$/;"	v
s:term_blue	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_blue = 39$/;"	v
s:term_purple	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_purple = 170$/;"	v
s:term_white	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_white = 145$/;"	v
s:term_black	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_black = 235$/;"	v
s:term_grey	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_grey = 236$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.left = [ [ '#292c33', '#98c379', s:term_black, s:term_green, 'bold' ], [ '#98c379', '#292c33', s:term_green, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.right = [ [ '#292c33', '#98c379', s:term_black, s:term_green ], [ '#abb2bf', '#3e4452', s:term_white, s:term_grey ], [ '#98c379', '#292c33', s:term_green, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.inactive.right = [ [ '#292c33', '#61afef', s:term_black, s:term_blue], [ '#abb2bf', '#3e4452', s:term_white, s:term_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.left = [ [ '#292c33', '#61afef', s:term_black, s:term_blue, 'bold' ], [ '#61afef', '#292c33', s:term_blue, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.right = [ [ '#292c33', '#61afef', s:term_black, s:term_blue ], [ '#ABB2BF', '#3E4452', s:term_white, s:term_grey ], [ '#61afef', '#292c33', s:term_blue, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.left = [ [ '#292c33', '#e06c75', s:term_black, s:term_red, 'bold' ], [ '#e06c75', '#292c33', s:term_red, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.right = [ [ '#292c33', '#e06c75', s:term_black, s:term_red ], s:p.normal.right[1], [ '#e06c75', '#292c33', s:term_red, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.visual.left = [ [ '#292c33', '#c678dd', s:term_black, s:term_purple, 'bold' ], [ '#c678dd', '#292c33', s:term_purple, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.visual.right = [ [ '#292c33', '#c678dd', s:term_black, s:term_purple ], s:p.normal.right[1], [ '#c678dd', '#292c33', s:term_purple, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.middle = [ [ '#abb2bf', '#292c33', s:term_white, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.left = [ s:p.normal.left[1] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.tabsel = [ s:p.normal.left[0] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.right = [ s:p.normal.left[1] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.error = [ [ '#292c33', '#e06c75', s:term_black, s:term_red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.warning = [ [ '#292c33', '#e5c07b', s:term_black, s:term_yellow ] ]$/;"	v
g:lightline#colorscheme#deus#palette	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let g:lightline#colorscheme#deus#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:save_cpo	plugged/lightline.vim/autoload/lightline/colortable.vim	/^let s:save_cpo = &cpo$/;"	v
load	plugged/lightline.vim/autoload/lightline/colortable.vim	/^function! s:load() abort$/;"	f
s:table	plugged/lightline.vim/autoload/lightline/colortable.vim	/^let s:table = s:load()$/;"	v
lightline#colortable#name_to_rgb	plugged/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#name_to_rgb(name) abort$/;"	f
lightline#colortable#gui2cui	plugged/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#gui2cui(rgb, fallback) abort$/;"	f
lightline#colortable#gui2cui_palette	plugged/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#gui2cui_palette(palette) abort$/;"	f
s:save_cpo	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:save_cpo = &cpo$/;"	v
s:cuicolor	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:cuicolor = {$/;"	v
s:guicolor	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:guicolor = {$/;"	v
convert	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:convert(rgb) abort$/;"	f
black	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:black(x) abort$/;"	f
nr	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:nr(x) abort$/;"	f
rgb	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:rgb(r, g, b) abort$/;"	f
upconvert	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:upconvert(nr) abort$/;"	f
lightline#colorscheme#fill	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#fill(p) abort$/;"	f
lightline#colorscheme#flatten	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#flatten(p) abort$/;"	f
lightline#colorscheme#background	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^  function! lightline#colorscheme#background() abort$/;"	f
lightline#colorscheme#background	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^  function! lightline#colorscheme#background() abort$/;"	f
s:cpo_save	plugged/taglist.vim/plugin/taglist.vim	/^let s:cpo_save = &cpo$/;"	v
loaded_taglist	plugged/taglist.vim/plugin/taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
Tlist_Ctags_Cmd	plugged/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	plugged/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	plugged/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	plugged/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	plugged/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
loaded_taglist	plugged/taglist.vim/plugin/taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
Tlist_Auto_Open	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_GainFocus_On_ToggleOpen	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Process_File_Always	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Show_Menu	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Sort_Type	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Use_Horiz_Window	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Inc_Winwidth	plugged/taglist.vim/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	plugged/taglist.vim/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_WinWidth	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_WinHeight	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_Display_Prototype	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Use_SingleClick	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_Compact_Format	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Exit_OnlyWindow	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_File_Fold_Auto_Close	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Close_On_Select	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Auto_Update	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Auto_Highlight_Tag	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Highlight_Tag_On_BufEnter	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Enable_Fold_Column	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Show_One_File	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Max_Submenu_Items	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	plugged/taglist.vim/plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
TagList_title	plugged/taglist.vim/plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
s:tlist_msg	plugged/taglist.vim/plugin/taglist.vim	/^    let s:tlist_msg = ''$/;"	v
TlistToggle	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistOpen	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
Tlist	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistUpdate	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
TlistHighlightTag	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistSync	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistShowPrototype	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSessionLoad	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistLock	plugged/taglist.vim/plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistUnlock	plugged/taglist.vim/plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistDebug	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistUndebug	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistMessages	plugged/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
<SID>xx	plugged/taglist.vim/plugin/taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
s:tlist_sid	plugged/taglist.vim/plugin/taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
loaded_taglist	plugged/taglist.vim/plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	plugged/taglist.vim/plugin/taglist.vim	/^let loaded_taglist = 'available'$/;"	v
s:tlist_def_asm_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cpp_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_cobol_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_eiffel_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_csh_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_zsh_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_winsize_chgd	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tlist_win_maximized	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_file_names	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_file_count	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_ftype_count	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_app_name	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_removed_flist	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_cur_file_idx	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_menu_empty	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:Tlist_Skip_Refresh	plugged/taglist.vim/plugin/taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
Tlist_Window_Display_Help	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Toggle_Help_Text	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
s:tlist_debug	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
Tlist_Debug_Enable	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Disable	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Show	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Log_Msg	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Warning_Msg	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
s:tlist_file_name_idx_cache	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
Tlist_Get_File_Index	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
s:tlist_file_lnum_idx_cache	plugged/taglist.vim/plugin/taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
Tlist_Window_Get_File_Index_By_Linenum	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Exe_Cmd_No_Acmds	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Skip_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_User_Removed_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Update_Remove_List	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_FileType_Init	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_Detect_Filetype	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Get_Buffer_Filetype	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Discard_TagInfo	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Window_Update_Line_Offsets	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Discard_FileInfo	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Window_Remove_File_From_Display	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Remove_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Window_Goto_Window	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Create	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Zoom	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
Tlist_Ballon_Expr	plugged/taglist.vim/plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Window_Check_Width	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Exit_Only_Window	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Init	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Refresh	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Post_Close_Cleanup	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Window_Refresh_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Init_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Get_Tag_Type_By_Tag	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_SearchPat	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Linenum	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Parse_Tagline	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Process_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Update_File	plugged/taglist.vim/plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Window_Close	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Mark_File_Window	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Open	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Toggle	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Process_Filelist	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Process_Dir	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Add_Files_Recursive	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Add_Files	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Extract_Tagtype	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_Extract_Tag_Scope	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Refresh	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Change_Sort	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Update_Current_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Window_Update_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Index	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Highlight_Line	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Open_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Jump_To_Tag	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Show_Info	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Find_Nearest_Tag_Idx	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_Window_Highlight_Tag	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	plugged/taglist.vim/plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tagname_By_Line	plugged/taglist.vim/plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Window_Move_To_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Session_Load	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Buffer_Removed	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Window_Open_File_Fold	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Check_Auto_Open	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Refresh_Folds	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Menu_Add_Base_Menu	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
s:menu_char_prefix	plugged/taglist.vim/plugin/taglist.vim	/^let s:menu_char_prefix =$/;"	v
Tlist_Menu_Get_Tag_Type_Cmd	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_File_Refresh	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Update_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Menu_Remove_File	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Refresh	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Jump_To_Tag	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Init	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Vim_Session_Load	plugged/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Set_App	plugged/taglist.vim/plugin/taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
TagList_Start	plugged/taglist.vim/plugin/taglist.vim	/^function! TagList_Start()$/;"	f
TagList_IsValid	plugged/taglist.vim/plugin/taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_WrapUp	plugged/taglist.vim/plugin/taglist.vim	/^function! TagList_WrapUp()$/;"	f
attach	plugged/nvim-yarp/pythonx/yarp.py	/^    from pynvim import attach, setup_logging$/;"	i
setup_logging	plugged/nvim-yarp/pythonx/yarp.py	/^    from pynvim import attach, setup_logging$/;"	i
attach	plugged/nvim-yarp/pythonx/yarp.py	/^    from neovim import attach, setup_logging$/;"	i
setup_logging	plugged/nvim-yarp/pythonx/yarp.py	/^    from neovim import attach, setup_logging$/;"	i
sys	plugged/nvim-yarp/pythonx/yarp.py	/^import sys$/;"	i
importlib	plugged/nvim-yarp/pythonx/yarp.py	/^import importlib$/;"	i
environ	plugged/nvim-yarp/pythonx/yarp.py	/^from os import environ$/;"	i
serveraddr	plugged/nvim-yarp/pythonx/yarp.py	/^serveraddr = sys.argv[1]$/;"	v
yarpid	plugged/nvim-yarp/pythonx/yarp.py	/^yarpid = int(sys.argv[2])$/;"	v
module	plugged/nvim-yarp/pythonx/yarp.py	/^module = sys.argv[3]$/;"	v
module_obj	plugged/nvim-yarp/pythonx/yarp.py	/^module_obj = None$/;"	v
nvim	plugged/nvim-yarp/pythonx/yarp.py	/^nvim = None$/;"	v
on_request	plugged/nvim-yarp/pythonx/yarp.py	/^def on_request(method, args):$/;"	f
on_notification	plugged/nvim-yarp/pythonx/yarp.py	/^def on_notification(method, args):$/;"	f
on_setup	plugged/nvim-yarp/pythonx/yarp.py	/^def on_setup():$/;"	f
yarp#py3	plugged/nvim-yarp/autoload/yarp.vim	/^func! yarp#py3(module)$/;"	f
yarp#py	plugged/nvim-yarp/autoload/yarp.vim	/^func! yarp#py(module)$/;"	f
s:loaded	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:loaded = 1$/;"	v
s:id	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:id = 1$/;"	v
s:reg	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:reg = {}$/;"	v
s:leaving	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:leaving = 0$/;"	v
yarp	plugged/nvim-yarp/autoload/yarp/core.vim	/^augroup yarp$/;"	a
s:rpcrequest	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcrequest = 'rpcrequest'$/;"	v
s:rpcnotify	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcnotify = 'rpcnotify'$/;"	v
s:jobstart	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:jobstart = 'jobstart'$/;"	v
_serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^    fun! s:_serveraddr()$/;"	f
s:serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:serveraddr = function('s:_serveraddr')$/;"	v
s:rpcrequest	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcrequest = get(g:, 'yarp_rpcrequest', 'neovim_rpc#rpcrequest')$/;"	v
s:rpcnotify	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcnotify = get(g:, 'yarp_rpcnotify', 'neovim_rpc#rpcnotify')$/;"	v
s:jobstart	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:jobstart = get(g:, 'yarp_jobstart', 'neovim_rpc#jobstart')$/;"	v
s:serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:serveraddr = get(g:, 'yarp_serveraddr', 'neovim_rpc#serveraddr')$/;"	v
yarp#core#new	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#new(rp)$/;"	f
rp.warn	plugged/nvim-yarp/autoload/yarp/core.vim	/^    func rp.warn(msg) dict$/;"	f
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.call = function('yarp#core#request')$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.request = function('yarp#core#request')$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.notify = function('yarp#core#notify')$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.try_notify = function('yarp#core#try_notify')$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.wait_channel = function('yarp#core#wait_channel')$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.id = s:id$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.job_is_dead = 0$/;"	v
s:reg	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:reg[rp.id] = rp$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.on_load = get(rp, 'on_load', function('yarp#core#_nop'))$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.job_detach = get(rp, 'job_detach', 0)$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.user_data = get(rp, 'user_data', {})$/;"	v
yarp#core#_nop	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#_nop(...) dict$/;"	f
yarp#core#on_stderr	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#on_stderr(chan_id, data, event) dict$/;"	f
yarp#core#on_exit	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#on_exit(chan_id, data, event) dict$/;"	f
yarp#core#channel_started	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#channel_started(id, channel)$/;"	f
yarp#core#request	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#request(method, ...) dict$/;"	f
yarp#core#notify	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#notify(method, ...) dict$/;"	f
yarp#core#try_notify	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#try_notify(method, ...) dict$/;"	f
yarp#core#wait_channel	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#wait_channel() dict$/;"	f
yarp#core#jobstart	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#jobstart() dict$/;"	f
yarp#core#serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#serveraddr()$/;"	f
yarp#core#error	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#error(mod, msg)$/;"	f
yarp#core#warn	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#warn(mod, msg)$/;"	f
yarp#pyx#init	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! yarp#pyx#init() dict$/;"	f
pyexe	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! s:pyexe() dict$/;"	f
py3exe	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! s:py3exe() dict$/;"	f
s:save_cpo	plugged/vim-airline/plugin/airline.vim	/^let s:save_cpo = &cpo$/;"	v
g:loaded_airline	plugged/vim-airline/plugin/airline.vim	/^let g:loaded_airline = 1$/;"	v
s:airline_initialized	plugged/vim-airline/plugin/airline.vim	/^let s:airline_initialized = 0$/;"	v
init	plugged/vim-airline/plugin/airline.vim	/^function! s:init()$/;"	f
s:active_winnr	plugged/vim-airline/plugin/airline.vim	/^let s:active_winnr = -1$/;"	v
on_window_changed	plugged/vim-airline/plugin/airline.vim	/^function! s:on_window_changed(event)$/;"	f
on_focus_gained	plugged/vim-airline/plugin/airline.vim	/^function! s:on_focus_gained()$/;"	f
on_cursor_moved	plugged/vim-airline/plugin/airline.vim	/^function! s:on_cursor_moved()$/;"	f
on_colorscheme_changed	plugged/vim-airline/plugin/airline.vim	/^function! s:on_colorscheme_changed()$/;"	f
airline#cmdwinenter	plugged/vim-airline/plugin/airline.vim	/^function! airline#cmdwinenter(...)$/;"	f
airline_toggle	plugged/vim-airline/plugin/airline.vim	/^function! s:airline_toggle()$/;"	f
get_airline_themes	plugged/vim-airline/plugin/airline.vim	/^function! s:get_airline_themes(a, l, p)$/;"	f
airline_theme	plugged/vim-airline/plugin/airline.vim	/^function! s:airline_theme(...)$/;"	f
airline_refresh	plugged/vim-airline/plugin/airline.vim	/^function! s:airline_refresh(...)$/;"	f
FocusGainedHandler	plugged/vim-airline/plugin/airline.vim	/^function! s:FocusGainedHandler(timer)$/;"	f
airline_extensions	plugged/vim-airline/plugin/airline.vim	/^function! s:airline_extensions()$/;"	f
rand	plugged/vim-airline/plugin/airline.vim	/^function! s:rand(max) abort$/;"	f
random_theme	plugged/vim-airline/plugin/airline.vim	/^function! s:random_theme() abort$/;"	f
AirlineTheme	plugged/vim-airline/plugin/airline.vim	/^command! -bar -nargs=? -complete=customlist,<sid>get_airline_themes AirlineTheme call <sid>airline_theme(<f-args>)$/;"	c
AirlineToggleWhitespace	plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggleWhitespace call airline#extensions#whitespace#toggle()$/;"	c
AirlineToggle	plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggle  call s:airline_toggle()$/;"	c
AirlineRefresh	plugged/vim-airline/plugin/airline.vim	/^command! -bar -bang AirlineRefresh call s:airline_refresh(<q-bang>)$/;"	c
AirlineExtensions	plugged/vim-airline/plugin/airline.vim	/^command! AirlineExtensions   call s:airline_extensions()$/;"	c
SectionSpec	plugged/vim-airline/t/section.vim	/^function! SectionSpec()$/;"	f
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['paste'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['text', 'raw', 'func'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['text', 'text'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['text', 'text'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['hi'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['hi'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['whitespace'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['asdf', 'func'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'raw'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'aaaa', 'raw'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['raw', '%f'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['%t', 'asdf', '%{getcwd()}'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['conditional'])$/;"	v
s	plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['ffenc','%{strftime("%H:%M")}'])$/;"	v
g:airline_theme	plugged/vim-airline/t/builder.vim	/^let g:airline_theme = 'dark'$/;"	v
s:builder	plugged/vim-airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
s:builder	plugged/vim-airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 0})$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
g:airline_theme	plugged/vim-airline/t/airline.vim	/^let g:airline_theme = 'dark'$/;"	v
MyFuncref	plugged/vim-airline/t/airline.vim	/^function! MyFuncref(...)$/;"	f
MyIgnoreFuncref	plugged/vim-airline/t/airline.vim	/^function! MyIgnoreFuncref(...)$/;"	f
MyAppend1	plugged/vim-airline/t/airline.vim	/^function! MyAppend1(...)$/;"	f
MyAppend2	plugged/vim-airline/t/airline.vim	/^function! MyAppend2(...)$/;"	f
g:airline_statusline_funcrefs	plugged/vim-airline/t/airline.vim	/^    let g:airline_statusline_funcrefs = []$/;"	v
g:airline_section_a	plugged/vim-airline/t/airline.vim	/^    let g:airline_section_a = airline#section#create(['mode', 'mode'])$/;"	v
c	plugged/vim-airline/t/airline.vim	/^    let c = len(g:airline_statusline_funcrefs)$/;"	v
g:airline_inactive_collapse	plugged/vim-airline/t/airline.vim	/^    let g:airline_inactive_collapse = 1$/;"	v
g:airline_inactive_collapse	plugged/vim-airline/t/airline.vim	/^    let g:airline_inactive_collapse = 0$/;"	v
colors	plugged/vim-airline/t/themes.vim	/^    let colors = airline#themes#get_highlight('Foo')$/;"	v
colors	plugged/vim-airline/t/themes.vim	/^      let colors = airline#themes#get_highlight('Foo')$/;"	v
colors	plugged/vim-airline/t/themes.vim	/^    let colors = airline#themes#get_highlight('Foo')$/;"	v
colors	plugged/vim-airline/t/themes.vim	/^    let colors = airline#themes#get_highlight('Foo')$/;"	v
hl	plugged/vim-airline/t/themes.vim	/^    let hl = airline#themes#get_highlight('Foo', 'bold', 'italic')$/;"	v
hl	plugged/vim-airline/t/themes.vim	/^    let hl = airline#themes#get_highlight2(['Foo','bg'], ['Foo','fg'], 'italic', 'bold')$/;"	v
map	plugged/vim-airline/t/themes.vim	/^    let map = airline#themes#generate_color_map($/;"	v
map	plugged/vim-airline/t/themes.vim	/^    let map = airline#themes#generate_color_map($/;"	v
s:sections	plugged/vim-airline/t/init.vim	/^let s:sections = ['a', 'b', 'c', 'gutter', 'x', 'y', 'z', 'warning']$/;"	v
clear	plugged/vim-airline/t/init.vim	/^function! s:clear()$/;"	f
g:airline_section_	plugged/vim-airline/t/init.vim	/^      let g:airline_section_{s} = s$/;"	v
g:airline#extensions#default#layout	plugged/vim-airline/t/extensions_default.vim	/^let g:airline#extensions#default#layout = [$/;"	v
s:builder	plugged/vim-airline/t/extensions_default.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
stl	plugged/vim-airline/t/extensions_default.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/extensions_default.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/extensions_default.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/extensions_default.vim	/^    let stl = s:builder.build()$/;"	v
stl	plugged/vim-airline/t/extensions_default.vim	/^    let stl = s:builder.build()$/;"	v
g:airline#extensions#tabline#enabled	plugged/vim-airline/t/extensions_tabline.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline_theme	plugged/vim-airline/t/highlighter.vim	/^let g:airline_theme = 'dark'$/;"	v
hl	plugged/vim-airline/t/highlighter.vim	/^    let hl = airline#highlighter#get_highlight('Foo1_to_Foo2')$/;"	v
hl	plugged/vim-airline/t/highlighter.vim	/^      let hl = airline#highlighter#get_highlight('Foo1_to_Foo2')$/;"	v
Util1	plugged/vim-airline/t/util.vim	/^function! Util1()$/;"	f
Util2	plugged/vim-airline/t/util.vim	/^function! Util2()$/;"	f
Util3	plugged/vim-airline/t/util.vim	/^function! Util3(...)$/;"	f
g:count	plugged/vim-airline/t/util.vim	/^    let g:count = 0$/;"	v
g:airline_statusline_ontop	plugged/vim-airline/t/util.vim	/^    let g:airline_statusline_ontop = 1$/;"	v
g:airline_statusline_ontop	plugged/vim-airline/t/util.vim	/^    let g:airline_statusline_ontop = 0$/;"	v
g:airline_statusline_funcrefs	plugged/vim-airline/autoload/airline.vim	/^let g:airline_statusline_funcrefs = get(g:, 'airline_statusline_funcrefs', [])$/;"	v
g:airline_inactive_funcrefs	plugged/vim-airline/autoload/airline.vim	/^let g:airline_inactive_funcrefs = get(g:, 'airline_inactive_statusline_funcrefs', [])$/;"	v
s:sections	plugged/vim-airline/autoload/airline.vim	/^let s:sections = ['a','b','c','gutter','x','y','z', 'error', 'warning']$/;"	v
s:contexts	plugged/vim-airline/autoload/airline.vim	/^let s:contexts = {}$/;"	v
s:core_funcrefs	plugged/vim-airline/autoload/airline.vim	/^let s:core_funcrefs = [$/;"	v
airline#add_statusline_func	plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_func(name, ...)$/;"	f
airline#add_inactive_statusline_func	plugged/vim-airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_func(name, ...)$/;"	f
airline#add_statusline_funcref	plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_funcref(function, ...)$/;"	f
airline#remove_statusline_func	plugged/vim-airline/autoload/airline.vim	/^function! airline#remove_statusline_func(name)$/;"	f
airline#add_inactive_statusline_funcref	plugged/vim-airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_funcref(function, ...)$/;"	f
airline#load_theme	plugged/vim-airline/autoload/airline.vim	/^function! airline#load_theme()$/;"	f
airline#switch_theme	plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_theme(name, ...)$/;"	f
airline#switch_matching_theme	plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_matching_theme()$/;"	f
airline#update_statusline	plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline()$/;"	f
airline#update_statusline_focuslost	plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_focuslost()$/;"	f
airline#update_statusline_inactive	plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_inactive(range)$/;"	f
invoke_funcrefs	plugged/vim-airline/autoload/airline.vim	/^function! s:invoke_funcrefs(context, funcrefs)$/;"	f
airline#statusline	plugged/vim-airline/autoload/airline.vim	/^function! airline#statusline(winnr)$/;"	f
airline#check_mode	plugged/vim-airline/autoload/airline.vim	/^function! airline#check_mode(winnr)$/;"	f
airline#update_tabline	plugged/vim-airline/autoload/airline.vim	/^function! airline#update_tabline()$/;"	f
airline#mode_changed	plugged/vim-airline/autoload/airline.vim	/^function! airline#mode_changed()$/;"	f
s:spc	plugged/vim-airline/autoload/airline/section.vim	/^let s:spc = g:airline_symbols.space$/;"	v
wrap_accent	plugged/vim-airline/autoload/airline/section.vim	/^function! s:wrap_accent(part, value)$/;"	f
create	plugged/vim-airline/autoload/airline/section.vim	/^function! s:create(parts, append)$/;"	f
airline#section#create	plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create(parts)$/;"	f
airline#section#create_left	plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_left(parts)$/;"	f
airline#section#create_right	plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_right(parts)$/;"	f
airline#debug#profile1	plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile1()$/;"	f
airline#debug#profile2	plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile2()$/;"	f
airline#debug#profile3	plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile3()$/;"	f
s:untracked_jobs	plugged/vim-airline/autoload/airline/async.vim	/^let s:untracked_jobs = {}$/;"	v
s:mq_jobs	plugged/vim-airline/autoload/airline/async.vim	/^let s:mq_jobs        = {}$/;"	v
s:po_jobs	plugged/vim-airline/autoload/airline/async.vim	/^let s:po_jobs        = {}$/;"	v
s:clean_jobs	plugged/vim-airline/autoload/airline/async.vim	/^let s:clean_jobs     = {}$/;"	v
untracked_output	plugged/vim-airline/autoload/airline/async.vim	/^function! s:untracked_output(dict, buf)$/;"	f
airline#async#mq_output	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#mq_output(buf, file)$/;"	f
po_output	plugged/vim-airline/autoload/airline/async.vim	/^function! s:po_output(buf, file)$/;"	f
valid_dir	plugged/vim-airline/autoload/airline/async.vim	/^function! s:valid_dir(dir)$/;"	f
airline#async#vcs_untracked	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_untracked(config, file, vcs)$/;"	f
set_clean_variables	plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_variables(file, vcs, val)$/;"	f
set_clean_jobs_variable	plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_jobs_variable(vcs, file, id)$/;"	f
on_exit_clean	plugged/vim-airline/autoload/airline/async.vim	/^function! s:on_exit_clean(...) dict abort$/;"	f
airline#async#vcs_clean	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_clean(cmd, file, vcs)$/;"	f
on_stdout	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_stdout(channel, msg) dict abort$/;"	f
on_exit_mq	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_mq(channel) dict abort$/;"	f
on_exit_untracked	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_untracked(channel) dict abort$/;"	f
on_exit_po	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_po(channel) dict abort$/;"	f
airline#async#get_mq_async	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_mq_async(cmd, file)$/;"	f
airline#async#get_msgfmt_stat	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_msgfmt_stat(cmd, file)$/;"	f
airline#async#vim_vcs_clean	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_untracked	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_untracked(config, file)$/;"	f
nvim_output_handler	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_output_handler(job_id, data, event) dict$/;"	f
nvim_untracked_job_handler	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_untracked_job_handler(job_id, data, event) dict$/;"	f
nvim_mq_job_handler	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_mq_job_handler(job_id, data, event) dict$/;"	f
nvim_po_job_handler	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_po_job_handler(job_id, data, event) dict$/;"	f
airline#async#nvim_get_mq_async	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_mq_async(cmd, file)$/;"	f
airline#async#nvim_get_msgfmt_stat	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_msgfmt_stat(cmd, file)$/;"	f
airline#async#nvim_vcs_clean	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#nvim_vcs_untracked	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#nvim_vcs_untracked(cfg, file, vcs)$/;"	f
airline#async#vim7_vcs_clean	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vim7_vcs_clean(cmd, file, vcs)$/;"	f
s:prototype	plugged/vim-airline/autoload/airline/builder.vim	/^let s:prototype = {}$/;"	v
prototype.split	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.split(...) dict$/;"	f
prototype.add_section_spaced	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section_spaced(group, contents) dict$/;"	f
prototype.add_section	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section(group, contents) dict$/;"	f
prototype.add_raw	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_raw(text) dict$/;"	f
prototype.insert_section	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_section(group, contents, position) dict$/;"	f
prototype.insert_raw	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_raw(text, position) dict$/;"	f
prototype.get_position	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.get_position() dict$/;"	f
airline#builder#get_prev_group	plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_prev_group(sections, i)$/;"	f
airline#builder#get_next_group	plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_next_group(sections, i)$/;"	f
prototype.build	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.build() dict$/;"	f
airline#builder#should_change_group	plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#should_change_group(group1, group2)$/;"	f
get_transitioned_seperator	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_transitioned_seperator(self, prev_group, group, side)$/;"	f
get_seperator	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_seperator(self, prev_group, group, side)$/;"	f
get_accented_line	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_accented_line(self, group, contents)$/;"	f
section_is_empty	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:section_is_empty(self, content)$/;"	f
airline#builder#new	plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#new(context)$/;"	f
airline#themes#generate_color_map	plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#generate_color_map(sect1, sect2, sect3, ...)$/;"	f
airline#themes#get_highlight	plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#get_highlight(group, ...)$/;"	f
airline#themes#get_highlight2	plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#get_highlight2(fg, bg, ...)$/;"	f
airline#themes#patch	plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#patch(palette)$/;"	f
(sect2,	plugged/vim-airline/autoload/airline/themes.vim	/^    map(sect2, (_, v) => type(v) != type('') ? string(v) : v)$/;"	m
check_defined	plugged/vim-airline/autoload/airline/init.vim	/^function! s:check_defined(variable, default)$/;"	f
s:loaded	plugged/vim-airline/autoload/airline/init.vim	/^let s:loaded = 0$/;"	v
airline#init#bootstrap	plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#bootstrap()$/;"	f
airline#init#sections	plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#sections()$/;"	f
airline_lsp_count	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! s:airline_lsp_count(cnt, symbol) abort$/;"	f
airline_lsp_get_line_number	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! s:airline_lsp_get_line_number(cnt, type) abort$/;"	f
airline#extensions#lsp#get	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get(type) abort$/;"	f
airline#extensions#lsp#get_warning	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get_warning() abort$/;"	f
airline#extensions#lsp#get_error	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get_error() abort$/;"	f
s:lsp_progress	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^let s:lsp_progress = []$/;"	v
airline#extensions#lsp#progress	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#progress() abort$/;"	f
s:timer	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^let s:timer = 0$/;"	v
s:ignore_time	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^let s:ignore_time = 0$/;"	v
airline#extensions#lsp#update	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#update() abort$/;"	f
airline#extensions#lsp#init	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#init(ext) abort$/;"	f
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:error_symbol = get(g:, 'airline#extensions#neomake#error_symbol', 'E:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#neomake#warning_symbol', 'W:')$/;"	v
get_counts	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! s:get_counts()$/;"	f
airline#extensions#neomake#get_warnings	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_warnings()$/;"	f
airline#extensions#neomake#get_errors	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_errors()$/;"	f
airline#extensions#neomake#init	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#init(ext)$/;"	f
s:tmuxline_snapshot_file	plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:tmuxline_snapshot_file = get(g:, 'airline#extensions#tmuxline#snapshot_file', '')$/;"	v
s:color_template	plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:color_template = get(g:, 'airline#extensions#tmuxline#color_template', 'normal')$/;"	v
airline#extensions#tmuxline#init	plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#init(ext)$/;"	f
airline#extensions#tmuxline#set_tmux_colors	plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#set_tmux_colors(palette)$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
airline#extensions#poetv#init	plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#init(ext)$/;"	f
airline#extensions#poetv#apply	plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#apply(...)$/;"	f
airline#extensions#poetv#update	plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#update()$/;"	f
s:denite_ver	plugged/vim-airline/autoload/airline/extensions/denite.vim	/^let s:denite_ver = (exists('*denite#get_status_mode') ? 2 : 3)$/;"	v
airline#extensions#denite#check_denite_mode	plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#check_denite_mode(bufnr) abort$/;"	f
airline#extensions#denite#apply	plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#apply(...) abort$/;"	f
airline#extensions#denite#init	plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#init(ext) abort$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^let s:spc = g:airline_symbols.space$/;"	v
g:airline#extensions#obsession#indicator_text	plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^  let g:airline#extensions#obsession#indicator_text = '$'$/;"	v
airline#extensions#obsession#init	plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#init(ext)$/;"	f
airline#extensions#obsession#get_status	plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#get_status()$/;"	f
g:loaded_vim_airline_zoomwintab	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^let g:loaded_vim_airline_zoomwintab = 1$/;"	v
s:zoomwintab_status_zoomed_in	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^let s:zoomwintab_status_zoomed_in =$/;"	v
s:zoomwintab_status_zoomed_out	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^let s:zoomwintab_status_zoomed_out =$/;"	v
airline#extensions#zoomwintab#apply	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^function! airline#extensions#zoomwintab#apply(...) abort$/;"	f
airline#extensions#zoomwintab#init	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^function! airline#extensions#zoomwintab#init(ext) abort$/;"	f
s:non_zero_only	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:non_zero_only = get(g:, 'airline#extensions#hunks#non_zero_only', 0)$/;"	v
s:hunk_symbols	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:hunk_symbols = get(g:, 'airline#extensions#hunks#hunk_symbols', ['+', '~', '-'])$/;"	v
coc_git_enabled	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:coc_git_enabled() abort$/;"	f
get_hunks_signify	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_signify() abort$/;"	f
get_hunks_coc	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_coc() abort$/;"	f
get_hunks_gitgutter	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_gitgutter() abort$/;"	f
get_hunks_changes	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_changes() abort$/;"	f
get_hunks_empty	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_empty() abort$/;"	f
airline#extensions#hunks#get_raw_hunks	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_raw_hunks() abort$/;"	f
airline#extensions#hunks#get_hunks	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_hunks() abort$/;"	f
airline#extensions#hunks#init	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#init(ext) abort$/;"	f
airline#extensions#gen_tags#status	plugged/vim-airline/autoload/airline/extensions/gen_tags.vim	/^function! airline#extensions#gen_tags#status(...) abort$/;"	f
airline#extensions#gen_tags#init	plugged/vim-airline/autoload/airline/extensions/gen_tags.vim	/^function! airline#extensions#gen_tags#init(ext) abort$/;"	f
airline#extensions#gutentags#status	plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#status()$/;"	f
airline#extensions#gutentags#init	plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#init(ext)$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/term.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:section_a	plugged/vim-airline/autoload/airline/extensions/term.vim	/^let s:section_a = airline#section#create_left(['terminal', 'tmode'])$/;"	v
s:section_z	plugged/vim-airline/autoload/airline/extensions/term.vim	/^let s:section_z = airline#section#create(['linenr', 'maxlinenr'])$/;"	v
airline#extensions#term#apply	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#apply(...) abort$/;"	f
airline#extensions#term#inactive_apply	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#inactive_apply(...) abort$/;"	f
airline#extensions#term#termmode	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#termmode() abort$/;"	f
termname	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:termname(bufnr) abort$/;"	f
neoterm_id	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:neoterm_id(bufnr) abort$/;"	f
airline#extensions#term#init	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#init(ext) abort$/;"	f
airline#extensions#po#shorten	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#shorten()$/;"	f
airline#extensions#po#on_winenter	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#on_winenter()$/;"	f
autocmd_handler	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! s:autocmd_handler()$/;"	f
airline#extensions#po#apply	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#apply(...)$/;"	f
airline#extensions#po#stats	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#stats()$/;"	f
airline#extensions#po#init	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#init(ext)$/;"	f
g:loaded_cursormode	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let g:loaded_cursormode = 1$/;"	v
s:is_win	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_iTerm	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_iTerm = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'iTerm.app'$/;"	v
s:is_AppleTerminal	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_AppleTerminal = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'Apple_Terminal'$/;"	v
s:is_good	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_good = !has('gui_running') && !s:is_win && !s:is_AppleTerminal$/;"	v
s:last_mode	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:last_mode = ''$/;"	v
g:cursormode_exit_mode	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^  let g:cursormode_exit_mode='n'$/;"	v
airline#extensions#cursormode#tmux_escape	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#tmux_escape(escape)$/;"	f
s:iTerm_escape_template	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:iTerm_escape_template = '\\033]Pl%s\\033\\\\'$/;"	v
s:xterm_escape_template	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:xterm_escape_template = '\\033]12;%s\\007'$/;"	v
get_mode	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_mode()$/;"	f
airline#extensions#cursormode#set	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#set(...)$/;"	f
set_cursor_color_for	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:set_cursor_color_for(mode)$/;"	f
build_command	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:build_command(color)$/;"	f
get_color_map	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_color_map()$/;"	f
airline	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^augroup airline#extensions#cursormode$/;"	a
airline#extensions#cursormode#activate	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#activate()$/;"	f
airline#extensions#cursormode#apply	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#apply(...)$/;"	f
airline#extensions#cursormode#init	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#init(ext)$/;"	f
airline#extensions#wordcount#formatters#default#update_fmt	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#update_fmt(...)$/;"	f
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = '.'$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ''$/;"	v
airline#extensions#wordcount#formatters#default#to_string	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#to_string(wordcount)$/;"	f
airline#extensions#wordcount#formatters#readingtime#update_fmt	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^function! airline#extensions#wordcount#formatters#readingtime#update_fmt(...) abort$/;"	f
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = '.'$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = ''$/;"	v
airline#extensions#wordcount#formatters#readingtime#to_string	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^function! airline#extensions#wordcount#formatters#readingtime#to_string(wordcount) abort$/;"	f
airline#extensions#taglist#currenttag	plugged/vim-airline/autoload/airline/extensions/taglist.vim	/^function! airline#extensions#taglist#currenttag()$/;"	f
airline#extensions#taglist#init	plugged/vim-airline/autoload/airline/extensions/taglist.vim	/^function! airline#extensions#taglist#init(ext)$/;"	f
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^let s:error_symbol = get(g:, 'airline#extensions#coc#error_symbol', 'E:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#coc#warning_symbol', 'W:')$/;"	v
s:show_coc_status	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^let s:show_coc_status = get(g:, 'airline#extensions#coc#show_coc_status', 1)$/;"	v
airline#extensions#coc#get_warning	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_warning() abort$/;"	f
airline#extensions#coc#get_error	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_error() abort$/;"	f
airline#extensions#coc#get	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get(type) abort$/;"	f
airline#extensions#coc#get_status	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_status() abort$/;"	f
airline#extensions#coc#get_current_function	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_current_function() abort$/;"	f
airline#extensions#coc#init	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#init(ext) abort$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
airline#extensions#virtualenv#init	plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#init(ext)$/;"	f
airline#extensions#virtualenv#apply	plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#apply(...)$/;"	f
airline#extensions#virtualenv#update	plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#update()$/;"	f
s:prompt_snapshot_file	plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:prompt_snapshot_file = get(g:, 'airline#extensions#promptline#snapshot_file', '')$/;"	v
s:color_template	plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:color_template = get(g:, 'airline#extensions#promptline#color_template', 'normal')$/;"	v
airline#extensions#promptline#init	plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#init(ext)$/;"	f
airline#extensions#promptline#set_prompt_colors	plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#set_prompt_colors(palette)$/;"	f
airline#extensions#keymap#status	plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#status()$/;"	f
airline#extensions#keymap#init	plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#init(ext)$/;"	f
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:error_symbol = get(g:, 'airline#extensions#languageclient#error_symbol', 'E:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#languageclient#warning_symbol', 'W:')$/;"	v
s:show_line_numbers	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:show_line_numbers = get(g:, 'airline#extensions#languageclient#show_line_numbers', 1)$/;"	v
s:severity_error	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_error = 1$/;"	v
s:severity_warning	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_warning = 2$/;"	v
s:severity_info	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_info = 3$/;"	v
s:severity_hint	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_hint = 4$/;"	v
s:diagnostics	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:diagnostics = {}$/;"	v
languageclient_refresh	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:languageclient_refresh()$/;"	f
record_diagnostics	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:record_diagnostics(state)$/;"	f
get_diagnostics	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:get_diagnostics()$/;"	f
diagnostics_for_buffer	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:diagnostics_for_buffer()$/;"	f
airline_languageclient_count	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_count(cnt, symbol)$/;"	f
airline_languageclient_get_line_number	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_get_line_number(type) abort$/;"	f
airline#extensions#languageclient#get	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get(type)$/;"	f
airline#extensions#languageclient#get_warning	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_warning()$/;"	f
airline#extensions#languageclient#get_error	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_error()$/;"	f
airline#extensions#languageclient#init	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#init(ext)$/;"	f
s:flags	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:flags = get(g:, 'airline#extensions#tagbar#flags', '')$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:init	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:init=0$/;"	v
airline#extensions#tagbar#get_status	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#get_status(...)$/;"	f
airline#extensions#tagbar#inactive_apply	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#inactive_apply(...)$/;"	f
s:airline_tagbar_last_lookup_time	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_time = 0$/;"	v
s:airline_tagbar_last_lookup_val	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_val = ''$/;"	v
airline#extensions#tagbar#currenttag	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#currenttag()$/;"	f
airline#extensions#tagbar#init	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#init(ext)$/;"	f
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:error_symbol = get(g:, 'airline#extensions#syntastic#error_symbol', 'E:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#syntastic#warning_symbol', 'W:')$/;"	v
airline#extensions#syntastic#get_warning	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_warning()$/;"	f
airline#extensions#syntastic#get_error	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_error()$/;"	f
airline#extensions#syntastic#get	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get(type)$/;"	f
airline#extensions#syntastic#init	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#init(ext)$/;"	f
airline#extensions#unicode#apply	plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#apply(...)$/;"	f
airline#extensions#unicode#init	plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#init(ext)$/;"	f
airline#extensions#vista#currenttag	plugged/vim-airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#currenttag() abort$/;"	f
airline#extensions#vista#init	plugged/vim-airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#init(ext) abort$/;"	f
airline#extensions#gina#apply	plugged/vim-airline/autoload/airline/extensions/gina.vim	/^function! airline#extensions#gina#apply(...) abort$/;"	f
airline#extensions#gina#init	plugged/vim-airline/autoload/airline/extensions/gina.vim	/^function! airline#extensions#gina#init(ext) abort$/;"	f
airline#extensions#ctrlspace#statusline	plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#statusline(...) abort$/;"	f
airline#extensions#ctrlspace#init	plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#init(ext) abort$/;"	f
airline#extensions#fern#apply	plugged/vim-airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#apply(...) abort$/;"	f
airline#extensions#fern#init	plugged/vim-airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#init(ext) abort$/;"	f
airline#extensions#fzf#init	plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#init(ext) abort$/;"	f
airline#extensions#fzf#statusline	plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#statusline(...) abort$/;"	f
airline#extensions#fzf#apply	plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#apply(...) abort$/;"	f
airline#extensions#fzf#inactive_apply	plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#inactive_apply(...) abort$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^let s:spc = g:airline_symbols.space$/;"	v
SetDefault	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! s:SetDefault(var, val)$/;"	f
airline#extensions#vimtex#init	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#init(ext)$/;"	f
airline#extensions#vimtex#apply	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#apply(...)$/;"	f
airline#extensions#vimtex#get_scope	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#get_scope()$/;"	f
s:taboo	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:taboo = get(g:, 'airline#extensions#taboo#enabled', 1) && get(g:, 'loaded_taboo', 0)$/;"	v
g:taboo_tabline	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  let g:taboo_tabline = 0$/;"	v
s:ctrlspace	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:ctrlspace = get(g:, 'CtrlSpaceLoaded', 0)$/;"	v
s:tabws	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:tabws = get(g:, 'tabws_loaded', 0)$/;"	v
s:current_tabcnt	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:current_tabcnt = -1$/;"	v
airline#extensions#tabline#init	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#init(ext)$/;"	f
airline#extensions#tabline#add_label	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_label(dict, type, right)$/;"	f
airline#extensions#tabline#add_tab_label	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_tab_label(dict)$/;"	f
toggle_off	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! s:toggle_off()$/;"	f
toggle_on	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! s:toggle_on()$/;"	f
airline#extensions#tabline#load_theme	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#load_theme(palette)$/;"	f
update_tabline	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! s:update_tabline(forceit)$/;"	f
airline#extensions#tabline#redraw	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#redraw()$/;"	f
airline#extensions#tabline#enable	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#enable()$/;"	f
airline#extensions#tabline#get	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#get()$/;"	f
airline#extensions#tabline#title	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#title(n)$/;"	f
airline#extensions#tabline#get_buffer_name	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#get_buffer_name(nr, ...)$/;"	f
airline#extensions#tabline#new_builder	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#new_builder()$/;"	f
airline#extensions#tabline#group_of_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#group_of_bufnr(tab_bufs, bufnr)$/;"	f
s:enabled	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:enabled = get(g:, 'airline#extensions#localsearch#enabled', 1)$/;"	v
g:airline#extensions#localsearch#loaded	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#loaded = 001$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:spc = g:airline_symbols.space$/;"	v
g:airline#extensions#localsearch#inverted	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#inverted = get(g:, 'airline#extensions#localsearch#inverted', 0)$/;"	v
airline#extensions#localsearch#load_theme	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#load_theme(palette) abort$/;"	f
airline#extensions#localsearch#init	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#init(ext) abort$/;"	f
airline#extensions#localsearch#apply	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#apply(...) abort$/;"	f
airline#extensions#battery#status	plugged/vim-airline/autoload/airline/extensions/battery.vim	/^function! airline#extensions#battery#status(...) abort$/;"	f
airline#extensions#battery#init	plugged/vim-airline/autoload/airline/extensions/battery.vim	/^function! airline#extensions#battery#init(ext) abort$/;"	f
airline_nvimlsp_count	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! s:airline_nvimlsp_count(cnt, symbol) abort$/;"	f
airline#extensions#nvimlsp#get	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get(type) abort$/;"	f
airline#extensions#nvimlsp#get_warning	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get_warning() abort$/;"	f
airline#extensions#nvimlsp#get_error	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get_error() abort$/;"	f
airline#extensions#nvimlsp#init	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#init(ext) abort$/;"	f
airline#extensions#nrrwrgn#apply	plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#apply(...)$/;"	f
airline#extensions#nrrwrgn#init	plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#init(ext)$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/example.vim	/^let s:spc = g:airline_symbols.space$/;"	v
g:airline#extensions#example#number_of_cats	plugged/vim-airline/autoload/airline/extensions/example.vim	/^  let g:airline#extensions#example#number_of_cats = 42$/;"	v
airline#extensions#example#init	plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#init(ext)$/;"	f
airline#extensions#example#apply	plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#apply(...)$/;"	f
airline#extensions#example#get_cats	plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#get_cats()$/;"	f
airline#extensions#undotree#apply	plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#apply(...)$/;"	f
airline#extensions#undotree#init	plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#init(ext)$/;"	f
airline#extensions#capslock#status	plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#status()$/;"	f
airline#extensions#capslock#init	plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#init(ext)$/;"	f
airline#extensions#scrollbar#calculate	plugged/vim-airline/autoload/airline/extensions/scrollbar.vim	/^function! airline#extensions#scrollbar#calculate() abort$/;"	f
airline#extensions#scrollbar#init	plugged/vim-airline/autoload/airline/extensions/scrollbar.vim	/^function! airline#extensions#scrollbar#init(ext) abort$/;"	f
get_wordcount	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^  function! s:get_wordcount(visual_mode_active)$/;"	f
get_wordcount	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^  function! s:get_wordcount(visual_mode_active)$/;"	f
s:formatter	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:formatter = get(g:, 'airline#extensions#wordcount#formatter', 'default')$/;"	v
format_wordcount	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:format_wordcount(wordcount)$/;"	f
s:formatter	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      let s:formatter = 'default'$/;"	v
format_wordcount	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      function! s:format_wordcount(_)$/;"	f
s:wordcount_cache	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:wordcount_cache = 0  " cache wordcount for performance when force_update=0$/;"	v
update_wordcount	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:update_wordcount(force_update)$/;"	f
airline#extensions#wordcount#get	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function airline#extensions#wordcount#get()$/;"	f
airline#extensions#wordcount#apply	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#apply(...)$/;"	f
airline#extensions#wordcount#init	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#init(ext)$/;"	f
s:column_display	plugged/vim-airline/autoload/airline/extensions/csv.vim	/^let s:column_display = get(g:, 'airline#extensions#csv#column_display', 'Number')$/;"	v
airline#extensions#csv#get_column	plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#get_column()$/;"	f
airline#extensions#csv#apply	plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#apply(...)$/;"	f
airline#extensions#csv#init	plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#init(ext)$/;"	f
airline#extensions#grepper#status	plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#status()$/;"	f
airline#extensions#grepper#init	plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#init(ext)$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/dirvish.vim	/^let s:spc = g:airline_symbols.space$/;"	v
airline#extensions#dirvish#init	plugged/vim-airline/autoload/airline/extensions/dirvish.vim	/^function! airline#extensions#dirvish#init(ext) abort$/;"	f
airline#extensions#dirvish#apply	plugged/vim-airline/autoload/airline/extensions/dirvish.vim	/^function! airline#extensions#dirvish#apply(...) abort$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^let s:spc = g:airline_symbols.space$/;"	v
g:airline#extensions#windowswap#indicator_text	plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^  let g:airline#extensions#windowswap#indicator_text = 'WS'$/;"	v
airline#extensions#windowswap#init	plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#init(ext)$/;"	f
airline#extensions#windowswap#get_status	plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#get_status()$/;"	f
airline#extensions#bufferline#init	plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^function! airline#extensions#bufferline#init(ext)$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:error_symbol = get(g:, 'airline#extensions#ycm#error_symbol', 'E:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#ycm#warning_symbol', 'W:')$/;"	v
airline#extensions#ycm#init	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#init(ext)$/;"	f
airline#extensions#ycm#get_error_count	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_error_count() abort$/;"	f
airline#extensions#ycm#get_warning_count	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_warning_count()$/;"	f
s:section_use_groups	plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_use_groups     = get(g:, 'airline#extensions#default#section_use_groupitems', 1)$/;"	v
s:section_truncate_width	plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_truncate_width = get(g:, 'airline#extensions#default#section_truncate_width', {$/;"	v
s:layout	plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:layout = get(g:, 'airline#extensions#default#layout', [$/;"	v
get_section	plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:get_section(winnr, key, ...)$/;"	f
build_sections	plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:build_sections(builder, context, keys)$/;"	f
add_section	plugged/vim-airline/autoload/airline/extensions/default.vim	/^  function! s:add_section(builder, context, key)$/;"	f
add_section	plugged/vim-airline/autoload/airline/extensions/default.vim	/^  function! s:add_section(builder, context, key)$/;"	f
airline#extensions#default#apply	plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! airline#extensions#default#apply(builder, context) abort$/;"	f
airline#extensions#netrw#apply	plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#apply(...)$/;"	f
airline#extensions#netrw#init	plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#init(ext)$/;"	f
airline#extensions#netrw#sortstring	plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#sortstring()$/;"	f
s:prototype	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype = {}$/;"	v
prototype.insert_titles	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.insert_titles(current, first, last) dict$/;"	f
prototype.try_insert_title	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.try_insert_title(index, group, pos, sep_size, force) dict$/;"	f
get_separator_change	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change(new_group, old_group, end_group, sep_size, alt_sep_size)$/;"	f
get_separator_change_with_end	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change_with_end(new_group, old_group, new_end_group, old_end_group, sep_size, alt_sep_size)$/;"	f
prototype.build	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.build() dict$/;"	f
s:prototype	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype.overflow_group = 'airline_tab'$/;"	v
evaluate_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:evaluate_tabline(tabline)$/;"	f
tabline_evaluated_length	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:tabline_evaluated_length(tabline)$/;"	f
airline#extensions#tabline#builder#new	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! airline#extensions#tabline#builder#new(context)$/;"	f
s:show_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)$/;"	v
s:buf_min_count	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:buf_min_count = get(g:, 'airline#extensions#tabline#buffer_min_count', 0)$/;"	v
s:tab_min_count	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:tab_min_count = get(g:, 'airline#extensions#tabline#tab_min_count', 0)$/;"	v
airline#extensions#tabline#autoshow#off	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#off()$/;"	f
airline#extensions#tabline#autoshow#on	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#on()$/;"	f
show_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! s:show_tabline(min_count, total_count)$/;"	f
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_bufnr = -1$/;"	v
s:current_modified	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_modified = 0$/;"	v
s:current_tabnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabline = ''$/;"	v
s:highlight_groups	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
airline#extensions#tabline#tabws#off	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#off()$/;"	f
airline#extensions#tabline#tabws#on	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#on()$/;"	f
airline#extensions#tabline#tabws#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#invalidate()$/;"	f
airline#extensions#tabline#tabws#add_buffer_section	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_buffer_section(builder, cur_tab, cur_buf, pull_right)$/;"	f
airline#extensions#tabline#tabws#add_tab_section	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#tabws#get	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#get()$/;"	f
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_bufnr = -1$/;"	v
s:current_modified	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_modified = 0$/;"	v
s:current_tabnr	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabline = ''$/;"	v
s:highlight_groups	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
airline#extensions#tabline#ctrlspace#off	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#off()$/;"	f
airline#extensions#tabline#ctrlspace#on	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#on()$/;"	f
airline#extensions#tabline#ctrlspace#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#invalidate()$/;"	f
airline#extensions#tabline#ctrlspace#add_buffer_section	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_buffer_section(builder, cur_tab, cur_buf, pull_right)$/;"	f
airline#extensions#tabline#ctrlspace#add_tab_section	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#ctrlspace#get	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#get()$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_bufnr = -1$/;"	v
s:current_modified	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_modified = 0$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_tabline = ''$/;"	v
s:current_visible_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_visible_buffers = []$/;"	v
s:number_map	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = {$/;"	v
s:number_map	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = &encoding == 'utf-8'$/;"	v
airline#extensions#tabline#buffers#off	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#off()$/;"	f
airline#extensions#tabline#buffers#on	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#on()$/;"	f
airline#extensions#tabline#buffers#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#invalidate()$/;"	f
airline#extensions#tabline#buffers#get	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#get()$/;"	f
b.get_pretitle	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_pretitle(i) dict$/;"	f
b.get_posttitle	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_posttitle(i) dict$/;"	f
b.get_title	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  function! b.get_title(i) dict$/;"	f
current_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let current_buffer = max([index(b.buffers, cur), 0])$/;"	v
last_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let last_buffer = len(b.buffers) - 1$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:current_bufnr = cur$/;"	v
s:column_width	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:column_width = &columns$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:current_tabline = b.build()$/;"	v
s:current_visible_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:current_visible_buffers = copy(b.buffers)$/;"	v
get_number	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:get_number(index)$/;"	f
select_tab	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:select_tab(buf_index)$/;"	f
jump_to_tab	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:jump_to_tab(offset)$/;"	f
map_keys	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:map_keys()$/;"	f
airline#extensions#tabline#buffers#clickbuf	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#clickbuf(minwid, clicks, button, modifiers) abort$/;"	f
s:skip_symbol	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^let s:skip_symbol = '…'$/;"	v
airline#extensions#tabline#formatters#unique_tail_improved#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^function! airline#extensions#tabline#formatters#unique_tail_improved#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#tabnr#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/tabnr.vim	/^function! airline#extensions#tabline#formatters#tabnr#format(tab_nr_type, nr)$/;"	f
s:fnamecollapse	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^let s:fnamecollapse = get(g:, 'airline#extensions#tabline#fnamecollapse', 1)$/;"	v
airline#extensions#tabline#formatters#short_path#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^function! airline#extensions#tabline#formatters#short_path#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#jsformatter#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/jsformatter.vim	/^function! airline#extensions#tabline#formatters#jsformatter#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#default#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  function! airline#extensions#tabline#formatters#default#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#default#wrap_name	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  function! airline#extensions#tabline#formatters#default#wrap_name(bufnr, buffer_name)$/;"	f
airline#extensions#tabline#formatters#unique_tail#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail.vim	/^function! airline#extensions#tabline#formatters#unique_tail#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#xtabline#init	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#init()$/;"	f
airline#extensions#tabline#xtabline#maps	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#maps()$/;"	f
<Plug>XTablineToggleTabs	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs$/;"	m
<SID>ToggleTabs	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleTabs :call airline#extensions#tabline#xtabline#toggle_tabs()<cr>$/;"	m
<Plug>XTablineToggleFiltering	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering$/;"	m
<SID>ToggleFiltering	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleFiltering :call airline#extensions#tabline#xtabline#toggle_buffers()<cr>$/;"	m
<Plug>XTablineSelectBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer$/;"	m
<SID>SelectBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>SelectBuffer g:xtabline_changing_buffer ? "\\<C-c>" : ":<C-u>call airline#extensions#tabline#xtabline#select_buffer(v:count)\\<cr>"$/;"	m
<Plug>XTablineNextBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer$/;"	m
<SID>NextBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>NextBuffer airline#extensions#tabline#xtabline#next_buffer(v:count1)$/;"	m
<Plug>XTablinePrevBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer$/;"	m
<SID>PrevBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>PrevBuffer airline#extensions#tabline#xtabline#prev_buffer(v:count1)$/;"	m
<Plug>XTablineReopen	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab$/;"	m
<SID>ReopenLastTab	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ReopenLastTab :XTabReopen<cr>$/;"	m
<leader>cdc	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdc <Plug>XTablineCdCurrent$/;"	m
<leader>cdd	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdd <Plug>XTablineCdDown1$/;"	m
<leader>cd2	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd2 <Plug>XTablineCdDown2$/;"	m
<leader>cd3	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd3 <Plug>XTablineCdDown3$/;"	m
<leader>cdh	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdh <Plug>XTablineCdHome$/;"	m
<Plug>XTablineCdCurrent	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown1	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown2	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown3	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdHome	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
airline#extensions#tabline#xtabline#toggle_tabs	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_tabs()$/;"	f
airline#extensions#tabline#xtabline#toggle_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_buffers()$/;"	f
airline#extensions#tabline#xtabline#reopen_last_tab	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#reopen_last_tab()$/;"	f
airline#extensions#tabline#xtabline#filter_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#filter_buffers()$/;"	f
airline#extensions#tabline#xtabline#next_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#next_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#prev_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#prev_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#select_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#select_buffer(nr)$/;"	f
TabBuffers	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:TabBuffers()$/;"	f
NotEnoughBuffers	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:NotEnoughBuffers()$/;"	f
RefreshTabline	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:RefreshTabline()$/;"	f
InitCwds	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:InitCwds()$/;"	f
airline#extensions#tabline#xtabline#update_obsession	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#update_obsession()$/;"	f
Do	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:Do(action)$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_bufnr = -1$/;"	v
s:current_tabnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_tabnr = -1$/;"	v
s:current_modified	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_modified = 0$/;"	v
airline#extensions#tabline#tabs#off	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#off()$/;"	f
airline#extensions#tabline#tabs#on	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#on()$/;"	f
airline#extensions#tabline#tabs#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#invalidate()$/;"	f
airline#extensions#tabline#tabs#get	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#get()$/;"	f
b.get_title	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  function! b.get_title(i) dict$/;"	f
buffers	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^    let buffers = tabpagebuflist(curtab)$/;"	v
group	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^      let group = airline#extensions#tabline#group_of_bufnr(buffers, nr) . "_right"$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:current_bufnr = curbuf$/;"	v
s:current_tabnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:current_tabnr = curtab$/;"	v
s:column_width	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:column_width = &columns$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:current_tabline = b.build()$/;"	v
airline#extensions#tabline#tabs#map_keys	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#map_keys()$/;"	f
airline#extensions#tabline#tabs#tabnr_formatter	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#tabnr_formatter(nr, i) abort$/;"	f
airline#extensions#tabline#buflist#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#invalidate()$/;"	f
airline#extensions#tabline#buflist#clean	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#clean()$/;"	f
ExcludePaths	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludePaths(nr, exclude_paths)$/;"	f
ExcludeOther	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludeOther(nr, exclude_preview)$/;"	f
airline#extensions#tabline#buflist#list	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#list()$/;"	f
airline#extensions#unite#apply	plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#apply(...)$/;"	f
airline#extensions#unite#init	plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#init(ext)$/;"	f
s:show_message	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:show_message = get(g:, 'airline#extensions#whitespace#show_message', 1)$/;"	v
s:symbol	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:symbol = get(g:, 'airline#extensions#whitespace#symbol', g:airline_symbols.whitespace)$/;"	v
s:default_checks	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:default_checks = ['indent', 'trailing', 'mixed-indent-file', 'conflicts']$/;"	v
s:enabled	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:enabled = get(g:, 'airline#extensions#whitespace#enabled', 1)$/;"	v
s:skip_check_ft	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:skip_check_ft = {'make': ['indent', 'mixed-indent-file'],$/;"	v
check_mixed_indent	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent()$/;"	f
check_mixed_indent_file	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent_file()$/;"	f
conflict_marker	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:conflict_marker()$/;"	f
airline#extensions#whitespace#check	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#check()$/;"	f
airline#extensions#whitespace#toggle	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#toggle()$/;"	f
airline#extensions#whitespace#disable	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#disable()$/;"	f
airline#extensions#whitespace#init	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#init(...)$/;"	f
ws_refresh	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:ws_refresh()$/;"	f
airline#extensions#searchcount#init	plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#init(ext) abort$/;"	f
airline#extensions#searchcount#apply	plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#apply(...) abort$/;"	f
search_term	plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! s:search_term()$/;"	f
airline#extensions#searchcount#status	plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#status() abort$/;"	f
airline#extensions#vimcmake#init	plugged/vim-airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#init(ext) abort$/;"	f
airline#extensions#vimcmake#apply	plugged/vim-airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#apply(...) abort$/;"	f
airline#extensions#vimcmake#inactive_apply	plugged/vim-airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#inactive_apply(...) abort$/;"	f
s:commit_mode	plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^let s:commit_mode = {'ST': 'STAGING', 'CC': 'COMMIT', 'CA': 'AMEND'}$/;"	v
airline#extensions#vimagit#init	plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#init(ext) abort$/;"	f
airline#extensions#vimagit#get_mode	plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#get_mode() abort$/;"	f
airline#extensions#vimagit#apply	plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#apply(...) abort$/;"	f
airline#extensions#xkblayout#status	plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#status()$/;"	f
airline#extensions#xkblayout#init	plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#init(ext)$/;"	f
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^let s:error_symbol = get(g:, 'airline#extensions#vim9lsp#error_symbol', 'E:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#vim9lsp#warning_symbol', 'W:')$/;"	v
airline#extensions#vim9lsp#get_warnings	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^function! airline#extensions#vim9lsp#get_warnings() abort$/;"	f
airline#extensions#vim9lsp#get_errors	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^function! airline#extensions#vim9lsp#get_errors() abort$/;"	f
airline#extensions#vim9lsp#init	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^function! airline#extensions#vim9lsp#init(ext) abort$/;"	f
s:spc	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^let s:spc = g:airline_symbols.space$/;"	v
g:airline#extensions#rufo#symbol	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^  let g:airline#extensions#rufo#symbol = 'RuFo'$/;"	v
airline#extensions#rufo#init	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^function! airline#extensions#rufo#init(ext)$/;"	f
airline#extensions#rufo#get_status	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^function! airline#extensions#rufo#get_status()$/;"	f
airline#extensions#rufo#apply	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^function! airline#extensions#rufo#apply(...)$/;"	f
airline#extensions#commandt#apply	plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#apply(...)$/;"	f
airline#extensions#commandt#init	plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#init(ext)$/;"	f
airline#extensions#bookmark#currentbookmark	plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#currentbookmark() abort$/;"	f
airline#extensions#bookmark#init	plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#init(ext) abort$/;"	f
airline#extensions#omnisharp#server_status	plugged/vim-airline/autoload/airline/extensions/omnisharp.vim	/^function! airline#extensions#omnisharp#server_status(...) abort$/;"	f
airline#extensions#omnisharp#init	plugged/vim-airline/autoload/airline/extensions/omnisharp.vim	/^function! airline#extensions#omnisharp#init(ext) abort$/;"	f
ModifierFlags	plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! s:ModifierFlags()$/;"	f
airline#extensions#fugitiveline#bufname	plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#bufname() abort$/;"	f
sh_autocmd_handler	plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! s:sh_autocmd_handler()$/;"	f
airline#extensions#fugitiveline#init	plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#init(ext) abort$/;"	f
g:airline#extensions#quickfix#quickfix_text	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'$/;"	v
g:airline#extensions#quickfix#location_text	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#location_text = 'Location'$/;"	v
airline#extensions#quickfix#apply	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#apply(...)$/;"	f
airline#extensions#quickfix#init	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#init(ext)$/;"	f
airline#extensions#quickfix#inactive_qf_window	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#inactive_qf_window(...)$/;"	f
airline#extensions#quickfix#get_type	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#get_type()$/;"	f
s:vcs_config	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:vcs_config = {$/;"	v
init_buffer	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:init_buffer()$/;"	f
s:head_format	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:head_format = get(g:, 'airline#extensions#branch#format', 0)$/;"	v
format_name	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
format_name	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
format_name	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
format_name	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
s:names	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:names = {'0': 'index', '1': 'orig', '2':'fetch', '3':'merge'}$/;"	v
s:sha1size	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:sha1size = get(g:, 'airline#extensions#branch#sha1_len', 7)$/;"	v
update_git_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_git_branch()$/;"	f
config_fugitive_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:config_fugitive_branch() abort$/;"	f
config_gina_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:config_gina_branch() abort$/;"	f
display_git_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_git_branch()$/;"	f
update_hg_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_hg_branch()$/;"	f
display_hg_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_hg_branch()$/;"	f
update_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_branch()$/;"	f
airline#extensions#branch#update_untracked_config	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#update_untracked_config(file, vcs)$/;"	f
update_untracked	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_untracked()$/;"	f
airline#extensions#branch#head	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#head()$/;"	f
airline#extensions#branch#get_head	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#get_head()$/;"	f
reset_untracked_cache	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:reset_untracked_cache(shellcmdpost)$/;"	f
sh_autocmd_handler	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:sh_autocmd_handler()$/;"	f
airline#extensions#branch#init	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#init(ext)$/;"	f
airline#extensions#eclim#creat_line	plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#creat_line(...)$/;"	f
airline#extensions#eclim#get_warnings	plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#get_warnings()$/;"	f
airline#extensions#eclim#init	plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#init(ext)$/;"	f
airline_ale_count	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_count(cnt, symbol)$/;"	f
legacy_airline_ale_get_line_number	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:legacy_airline_ale_get_line_number(cnt, type) abort$/;"	f
new_airline_ale_get_line_number	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:new_airline_ale_get_line_number(cnt, type) abort$/;"	f
airline_ale_get_line_number	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_get_line_number(cnt, type) abort$/;"	f
airline#extensions#ale#get	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get(type)$/;"	f
airline#extensions#ale#get_warning	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_warning()$/;"	f
airline#extensions#ale#get_error	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_error()$/;"	f
airline#extensions#ale#init	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#init(ext)$/;"	f
ale_refresh	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:ale_refresh()$/;"	f
s:color_template	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^let s:color_template = get(g:, 'airline#extensions#ctrlp#color_template', 'insert')$/;"	v
airline#extensions#ctrlp#generate_color_map	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#generate_color_map(dark, light, white)$/;"	f
airline#extensions#ctrlp#load_theme	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#load_theme(palette)$/;"	f
airline#extensions#ctrlp#ctrlp_airline	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline_status	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline_status(...)$/;"	f
airline#extensions#ctrlp#apply	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#apply(...)$/;"	f
airline#extensions#ctrlp#init	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#init(ext)$/;"	f
s:loaded_ext	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:loaded_ext = []$/;"	v
s:ext	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext = {}$/;"	v
s:ext	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext._theme_funcrefs = []$/;"	v
ext.add_statusline_func	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_func(name) dict$/;"	f
ext.add_statusline_funcref	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_funcref(function) dict$/;"	f
ext.add_inactive_statusline_func	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_inactive_statusline_func(name) dict$/;"	f
ext.add_theme_func	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_theme_func(name) dict$/;"	f
s:script_path	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:script_path = tolower(resolve(expand('<sfile>:p:h')))$/;"	v
s:filetype_overrides	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_overrides = {$/;"	v
s:filetype_overrides	plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = [ get(g:, 'NERDTreeStatusline', 'NERD'), '' ]$/;"	v
s:filetype_overrides	plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = ['NERDTree', '']$/;"	v
s:filetype_regex_overrides	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_regex_overrides = {}$/;"	v
check_defined_section	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:check_defined_section(name)$/;"	f
airline#extensions#append_to_section	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#append_to_section(name, value)$/;"	f
airline#extensions#prepend_to_section	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#prepend_to_section(name, value)$/;"	f
airline#extensions#apply_left_override	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply_left_override(section1, section2)$/;"	f
airline#extensions#apply	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply(...)$/;"	f
is_excluded_window	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:is_excluded_window()$/;"	f
airline#extensions#load_theme	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load_theme()$/;"	f
airline#extensions#load	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load()$/;"	f
airline#extensions#get_loaded_extensions	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#get_loaded_extensions()$/;"	f
airline#formatter#short_path#format	plugged/vim-airline/autoload/airline/formatter/short_path.vim	/^function! airline#formatter#short_path#format(val) abort$/;"	f
s:is_win32term	plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:is_win32term = (has('win32') || has('win64')) &&$/;"	v
s:separators	plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:separators = {}$/;"	v
s:accents	plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:accents = {}$/;"	v
s:hl_groups	plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:hl_groups = {}$/;"	v
gui2cui	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:gui2cui(rgb, fallback) abort$/;"	f
group_not_done	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:group_not_done(list, name) abort$/;"	f
get_syn	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:get_syn(group, what, mode) abort$/;"	f
get_array	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:get_array(guifg, guibg, ctermfg, ctermbg, opts) abort$/;"	f
airline#highlighter#reset_hlcache	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#reset_hlcache() abort$/;"	f
airline#highlighter#get_highlight	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#get_highlight(group, ...) abort$/;"	f
airline#highlighter#get_highlight2	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#get_highlight2(fg, bg, ...) abort$/;"	f
hl_group_exists	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:hl_group_exists(group) abort$/;"	f
CheckDefined	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:CheckDefined(colors) abort$/;"	f
GetHiCmd	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:GetHiCmd(list) abort$/;"	f
airline#highlighter#load_theme	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#load_theme() abort$/;"	f
airline#highlighter#add_accent	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#add_accent(accent) abort$/;"	f
airline#highlighter#add_separator	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#add_separator(from, to, inverse) abort$/;"	f
exec_separator	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:exec_separator(dict, from, to, inverse, suffix) abort$/;"	f
airline#highlighter#highlight_modified_inactive	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#highlight_modified_inactive(bufnr) abort$/;"	f
airline#highlighter#exec	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#exec(group, colors) abort$/;"	f
airline#highlighter#highlight	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#highlight(modes, ...) abort$/;"	f
=	plugged/vim-airline/autoload/airline/highlighter.vim	/^        cmd = substitute(cmd, clr, 'grey', 'g')$/;"	m
s:spc	plugged/vim-airline/autoload/airline/util.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:nomodeline	plugged/vim-airline/autoload/airline/util.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has("patch438"))) ? '<nomodeline>' : ''$/;"	v
s:has_strchars	plugged/vim-airline/autoload/airline/util.vim	/^let s:has_strchars = exists('*strchars')$/;"	v
s:has_strcharpart	plugged/vim-airline/autoload/airline/util.vim	/^let s:has_strcharpart = exists('*strcharpart')$/;"	v
s:focusgained_ignore_time	plugged/vim-airline/autoload/airline/util.vim	/^let s:focusgained_ignore_time = 0$/;"	v
airline#util#winwidth	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#winwidth(...) abort$/;"	f
airline#util#shorten	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#shorten(text, winwidth, minwidth, ...)$/;"	f
airline#util#wrap	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#wrap(text, minwidth)$/;"	f
airline#util#append	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#append(text, minwidth)$/;"	f
airline#util#warning	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#warning(msg)$/;"	f
airline#util#prepend	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#prepend(text, minwidth)$/;"	f
airline#util#getbufvar	plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getbufvar(bufnr, key, def)$/;"	f
airline#util#getbufvar	plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getbufvar(bufnr, key, def)$/;"	f
airline#util#getwinvar	plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getwinvar(winnr, key, def)$/;"	f
airline#util#getwinvar	plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getwinvar(winnr, key, def)$/;"	f
airline#util#exec_funcrefs	plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#exec_funcrefs(list, ...)$/;"	f
airline#util#exec_funcrefs	plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#exec_funcrefs(list, ...)$/;"	f
airline#util#strchars	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#strchars(str)$/;"	f
airline#util#strcharpart	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#strcharpart(...)$/;"	f
airline#util#ignore_buf	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#ignore_buf(name)$/;"	f
airline#util#has_fugitive	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_fugitive()$/;"	f
airline#util#has_gina	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_gina()$/;"	f
airline#util#has_lawrencium	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_lawrencium()$/;"	f
airline#util#has_vcscommand	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_vcscommand()$/;"	f
airline#util#has_custom_scm	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_custom_scm()$/;"	f
airline#util#doautocmd	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#doautocmd(event)$/;"	f
airline#util#themes	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#themes(match)$/;"	f
airline#util#stl_disabled	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#stl_disabled(winnr)$/;"	f
airline#util#ignore_next_focusgain	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#ignore_next_focusgain()$/;"	f
airline#util#try_focusgained	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#try_focusgained()$/;"	f
airline#util#has_vim9_script	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_vim9_script()$/;"	f
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette = {}$/;"	v
s:airline_a_normal	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_normal   = [ '#00005f' , '#dfff00' , 17  , 190 ]$/;"	v
s:airline_b_normal	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_normal   = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_c_normal	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_normal   = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal = airline#themes#generate_color_map(s:airline_a_normal, s:airline_b_normal, s:airline_c_normal)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal_modified = {$/;"	v
s:airline_a_insert	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_insert = [ '#00005f' , '#00dfff' , 17  , 45  ]$/;"	v
s:airline_b_insert	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_insert = [ '#ffffff' , '#005fff' , 255 , 27  ]$/;"	v
s:airline_c_insert	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_insert = [ '#ffffff' , '#000080' , 15  , 17  ]$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert = airline#themes#generate_color_map(s:airline_a_insert, s:airline_b_insert, s:airline_c_insert)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_modified = {$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_paste = {$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.terminal = airline#themes#generate_color_map(s:airline_a_insert, s:airline_b_insert, s:airline_c_insert)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace = copy(g:airline#themes#dark#palette.insert)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace.airline_a = [ s:airline_b_insert[0]   , '#af0000' , s:airline_b_insert[2] , 124     , ''     ]$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace_modified = g:airline#themes#dark#palette.insert_modified$/;"	v
s:airline_a_visual	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_visual = [ '#000000' , '#ffaf00' , 232 , 214 ]$/;"	v
s:airline_b_visual	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_visual = [ '#000000' , '#ff5f00' , 232 , 202 ]$/;"	v
s:airline_c_visual	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_visual = [ '#ffffff' , '#5f0000' , 15  , 52  ]$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual = airline#themes#generate_color_map(s:airline_a_visual, s:airline_b_visual, s:airline_c_visual)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual_modified = {$/;"	v
s:airline_a_inactive	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_inactive = [ '#4e4e4e' , '#1c1c1c' , 239 , 234 , '' ]$/;"	v
s:airline_b_inactive	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_inactive = [ '#4e4e4e' , '#262626' , 239 , 235 , '' ]$/;"	v
s:airline_c_inactive	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_inactive = [ '#4e4e4e' , '#303030' , 239 , 236 , '' ]$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive = airline#themes#generate_color_map(s:airline_a_inactive, s:airline_b_inactive, s:airline_c_inactive)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive_modified = {$/;"	v
s:airline_a_commandline	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_commandline = [ '#00005f' , '#00d700' , 17  , 40 ]$/;"	v
s:airline_b_commandline	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_commandline = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_c_commandline	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_commandline = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.commandline = airline#themes#generate_color_map(s:airline_a_commandline, s:airline_b_commandline, s:airline_c_commandline)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.accents = {$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^  let g:airline#themes#dark#palette.ctrlp = airline#extensions#ctrlp#generate_color_map($/;"	v
s:parts	plugged/vim-airline/autoload/airline/parts.vim	/^let s:parts = {}$/;"	v
airline#parts#define	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define(key, config)$/;"	f
airline#parts#define_function	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_function(key, name)$/;"	f
airline#parts#define_text	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_text(key, text)$/;"	f
airline#parts#define_raw	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_raw(key, raw)$/;"	f
airline#parts#define_minwidth	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_minwidth(key, width)$/;"	f
airline#parts#define_condition	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_condition(key, predicate)$/;"	f
airline#parts#define_accent	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_accent(key, accent)$/;"	f
airline#parts#define_empty	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_empty(keys)$/;"	f
airline#parts#get	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#get(key)$/;"	f
airline#parts#mode	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#mode()$/;"	f
airline#parts#crypt	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#crypt()$/;"	f
airline#parts#paste	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#paste()$/;"	f
airline#parts#spell	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#spell()$/;"	f
airline#parts#iminsert	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#iminsert()$/;"	f
airline#parts#readonly	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#readonly()$/;"	f
airline#parts#filetype	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#filetype()$/;"	f
airline#parts#ffenc	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#ffenc()$/;"	f
s:basic16	plugged/vim-airline/autoload/airline/msdos.vim	/^let s:basic16 = [$/;"	v
airline#msdos#round_msdos_colors	plugged/vim-airline/autoload/airline/msdos.vim	/^	function! airline#msdos#round_msdos_colors(rgblist)$/;"	f
Filter	plugged/ncm2/pythonx/ncm2_filter/none.py	/^def Filter(**kargs):$/;"	f
filt	plugged/ncm2/pythonx/ncm2_filter/none.py	/^    def filt(data, sr, sctx, sccol, matches):$/;"	f	function:Filter
re	plugged/ncm2/pythonx/ncm2_filter/substitute.py	/^import re$/;"	i
Filter	plugged/ncm2/pythonx/ncm2_filter/substitute.py	/^def Filter(**kargs):$/;"	f
filt	plugged/ncm2/pythonx/ncm2_filter/substitute.py	/^    def filt(data, sr, sctx, sccol, matches):$/;"	f	function:Filter
re	plugged/ncm2/pythonx/ncm2_filter/set_dup.py	/^import re$/;"	i
Filter	plugged/ncm2/pythonx/ncm2_filter/set_dup.py	/^def Filter(**kargs):$/;"	f
filt	plugged/ncm2/pythonx/ncm2_filter/set_dup.py	/^    def filt(data, sr, sctx, sccol, matches):$/;"	f	function:Filter
re	plugged/ncm2/pythonx/ncm2_filter/dedup.py	/^import re$/;"	i
Filter	plugged/ncm2/pythonx/ncm2_filter/dedup.py	/^def Filter(**kargs):$/;"	f
filt	plugged/ncm2/pythonx/ncm2_filter/dedup.py	/^    def filt(data, sr, sctx, sccol, matches):$/;"	f	function:Filter
Filter	plugged/ncm2/pythonx/ncm2_filter/abbr_ellipsis.py	/^def Filter(**kargs):$/;"	f
filt	plugged/ncm2/pythonx/ncm2_filter/abbr_ellipsis.py	/^    def filt(data, sr, sctx, sccol, matches):$/;"	f	function:Filter
Filter	plugged/ncm2/pythonx/ncm2_filter/same_word.py	/^def Filter(**kargs):$/;"	f
filt	plugged/ncm2/pythonx/ncm2_filter/same_word.py	/^    def filt(data, sr, sctx, sccol, matches):$/;"	f	function:Filter
sys	plugged/ncm2/pythonx/ncm2.py	/^import sys$/;"	i
os	plugged/ncm2/pythonx/ncm2.py	/^import os$/;"	i
logging	plugged/ncm2/pythonx/ncm2.py	/^import logging$/;"	i
platform	plugged/ncm2/pythonx/ncm2.py	/^import platform$/;"	i
subprocess	plugged/ncm2/pythonx/ncm2.py	/^import subprocess$/;"	i
Popen	plugged/ncm2/pythonx/ncm2.py	/^from subprocess import Popen$/;"	i
path	plugged/ncm2/pythonx/ncm2.py	/^from os import path$/;"	i
unicodedata	plugged/ncm2/pythonx/ncm2.py	/^import unicodedata$/;"	i
deepcopy	plugged/ncm2/pythonx/ncm2.py	/^from copy import deepcopy$/;"	i
json	plugged/ncm2/pythonx/ncm2.py	/^import json$/;"	i
time	plugged/ncm2/pythonx/ncm2.py	/^import time$/;"	i
__all__	plugged/ncm2/pythonx/ncm2.py	/^__all__ = ['Ncm2Base', 'Ncm2Source', 'Popen']$/;"	v
cls	plugged/ncm2/pythonx/ncm2.py	/^    cls = Popen$/;"	v
Popen	plugged/ncm2/pythonx/ncm2.py	/^    class Popen(cls):$/;"	c
__init__	plugged/ncm2/pythonx/ncm2.py	/^        def __init__(self, *args, **keys):$/;"	m	class:Popen
getLogger	plugged/ncm2/pythonx/ncm2.py	/^def getLogger(name):$/;"	f
get_loglevel	plugged/ncm2/pythonx/ncm2.py	/^    def get_loglevel():$/;"	f	function:getLogger
logger	plugged/ncm2/pythonx/ncm2.py	/^logger = getLogger(__name__)$/;"	v
matcher_get	plugged/ncm2/pythonx/ncm2.py	/^def matcher_get(context, opt=None):$/;"	f
matcher_opt_formalize	plugged/ncm2/pythonx/ncm2.py	/^def matcher_opt_formalize(opt):$/;"	f
Ncm2Base	plugged/ncm2/pythonx/ncm2.py	/^class Ncm2Base:$/;"	c
__init__	plugged/ncm2/pythonx/ncm2.py	/^    def __init__(self, nvim):$/;"	m	class:Ncm2Base
matcher_opt_formalize	plugged/ncm2/pythonx/ncm2.py	/^    def matcher_opt_formalize(self, opt):$/;"	m	class:Ncm2Base
matcher_get	plugged/ncm2/pythonx/ncm2.py	/^    def matcher_get(self, context):$/;"	m	class:Ncm2Base
match_formalize	plugged/ncm2/pythonx/ncm2.py	/^    def match_formalize(self, ctx, item):$/;"	m	class:Ncm2Base
matches_formalize	plugged/ncm2/pythonx/ncm2.py	/^    def matches_formalize(self, ctx, matches):$/;"	m	class:Ncm2Base
lccol2pos	plugged/ncm2/pythonx/ncm2.py	/^    def lccol2pos(self, lnum, ccol, src):$/;"	m	class:Ncm2Base
pos2lccol	plugged/ncm2/pythonx/ncm2.py	/^    def pos2lccol(self, pos, src):$/;"	m	class:Ncm2Base
get_src	plugged/ncm2/pythonx/ncm2.py	/^    def get_src(self, src, ctx):$/;"	m	class:Ncm2Base
update_rtp	plugged/ncm2/pythonx/ncm2.py	/^    def update_rtp(self, rtp):$/;"	m	class:Ncm2Base
strdisplaywidth	plugged/ncm2/pythonx/ncm2.py	/^    def strdisplaywidth(self, s):$/;"	m	class:Ncm2Base
get_char_display_width	plugged/ncm2/pythonx/ncm2.py	/^        def get_char_display_width(unicode_str):$/;"	f	function:Ncm2Base.strdisplaywidth
Ncm2Source	plugged/ncm2/pythonx/ncm2.py	/^class Ncm2Source(Ncm2Base):$/;"	c
__init__	plugged/ncm2/pythonx/ncm2.py	/^    def __init__(self, nvim):$/;"	m	class:Ncm2Source
on_complete	plugged/ncm2/pythonx/ncm2.py	/^        def on_complete(context, *args):$/;"	f	function:Ncm2Source.__init__
lazy_check_context	plugged/ncm2/pythonx/ncm2.py	/^    def lazy_check_context(self, context):$/;"	m	class:Ncm2Source
complete	plugged/ncm2/pythonx/ncm2.py	/^    def complete(self, ctx, startccol, matches, refresh=False):$/;"	m	class:Ncm2Source
re	plugged/ncm2/pythonx/ncm2_core.py	/^import re$/;"	i
vim	plugged/ncm2/pythonx/ncm2_core.py	/^import vim$/;"	i
Ncm2Base	plugged/ncm2/pythonx/ncm2_core.py	/^from ncm2 import Ncm2Base, getLogger$/;"	i
getLogger	plugged/ncm2/pythonx/ncm2_core.py	/^from ncm2 import Ncm2Base, getLogger$/;"	i
json	plugged/ncm2/pythonx/ncm2_core.py	/^import json$/;"	i
glob	plugged/ncm2/pythonx/ncm2_core.py	/^import glob$/;"	i
path	plugged/ncm2/pythonx/ncm2_core.py	/^from os import path, environ$/;"	i
environ	plugged/ncm2/pythonx/ncm2_core.py	/^from os import path, environ$/;"	i
deepcopy	plugged/ncm2/pythonx/ncm2_core.py	/^from copy import deepcopy, copy$/;"	i
copy	plugged/ncm2/pythonx/ncm2_core.py	/^from copy import deepcopy, copy$/;"	i
time	plugged/ncm2/pythonx/ncm2_core.py	/^import time$/;"	i
partial	plugged/ncm2/pythonx/ncm2_core.py	/^from functools import partial$/;"	i
logger	plugged/ncm2/pythonx/ncm2_core.py	/^logger = getLogger(__name__)$/;"	v
Ncm2Core	plugged/ncm2/pythonx/ncm2_core.py	/^class Ncm2Core(Ncm2Base):$/;"	c
__init__	plugged/ncm2/pythonx/ncm2_core.py	/^    def __init__(self, nvim):$/;"	m	class:Ncm2Core
notify	plugged/ncm2/pythonx/ncm2_core.py	/^    def notify(self, method: str, *args):$/;"	m	class:Ncm2Core
get_word_pattern	plugged/ncm2/pythonx/ncm2_core.py	/^    def get_word_pattern(self, ctx, sr):$/;"	m	class:Ncm2Core
get_filtered_sources	plugged/ncm2/pythonx/ncm2_core.py	/^    def get_filtered_sources(self, data, names=None):$/;"	m	class:Ncm2Core
load_plugin	plugged/ncm2/pythonx/ncm2_core.py	/^    def load_plugin(self, _, rtp: str):$/;"	m	class:Ncm2Core
load_python	plugged/ncm2/pythonx/ncm2_core.py	/^    def load_python(self, _, py):$/;"	m	class:Ncm2Core
load_subscope_detectors	plugged/ncm2/pythonx/ncm2_core.py	/^    def load_subscope_detectors(self, paths):$/;"	m	class:Ncm2Core
get_context	plugged/ncm2/pythonx/ncm2_core.py	/^    def get_context(self, data, name):$/;"	m	class:Ncm2Core
on_notify_dated	plugged/ncm2/pythonx/ncm2_core.py	/^    def on_notify_dated(self, data, _, failed_notifies=[]):$/;"	m	class:Ncm2Core
do_on_complete	plugged/ncm2/pythonx/ncm2_core.py	/^    def do_on_complete(self, data, manual=0, names=None):$/;"	m	class:Ncm2Core
on_complete	plugged/ncm2/pythonx/ncm2_core.py	/^    def on_complete(self, data, manual, names=None):$/;"	m	class:Ncm2Core
on_warmup	plugged/ncm2/pythonx/ncm2_core.py	/^    def on_warmup(self, data, names):$/;"	m	class:Ncm2Core
check_source_notify	plugged/ncm2/pythonx/ncm2_core.py	/^    def check_source_notify(self, data, sr, ctx, contexts):$/;"	m	class:Ncm2Core
complete	plugged/ncm2/pythonx/ncm2_core.py	/^    def complete(self, data, sctx, startccol, matches, refresh):$/;"	m	class:Ncm2Core
is_kw_typing	plugged/ncm2/pythonx/ncm2_core.py	/^    def is_kw_typing(self, data, sr, ctx1, ctx2):$/;"	m	class:Ncm2Core
cache_cleanup	plugged/ncm2/pythonx/ncm2_core.py	/^    def cache_cleanup(self, *args):$/;"	m	class:Ncm2Core
cache_cleanup_check	plugged/ncm2/pythonx/ncm2_core.py	/^    def cache_cleanup_check(self, ctx):$/;"	m	class:Ncm2Core
detect_subscopes	plugged/ncm2/pythonx/ncm2_core.py	/^    def detect_subscopes(self, data):$/;"	m	class:Ncm2Core
check_word_pattern	plugged/ncm2/pythonx/ncm2_core.py	/^    def check_word_pattern(self, data, sr, ctx):$/;"	m	class:Ncm2Core
check_patterns	plugged/ncm2/pythonx/ncm2_core.py	/^    def check_patterns(self, data, sr, ctx):$/;"	m	class:Ncm2Core
source_get_complete_len	plugged/ncm2/pythonx/ncm2_core.py	/^    def source_get_complete_len(self, data, sr, manual):$/;"	m	class:Ncm2Core
source_check_scope	plugged/ncm2/pythonx/ncm2_core.py	/^    def source_check_scope(self, sr, ctx, contexts):$/;"	m	class:Ncm2Core
matches_update_popup	plugged/ncm2/pythonx/ncm2_core.py	/^    def matches_update_popup(self, data):$/;"	m	class:Ncm2Core
get_sources_for_popup	plugged/ncm2/pythonx/ncm2_core.py	/^    def get_sources_for_popup(self, data, names):$/;"	m	class:Ncm2Core
matcher_opt_get	plugged/ncm2/pythonx/ncm2_core.py	/^    def matcher_opt_get(self, data, sr):$/;"	m	class:Ncm2Core
sorter_opt_formalize	plugged/ncm2/pythonx/ncm2_core.py	/^    def sorter_opt_formalize(self, opt):$/;"	m	class:Ncm2Core
sorter_opt_get	plugged/ncm2/pythonx/ncm2_core.py	/^    def sorter_opt_get(self, data, sr):$/;"	m	class:Ncm2Core
sorter_get	plugged/ncm2/pythonx/ncm2_core.py	/^    def sorter_get(self, opt):$/;"	m	class:Ncm2Core
filter_opt_formalize	plugged/ncm2/pythonx/ncm2_core.py	/^    def filter_opt_formalize(self, opts):$/;"	m	class:Ncm2Core
filter_opt_get	plugged/ncm2/pythonx/ncm2_core.py	/^    def filter_opt_get(self, data, sr):$/;"	m	class:Ncm2Core
filter_get	plugged/ncm2/pythonx/ncm2_core.py	/^    def filter_get(self, opts):$/;"	m	class:Ncm2Core
handler	plugged/ncm2/pythonx/ncm2_core.py	/^        def handler(data, sr, sctx, sccol, matches):$/;"	f	function:Ncm2Core.filter_get
matches_filter_by_matcher	plugged/ncm2/pythonx/ncm2_core.py	/^    def matches_filter_by_matcher(self, data, sr, sctx, sccol, matches):$/;"	m	class:Ncm2Core
matches_filter	plugged/ncm2/pythonx/ncm2_core.py	/^    def matches_filter(self, data, sr, sctx, sccol, matches):$/;"	m	class:Ncm2Core
matches_decorate	plugged/ncm2/pythonx/ncm2_core.py	/^    def matches_decorate(self, data, matches):$/;"	m	class:Ncm2Core
matches_add_source_mark	plugged/ncm2/pythonx/ncm2_core.py	/^    def matches_add_source_mark(self, data, matches):$/;"	m	class:Ncm2Core
matches_do_popup	plugged/ncm2/pythonx/ncm2_core.py	/^    def matches_do_popup(self, ctx, startccol, matches):$/;"	m	class:Ncm2Core
ncm2_core	plugged/ncm2/pythonx/ncm2_core.py	/^ncm2_core = Ncm2Core(vim)$/;"	v
events	plugged/ncm2/pythonx/ncm2_core.py	/^events = ['on_complete', 'cache_cleanup',$/;"	v
on_complete	plugged/ncm2/pythonx/ncm2_core.py	/^on_complete = ncm2_core.on_complete$/;"	v
matches_update_popup	plugged/ncm2/pythonx/ncm2_core.py	/^matches_update_popup = ncm2_core.matches_update_popup$/;"	v
cache_cleanup	plugged/ncm2/pythonx/ncm2_core.py	/^cache_cleanup = ncm2_core.cache_cleanup$/;"	v
complete	plugged/ncm2/pythonx/ncm2_core.py	/^complete = ncm2_core.complete$/;"	v
load_plugin	plugged/ncm2/pythonx/ncm2_core.py	/^load_plugin = ncm2_core.load_plugin$/;"	v
load_python	plugged/ncm2/pythonx/ncm2_core.py	/^load_python = ncm2_core.load_python$/;"	v
on_warmup	plugged/ncm2/pythonx/ncm2_core.py	/^on_warmup = ncm2_core.on_warmup$/;"	v
on_notify_dated	plugged/ncm2/pythonx/ncm2_core.py	/^on_notify_dated = ncm2_core.on_notify_dated$/;"	v
get_context	plugged/ncm2/pythonx/ncm2_core.py	/^get_context = ncm2_core.get_context$/;"	v
__all__	plugged/ncm2/pythonx/ncm2_core.py	/^__all__ = events$/;"	v
Matcher	plugged/ncm2/pythonx/ncm2_matcher/prefix.py	/^def Matcher(case='smartcase', key='abbr', **kargs):$/;"	f
match_case	plugged/ncm2/pythonx/ncm2_matcher/prefix.py	/^    def match_case(b, m):$/;"	f	function:Matcher
match_icase	plugged/ncm2/pythonx/ncm2_matcher/prefix.py	/^    def match_icase(b, m):$/;"	f	function:Matcher
match_smart_case	plugged/ncm2/pythonx/ncm2_matcher/prefix.py	/^    def match_smart_case(b, m):$/;"	f	function:Matcher
Matcher	plugged/ncm2/pythonx/ncm2_matcher/none.py	/^def Matcher(**kargs):$/;"	f
match	plugged/ncm2/pythonx/ncm2_matcher/none.py	/^    def match(b, m):$/;"	f	function:Matcher
matcher_get	plugged/ncm2/pythonx/ncm2_matcher/combine.py	/^from ncm2 import matcher_get, matcher_opt_formalize$/;"	i
matcher_opt_formalize	plugged/ncm2/pythonx/ncm2_matcher/combine.py	/^from ncm2 import matcher_get, matcher_opt_formalize$/;"	i
Matcher	plugged/ncm2/pythonx/ncm2_matcher/combine.py	/^def Matcher(**kargs):$/;"	f
match	plugged/ncm2/pythonx/ncm2_matcher/combine.py	/^    def match(b, m):$/;"	f	function:Matcher
Matcher	plugged/ncm2/pythonx/ncm2_matcher/equal.py	/^def Matcher(context, case='smartcase', key='abbr', **kargs):$/;"	f
match_smart_case	plugged/ncm2/pythonx/ncm2_matcher/equal.py	/^    def match_smart_case(b, e):$/;"	f	function:Matcher
match_case	plugged/ncm2/pythonx/ncm2_matcher/equal.py	/^    def match_case(b, e):$/;"	f	function:Matcher
match_icase	plugged/ncm2/pythonx/ncm2_matcher/equal.py	/^    def match_icase(b, e):$/;"	f	function:Matcher
re	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^import re$/;"	i
chcmp_icase	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^chcmp_icase = lambda a,b: a.lower() == b.lower()$/;"	v
get_abbrev	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^def get_abbrev(s):$/;"	f
fuzzy_match	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^def fuzzy_match(b, s, chcmp):$/;"	f
abbr_fuzzy_match	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^def abbr_fuzzy_match(abbr, b, s, off, chcmp):$/;"	f
max_common_prefix	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^def max_common_prefix(b, s, chcmp):$/;"	f
Matcher	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^def Matcher(case='smartcase', key='abbr', **kargs):$/;"	f
match	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^    def match(b, m):$/;"	f	function:Matcher
test_abbrev	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^def test_abbrev(s):$/;"	f
test	plugged/ncm2/pythonx/ncm2_matcher/abbrfuzzy.py	/^def test():$/;"	f
Matcher	plugged/ncm2/pythonx/ncm2_matcher/base_min_len.py	/^def Matcher(context, value, key='abbr', **kargs):$/;"	f
match	plugged/ncm2/pythonx/ncm2_matcher/base_min_len.py	/^    def match(b, e):$/;"	f	function:Matcher
Matcher	plugged/ncm2/pythonx/ncm2_matcher/substr.py	/^def Matcher(case='smartcase', key='abbr', **kargs):$/;"	f
match_smart_case	plugged/ncm2/pythonx/ncm2_matcher/substr.py	/^    def match_smart_case(b, e):$/;"	f	function:Matcher
match_case	plugged/ncm2/pythonx/ncm2_matcher/substr.py	/^    def match_case(b, e):$/;"	f	function:Matcher
match_icase	plugged/ncm2/pythonx/ncm2_matcher/substr.py	/^    def match_icase(b, e):$/;"	f	function:Matcher
matcher_get	plugged/ncm2/pythonx/ncm2_matcher/must.py	/^from ncm2 import matcher_get, matcher_opt_formalize$/;"	i
matcher_opt_formalize	plugged/ncm2/pythonx/ncm2_matcher/must.py	/^from ncm2 import matcher_get, matcher_opt_formalize$/;"	i
Matcher	plugged/ncm2/pythonx/ncm2_matcher/must.py	/^def Matcher(**kargs):$/;"	f
match	plugged/ncm2/pythonx/ncm2_matcher/must.py	/^    def match(b, m):$/;"	f	function:Matcher
re	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^import re$/;"	i
reduce	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^from functools import reduce$/;"	i
chcmp_smartcase	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def chcmp_smartcase(a, b): return a == b if a.isupper() else a == b.lower()$/;"	f
chcmp_case	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def chcmp_case(a, b): return a == b$/;"	f
chcmp_icase	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def chcmp_icase(a, b): return a.lower() == b.lower()$/;"	f
fuzzy_match	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def fuzzy_match(b, s, chcmp):$/;"	f
get_abbrev	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def get_abbrev(s):$/;"	f
abbrs_ge	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def abbrs_ge(abbrs, ge):$/;"	f
substr_fuzzy_match	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def substr_fuzzy_match(b, s, abbrs, chcmp):$/;"	f
max_substr_match	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def max_substr_match(b, s, sec, chcmp):$/;"	f
Matcher	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def Matcher(case='smartcase', key='abbr', **kargs):$/;"	f
match	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^    def match(b, m):$/;"	f	function:Matcher
test_fuzzy_match	plugged/ncm2/pythonx/ncm2_matcher/substrfuzzy.py	/^def test_fuzzy_match(b, s, chcmp):$/;"	f
Sorter	plugged/ncm2/pythonx/ncm2_sorter/none.py	/^def Sorter(**kargs):$/;"	f
sort	plugged/ncm2/pythonx/ncm2_sorter/none.py	/^    def sort(matches: list):$/;"	f	function:Sorter
sys	plugged/ncm2/pythonx/ncm2_sorter/abbrfuzzy.py	/^import sys$/;"	i
Sorter	plugged/ncm2/pythonx/ncm2_sorter/abbrfuzzy.py	/^def Sorter(**kargs):$/;"	f
key	plugged/ncm2/pythonx/ncm2_sorter/abbrfuzzy.py	/^    def key(e):$/;"	f	function:Sorter
sort	plugged/ncm2/pythonx/ncm2_sorter/abbrfuzzy.py	/^    def sort(matches: list):$/;"	f	function:Sorter
Sorter	plugged/ncm2/pythonx/ncm2_sorter/alphanum.py	/^def Sorter(**kargs):$/;"	f
sort	plugged/ncm2/pythonx/ncm2_sorter/alphanum.py	/^    def sort(matches: list):$/;"	f	function:Sorter
on_completion_result	plugged/ncm2/lua/ncm2/init.lua	/^local function on_completion_result(context, err, _, result)$/;"	f
on_complete_lsp	plugged/ncm2/lua/ncm2/init.lua	/^local function on_complete_lsp(context)$/;"	f
escape	plugged/ncm2/lua/ncm2/init.lua	/^local function escape(chars)$/;"	f
register_lsp_source	plugged/ncm2/lua/ncm2/init.lua	/^local function register_lsp_source(client, result)$/;"	f
ncm2#on_complete#context_ensure	plugged/ncm2/autoload/ncm2/on_complete.vim	/^func! ncm2#on_complete#context_ensure(fn, ...) dict$/;"	f
ncm2#on_complete#delay	plugged/ncm2/autoload/ncm2/on_complete.vim	/^func! ncm2#on_complete#delay(delay, ...) dict$/;"	f
delay_handler	plugged/ncm2/autoload/ncm2/on_complete.vim	/^func! s:delay_handler(sr, args)$/;"	f
ncm2#on_complete#omni	plugged/ncm2/autoload/ncm2/on_complete.vim	/^func! ncm2#on_complete#omni(funcname, ctx)$/;"	f
call_omnifunc	plugged/ncm2/autoload/ncm2/on_complete.vim	/^func! s:call_omnifunc(omnifunc, ...) abort$/;"	f
ncm2#on_complete#lsp	plugged/ncm2/autoload/ncm2/on_complete.vim	/^func! ncm2#on_complete#lsp(context)$/;"	f
g:ncm2_loaded	plugged/ncm2/autoload/ncm2.vim	/^let g:ncm2_loaded = 1$/;"	v
opt	plugged/ncm2/autoload/ncm2.vim	/^func! s:opt(name, default)$/;"	f
<Plug>(ncm2_auto_trigger)	plugged/ncm2/autoload/ncm2.vim	/^inoremap <silent> <Plug>(ncm2_auto_trigger)      <c-r>=ncm2#auto_trigger()<cr>$/;"	m
<Plug>(ncm2_skip_auto_trigger)	plugged/ncm2/autoload/ncm2.vim	/^inoremap <silent> <Plug>(ncm2_skip_auto_trigger) <c-r>=ncm2#skip_auto_trigger()<cr>$/;"	m
<Plug>(ncm2_manual_trigger)	plugged/ncm2/autoload/ncm2.vim	/^inoremap <silent> <Plug>(ncm2_manual_trigger)    <c-r>=ncm2#manual_trigger()<cr>$/;"	m
<Plug>(ncm2_c_e)	plugged/ncm2/autoload/ncm2.vim	/^inoremap <silent> <expr> <Plug>(ncm2_c_e) (pumvisible() ? "\\<c-e>" : '')$/;"	m
s:core	plugged/ncm2/autoload/ncm2.vim	/^let s:core = yarp#py3('ncm2_core')$/;"	v
s:core	plugged/ncm2/autoload/ncm2.vim	/^let s:core.on_load = 'ncm2#_core_started'$/;"	v
s:sources	plugged/ncm2/autoload/ncm2.vim	/^let s:sources = {}$/;"	v
s:sources_override	plugged/ncm2/autoload/ncm2.vim	/^let s:sources_override = {}$/;"	v
s:complete_timer	plugged/ncm2/autoload/ncm2.vim	/^let s:complete_timer = 0$/;"	v
s:popup_timer	plugged/ncm2/autoload/ncm2.vim	/^let s:popup_timer = 0$/;"	v
s:popup_timer_args	plugged/ncm2/autoload/ncm2.vim	/^let s:popup_timer_args = []$/;"	v
s:popup_timer_tick	plugged/ncm2/autoload/ncm2.vim	/^let s:popup_timer_tick = []$/;"	v
s:lock	plugged/ncm2/autoload/ncm2.vim	/^let s:lock = {}$/;"	v
s:startbcol	plugged/ncm2/autoload/ncm2.vim	/^let s:startbcol = 1$/;"	v
s:lnum	plugged/ncm2/autoload/ncm2.vim	/^let s:lnum = 0$/;"	v
s:matches	plugged/ncm2/autoload/ncm2.vim	/^let s:matches = []$/;"	v
s:subscope_detectors	plugged/ncm2/autoload/ncm2.vim	/^let s:subscope_detectors = {}$/;"	v
s:auto_trigger_tick	plugged/ncm2/autoload/ncm2.vim	/^let s:auto_trigger_tick = []$/;"	v
s:skip_context_id	plugged/ncm2/autoload/ncm2.vim	/^let s:skip_context_id = 0$/;"	v
s:context_id	plugged/ncm2/autoload/ncm2.vim	/^let s:context_id = 0$/;"	v
s:completion_notified	plugged/ncm2/autoload/ncm2.vim	/^let s:completion_notified = {}$/;"	v
s:coredata_hooks	plugged/ncm2/autoload/ncm2.vim	/^let s:coredata_hooks = {}$/;"	v
s:popup_open	plugged/ncm2/autoload/ncm2.vim	/^let s:popup_open = 0$/;"	v
s:popup_closed_by_user	plugged/ncm2/autoload/ncm2.vim	/^let s:popup_closed_by_user = 0$/;"	v
s:popup_close_tick	plugged/ncm2/autoload/ncm2.vim	/^let s:popup_close_tick = []$/;"	v
s:popup_close_check_state	plugged/ncm2/autoload/ncm2.vim	/^let s:popup_close_check_state = 0$/;"	v
ncm2_hooks	plugged/ncm2/autoload/ncm2.vim	/^augroup ncm2_hooks$/;"	a
ncm2#enable_for_buffer	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#enable_for_buffer()$/;"	f
ncm2#disable_for_buffer	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#disable_for_buffer()$/;"	f
on_complete_done	plugged/ncm2/autoload/ncm2.vim	/^func! s:on_complete_done()$/;"	f
ncm2#_do_extra_text_edits	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_do_extra_text_edits(ctx, item)$/;"	f
on_insert_enter	plugged/ncm2/autoload/ncm2.vim	/^func! s:on_insert_enter()$/;"	f
cache_matches_cleanup	plugged/ncm2/autoload/ncm2.vim	/^func! s:cache_matches_cleanup()$/;"	f
ncm2#context_tick	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#context_tick()$/;"	f
context	plugged/ncm2/autoload/ncm2.vim	/^func! s:context()$/;"	f
ncm2#register_source	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#register_source(sr)$/;"	f
ncm2#override_source	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#override_source(name, v)$/;"	f
override_source	plugged/ncm2/autoload/ncm2.vim	/^func! s:override_source(sr)$/;"	f
ncm2#unregister_source	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#unregister_source(sr)$/;"	f
ncm2#_on_enable	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_on_enable(sr, ...)$/;"	f
ncm2#_on_ready	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_on_ready(sr, ...)$/;"	f
ncm2#set_ready	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#set_ready(sr)$/;"	f
ncm2#context	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#context(name)$/;"	f
ncm2#complete	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#complete(ctx, startccol, matches, ...)$/;"	f
ncm2#complete_resolve	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#complete_resolve(ctx, item)$/;"	f
ncm2#complete_context_dated	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#complete_context_dated(ctx)$/;"	f
ncm2#context_dated	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#context_dated(ctx)$/;"	f
ncm2#menu_selected	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#menu_selected()$/;"	f
ncm2#completed_item	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#completed_item()$/;"	f
ncm2#lock	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#lock(name)$/;"	f
ncm2#unlock	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#unlock(name)$/;"	f
ncm2#_update_matches	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_update_matches(ctx, startbcol, matches)$/;"	f
popup_timed	plugged/ncm2/autoload/ncm2.vim	/^func! s:popup_timed(_)$/;"	f
ncm2#_check_popup_close	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_check_popup_close()$/;"	f
ncm2#_real_update_matches	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_real_update_matches(ctx, startbcol, matches)$/;"	f
ncm2#_real_popup	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_real_popup(...)$/;"	f
ncm2#skip_auto_trigger	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#skip_auto_trigger()$/;"	f
ncm2#auto_trigger	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#auto_trigger()$/;"	f
ncm2#_complete_timer_handler	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_complete_timer_handler(...)$/;"	f
ncm2#do_auto_trigger	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#do_auto_trigger()$/;"	f
ncm2#manual_trigger	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#manual_trigger(...)$/;"	f
ncm2#force_trigger	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#force_trigger(...)$/;"	f
ncm2#_notify_complete	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_notify_complete(ctx, calls)$/;"	f
ncm2#_notify_completed	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_notify_completed(ctx, name, sctx, completed)$/;"	f
ncm2#_warmup_sources	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_warmup_sources(ctx, calls)$/;"	f
ncm2#_s	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_s(name, ...)$/;"	f
coredata	plugged/ncm2/autoload/ncm2.vim	/^func! s:coredata(event)$/;"	f
ncm2#_hook_for_subscope_detectors	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_hook_for_subscope_detectors()$/;"	f
b_coredata_hooks	plugged/ncm2/autoload/ncm2.vim	/^func! s:b_coredata_hooks()$/;"	f
ncm2#hook_coredata	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#hook_coredata(is_global, events, groupid, Hook)$/;"	f
do_coredata_hook	plugged/ncm2/autoload/ncm2.vim	/^func! s:do_coredata_hook(event, data)$/;"	f
try_rnotify	plugged/ncm2/autoload/ncm2.vim	/^func! s:try_rnotify(event, ...)$/;"	f
request	plugged/ncm2/autoload/ncm2.vim	/^func! s:request(event, ...)$/;"	f
on_warmup	plugged/ncm2/autoload/ncm2.vim	/^func! s:on_warmup(...)$/;"	f
ncm2#_core_started	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_core_started()$/;"	f
ncm2#_load_vimscript	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_load_vimscript(s)$/;"	f
ncm2#_au_plugin	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#_au_plugin()$/;"	f
ncm2#insert_mode_only_key	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#insert_mode_only_key(key)$/;"	f
should_skip	plugged/ncm2/autoload/ncm2.vim	/^func! s:should_skip()$/;"	f
ncm2#on_waiting_input	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#on_waiting_input(fn, ...)$/;"	f
do_on_waiting_input	plugged/ncm2/autoload/ncm2.vim	/^func! s:do_on_waiting_input(fn, args, timer)$/;"	f
ncm2#imode_task	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#imode_task(fn, ...)$/;"	f
do_imode_task	plugged/ncm2/autoload/ncm2.vim	/^func! s:do_imode_task(fn, args, timer)$/;"	f
ncm2#whitelist_for_buffer	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#whitelist_for_buffer(...)$/;"	f
ncm2#blacklist_for_buffer	plugged/ncm2/autoload/ncm2.vim	/^func! ncm2#blacklist_for_buffer(...)$/;"	f
RunTest	plugged/vim-gitgutter/test/runner.vim	/^function RunTest(test)$/;"	f
Log	plugged/vim-gitgutter/test/runner.vim	/^function Log(msg)$/;"	f
Exception	plugged/vim-gitgutter/test/runner.vim	/^function Exception()$/;"	f
Shuffle	plugged/vim-gitgutter/test/runner.vim	/^function Shuffle(list)$/;"	f
Random	plugged/vim-gitgutter/test/runner.vim	/^function Random(min, max)$/;"	f
FriendlyName	plugged/vim-gitgutter/test/runner.vim	/^function FriendlyName(test_name)$/;"	f
Align	plugged/vim-gitgutter/test/runner.vim	/^function Align(left, right)$/;"	f
g:testname	plugged/vim-gitgutter/test/runner.vim	/^let g:testname = expand('%')$/;"	v
s:errored	plugged/vim-gitgutter/test/runner.vim	/^let s:errored = 0$/;"	v
s:done	plugged/vim-gitgutter/test/runner.vim	/^let s:done = 0$/;"	v
s:fail	plugged/vim-gitgutter/test/runner.vim	/^let s:fail = 0$/;"	v
s:errors	plugged/vim-gitgutter/test/runner.vim	/^let s:errors = 0$/;"	v
s:messages	plugged/vim-gitgutter/test/runner.vim	/^let s:messages = []$/;"	v
s:indent	plugged/vim-gitgutter/test/runner.vim	/^let s:indent = ''$/;"	v
s:errors	plugged/vim-gitgutter/test/runner.vim	/^  let s:errors += 1$/;"	v
s:tests	plugged/vim-gitgutter/test/runner.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:tests	plugged/vim-gitgutter/test/runner.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:indent	plugged/vim-gitgutter/test/runner.vim	/^let s:indent = max(map(copy(s:tests), {_, val -> len(FriendlyName(val))}))$/;"	v
s:done	plugged/vim-gitgutter/test/runner.vim	/^  let s:done += 1$/;"	v
friendly_name	plugged/vim-gitgutter/test/runner.vim	/^  let friendly_name = FriendlyName(test)$/;"	v
s:errors	plugged/vim-gitgutter/test/runner.vim	/^      let s:errors += 1$/;"	v
s:errored	plugged/vim-gitgutter/test/runner.vim	/^      let s:errored = 0$/;"	v
s:fail	plugged/vim-gitgutter/test/runner.vim	/^      let s:fail += 1$/;"	v
i	plugged/vim-gitgutter/test/runner.vim	/^    let i = 0$/;"	v
i	plugged/vim-gitgutter/test/runner.vim	/^      let i += 1$/;"	v
summary	plugged/vim-gitgutter/test/runner.vim	/^let summary = [$/;"	v
s:current_dir	plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:current_dir = expand('%:p:h')$/;"	v
s:test_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:test_repo   = s:current_dir.'\/test-repo'$/;"	v
s:bufnr	plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:bufnr       = bufnr('')$/;"	v
assert_list_of_dicts	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_list_of_dicts(expected, actual)$/;"	f
assert_signs	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_signs(expected, filename)$/;"	f
git_diff	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff(...)$/;"	f
git_diff_staged	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff_staged(...)$/;"	f
trigger_gitgutter	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:trigger_gitgutter()$/;"	f
SetUp	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function SetUp()$/;"	f
TearDown	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function TearDown()$/;"	f
Test_add_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines()$/;"	f
Test_add_lines_fish	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines_fish()$/;"	f
Test_modify_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_modify_lines()$/;"	f
Test_remove_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_lines()$/;"	f
Test_remove_first_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_first_lines()$/;"	f
Test_priority	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_priority()$/;"	f
Test_overlapping_hunks	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunks()$/;"	f
Test_edit_file_with_same_name_as_a_branch	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_edit_file_with_same_name_as_a_branch()$/;"	f
Test_file_added_to_git	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_added_to_git()$/;"	f
Test_filename_with_equals	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_equals()$/;"	f
Test_filename_with_square_brackets	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_square_brackets()$/;"	f
Test_filename_leading_dash	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_leading_dash()$/;"	f
Test_filename_umlaut	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_umlaut()$/;"	f
Test_follow_symlink	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_follow_symlink()$/;"	f
Test_keep_alt	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_alt()$/;"	f
Test_keep_modified	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_modified()$/;"	f
Test_keep_op_marks	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_op_marks()$/;"	f
Test_no_modifications	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_no_modifications()$/;"	f
Test_orphaned_signs	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_orphaned_signs()$/;"	f
Test_untracked_file_outside_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_outside_repo()$/;"	f
Test_untracked_file_within_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_within_repo()$/;"	f
Test_untracked_file_square_brackets_within_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_square_brackets_within_repo()$/;"	f
Test_hunk_outside_noop	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_outside_noop()$/;"	f
Test_preview	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview()$/;"	f
Test_preview_dos	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview_dos()$/;"	f
Test_hunk_stage	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage()$/;"	f
Test_hunk_stage_nearby_hunk	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_nearby_hunk()$/;"	f
Test_hunk_stage_partial_visual_added	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_visual_added()$/;"	f
Test_hunk_stage_partial_cmd_added	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_cmd_added()$/;"	f
Test_hunk_stage_partial_preview_added	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added()$/;"	f
Test_hunk_stage_preview_write	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_preview_write()$/;"	f
Test_hunk_stage_partial_preview_added_removed	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added_removed()$/;"	f
Test_hunk_undo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo()$/;"	f
Test_hunk_undo_dos	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo_dos()$/;"	f
Test_undo_nearby_hunk	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_undo_nearby_hunk()$/;"	f
Test_overlapping_hunk_op	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunk_op()$/;"	f
gg	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  normal gg$/;"	m
expected	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 2, 'name': 'GitGutterLineRemoved'}]$/;"	v
gg	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  normal gg$/;"	m
expected	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 1, 'name': 'GitGutterLineRemovedFirstLine'}]$/;"	v
Test_write_option	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_write_option()$/;"	f
Test_inner_text_object	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_inner_text_object()$/;"	f
Test_around_text_object	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_around_text_object()$/;"	f
Test_user_autocmd	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_user_autocmd()$/;"	f
Test_fix_file_references	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_fix_file_references()$/;"	f
Test_encoding	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_encoding()$/;"	f
Test_empty_file	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_empty_file()$/;"	f
Test_quickfix	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_quickfix()$/;"	f
Test_common_prefix	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_prefix()$/;"	f
Test_common_suffix	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_suffix()$/;"	f
Test_diff_highlight	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_diff_highlight()$/;"	f
Test_lcs	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_lcs()$/;"	f
Test_split	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_split()$/;"	f
Test_foldtext	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_foldtext()$/;"	f
g:loaded_gitgutter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:loaded_gitgutter = 1$/;"	v
s:nomodeline	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
obsolete	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:obsolete(var)$/;"	f
g:gitgutter_preview_win_location	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_preview_win_location = get(g:, 'gitgutter_preview_win_location', 'bo')$/;"	v
g:gitgutter_preview_win_floating	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', 1)$/;"	v
default	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let default = exists('&previewpopup') ? !empty(&previewpopup) : 0$/;"	v
g:gitgutter_preview_win_floating	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', default)$/;"	v
g:gitgutter_enabled	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_enabled = get(g:, 'gitgutter_enabled', 1)$/;"	v
g:gitgutter_max_signs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', -1)$/;"	v
g:gitgutter_max_signs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', 500)$/;"	v
g:gitgutter_signs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_signs             = get(g:, 'gitgutter_signs', 1)$/;"	v
g:gitgutter_highlight_lines	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_highlight_lines   = get(g:, 'gitgutter_highlight_lines', 0)$/;"	v
g:gitgutter_highlight_linenrs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_highlight_linenrs = get(g:, 'gitgutter_highlight_linenrs', 0)$/;"	v
g:gitgutter_sign_priority	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_priority     = get(g:, 'gitgutter_sign_priority', 10)$/;"	v
g:gitgutter_sign_allow_clobber	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_allow_clobber = 1$/;"	v
g:gitgutter_sign_allow_clobber	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_allow_clobber   = get(g:, 'gitgutter_sign_allow_clobber', 0)$/;"	v
g:gitgutter_set_sign_backgrounds	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_set_sign_backgrounds = get(g:, 'gitgutter_set_sign_backgrounds', 0)$/;"	v
g:gitgutter_sign_added	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_added           = get(g:, 'gitgutter_sign_added', '+')$/;"	v
g:gitgutter_sign_modified	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_modified        = get(g:, 'gitgutter_sign_modified', '~')$/;"	v
g:gitgutter_sign_removed	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_removed         = get(g:, 'gitgutter_sign_removed', '_')$/;"	v
g:gitgutter_sign_removed_first_line	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '‾')$/;"	v
g:gitgutter_sign_removed_first_line	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '_^')$/;"	v
g:gitgutter_sign_removed_above_and_below	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_removed_above_and_below = get(g:, 'gitgutter_sign_removed_above_and_below', '_¯')$/;"	v
g:gitgutter_sign_modified_removed	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_modified_removed        = get(g:, 'gitgutter_sign_modified_removed', '~_')$/;"	v
g:gitgutter_git_args	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_git_args                     = get(g:, 'gitgutter_git_args', '')$/;"	v
g:gitgutter_diff_relative_to	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_relative_to             = get(g:, 'gitgutter_diff_relative_to', 'index')$/;"	v
g:gitgutter_diff_args	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_args                    = get(g:, 'gitgutter_diff_args', '')$/;"	v
g:gitgutter_diff_base	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_base                    = get(g:, 'gitgutter_diff_base', '')$/;"	v
g:gitgutter_map_keys	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_map_keys                     = get(g:, 'gitgutter_map_keys', 1)$/;"	v
g:gitgutter_terminal_reports_focus	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_terminal_reports_focus       = get(g:, 'gitgutter_terminal_reports_focus', 1)$/;"	v
g:gitgutter_async	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_async                        = get(g:, 'gitgutter_async', 1)$/;"	v
g:gitgutter_log	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_log                          = get(g:, 'gitgutter_log', 0)$/;"	v
g:gitgutter_use_location_list	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_use_location_list            = get(g:, 'gitgutter_use_location_list', 0)$/;"	v
g:gitgutter_close_preview_on_escape	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_close_preview_on_escape      = get(g:, 'gitgutter_close_preview_on_escape', 0)$/;"	v
g:gitgutter_show_msg_on_hunk_jumping	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_show_msg_on_hunk_jumping     = get(g:, 'gitgutter_show_msg_on_hunk_jumping', 1)$/;"	v
g:gitgutter_git_executable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_git_executable = get(g:, 'gitgutter_git_executable', 'git')$/;"	v
default_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let default_grep = 'grep'$/;"	v
g:gitgutter_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_grep = get(g:, 'gitgutter_grep', default_grep)$/;"	v
g:gitgutter_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^      let g:gitgutter_grep .= ' --color=never'$/;"	v
g:gitgutter_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^    let g:gitgutter_grep = ''$/;"	v
GitGutterAll	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterAll call gitgutter#all(1)$/;"	c
GitGutter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 1)$/;"	c
GitGutterDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDisable call gitgutter#disable()$/;"	c
GitGutterEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterEnable  call gitgutter#enable()$/;"	c
GitGutterToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterToggle  call gitgutter#toggle()$/;"	c
GitGutterBufferDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferDisable call gitgutter#buffer_disable()$/;"	c
GitGutterBufferEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferEnable  call gitgutter#buffer_enable()$/;"	c
GitGutterBufferToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferToggle  call gitgutter#buffer_toggle()$/;"	c
GitGutterQuickFix	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterQuickFix call gitgutter#quickfix(0)$/;"	c
GitGutterQuickFixCurrentFile	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterQuickFixCurrentFile call gitgutter#quickfix(1)$/;"	c
GitGutterLineHighlightsDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsDisable call gitgutter#highlight#line_disable()$/;"	c
GitGutterLineHighlightsEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsEnable  call gitgutter#highlight#line_enable()$/;"	c
GitGutterLineHighlightsToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsToggle  call gitgutter#highlight#line_toggle()$/;"	c
GitGutterLineNrHighlightsDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsDisable call gitgutter#highlight#linenr_disable()$/;"	c
GitGutterLineNrHighlightsEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsEnable  call gitgutter#highlight#linenr_enable()$/;"	c
GitGutterLineNrHighlightsToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsToggle  call gitgutter#highlight#linenr_toggle()$/;"	c
GitGutterSignsEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsEnable  call gitgutter#sign#enable()$/;"	c
GitGutterSignsDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsDisable call gitgutter#sign#disable()$/;"	c
GitGutterSignsToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsToggle  call gitgutter#sign#toggle()$/;"	c
GitGutterNextHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)$/;"	c
GitGutterPrevHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)$/;"	c
GitGutterStageHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -range=% GitGutterStageHunk call gitgutter#hunk#stage(<line1>,<line2>)$/;"	c
GitGutterUndoHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterUndoHunk    call gitgutter#hunk#undo()$/;"	c
GitGutterPreviewHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterPreviewHunk call gitgutter#hunk#preview()$/;"	c
<Plug>(GitGutterTextObjectInnerPending)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>$/;"	m
<Plug>(GitGutterTextObjectOuterPending)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>$/;"	m
GitGutterGetHunks	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunks()$/;"	f
GitGutterGetHunkSummary	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunkSummary()$/;"	f
GitGutterFold	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterFold call gitgutter#fold#toggle()$/;"	c
GitGutterDebug	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDebug call gitgutter#debug#debug()$/;"	c
<Plug>(GitGutterNextHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\\<C-U>execute v:count1 . 'GitGutterNextHunk'\\<CR>"$/;"	m
<Plug>GitGutterNextHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\\<C-U>call gitgutter#utility#warn('Please change your map \\<lt>Plug>GitGutterNextHunk to \\<lt>Plug>(GitGutterNextHunk)')\\<CR>"$/;"	m
<Plug>(GitGutterPrevHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\\<C-U>execute v:count1 . 'GitGutterPrevHunk'\\<CR>"$/;"	m
<Plug>GitGutterPrevHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\\<C-U>call gitgutter#utility#warn('Please change your map \\<lt>Plug>GitGutterPrevHunk to \\<lt>Plug>(GitGutterPrevHunk)')\\<CR>"$/;"	m
<Plug>(GitGutterStageHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>$/;"	m
<Plug>GitGutterStageHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>$/;"	m
<Plug>(GitGutterUndoHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>$/;"	m
<Plug>GitGutterUndoHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>$/;"	m
<Plug>(GitGutterPreviewHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>$/;"	m
<Plug>GitGutterPreviewHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>$/;"	m
on_bufenter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:on_bufenter()$/;"	f
GitGutterCursorHold	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterCursorHold(timer)$/;"	f
gitgutter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^augroup gitgutter$/;"	a
s:focus_was_lost	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let s:focus_was_lost = 0$/;"	v
gitgutter#all	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#all(force) abort$/;"	f
gitgutter#process_buffer	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#process_buffer(bufnr, force) abort$/;"	f
gitgutter#disable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#disable() abort$/;"	f
gitgutter#enable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#enable() abort$/;"	f
gitgutter#toggle	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#toggle() abort$/;"	f
gitgutter#buffer_disable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_disable() abort$/;"	f
gitgutter#buffer_enable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_enable() abort$/;"	f
gitgutter#buffer_toggle	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_toggle() abort$/;"	f
gitgutter#setup_maps	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#setup_maps()$/;"	f
setup_path	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:setup_path(bufnr, continuation)$/;"	f
has_fresh_changes	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:has_fresh_changes(bufnr) abort$/;"	f
reset_tick	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:reset_tick(bufnr) abort$/;"	f
clear	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:clear(bufnr)$/;"	f
gitgutter#quickfix	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#quickfix(current_file)$/;"	f
s:first_sign_id	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:first_sign_id = 3000$/;"	v
s:next_sign_id	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:next_sign_id  = s:first_sign_id$/;"	v
s:supports_star	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:supports_star = v:version > 703 || (v:version == 703 && has("patch596"))$/;"	v
gitgutter#sign#enable	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#enable() abort$/;"	f
gitgutter#sign#disable	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#disable() abort$/;"	f
gitgutter#sign#toggle	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#toggle() abort$/;"	f
gitgutter#sign#clear_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#clear_signs(bufnr) abort$/;"	f
gitgutter#sign#update_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#update_signs(bufnr, modified_lines) abort$/;"	f
find_current_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:find_current_signs(bufnr) abort$/;"	f
obsolete_gitgutter_signs_to_remove	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:obsolete_gitgutter_signs_to_remove(bufnr, new_gitgutter_signs_line_numbers) abort$/;"	f
remove_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:remove_signs(bufnr, sign_ids, all_signs) abort$/;"	f
upsert_new_gitgutter_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:upsert_new_gitgutter_signs(bufnr, modified_lines) abort$/;"	f
handle_double_hunk	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:handle_double_hunk(modified_lines)$/;"	f
next_sign_id	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:next_sign_id() abort$/;"	f
gitgutter#sign#reset	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#reset()$/;"	f
highlight_name_for_change	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:highlight_name_for_change(text) abort$/;"	f
s:plugin_dir	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:plugin_dir  = expand('<sfile>:p:h:h:h').'\/'$/;"	v
s:log_file	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:log_file    = s:plugin_dir.'gitgutter.log'$/;"	v
s:channel_log	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:channel_log = s:plugin_dir.'channel.log'$/;"	v
s:new_log_session	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:new_log_session = 1$/;"	v
gitgutter#debug#debug	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#debug()$/;"	f
separator	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:separator()$/;"	f
vim_version	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:vim_version()$/;"	f
git_version	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:git_version()$/;"	f
grep_version	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:grep_version()$/;"	f
option	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:option(name)$/;"	f
output	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:output(text)$/;"	f
gitgutter#debug#log	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#log(message, ...) abort$/;"	f
format_for_log	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:format_for_log(data) abort$/;"	f
gitgutter#fold#enable	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#enable()$/;"	f
gitgutter#fold#disable	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#disable()$/;"	f
gitgutter#fold#toggle	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#toggle()$/;"	f
gitgutter#fold#level	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#level(lnum)$/;"	f
gitgutter#fold#foldtext	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#foldtext()$/;"	f
gitgutter#fold#is_changed	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#is_changed()$/;"	f
set_fold_levels	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:set_fold_levels()$/;"	f
save_fold_state	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:save_fold_state()$/;"	f
restore_fold_state	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:restore_fold_state()$/;"	f
folded	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:folded()$/;"	f
gitgutter#highlight#line_disable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_disable() abort$/;"	f
gitgutter#highlight#line_enable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_enable() abort$/;"	f
gitgutter#highlight#line_toggle	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_toggle() abort$/;"	f
gitgutter#highlight#linenr_disable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_disable() abort$/;"	f
gitgutter#highlight#linenr_enable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_enable() abort$/;"	f
gitgutter#highlight#linenr_toggle	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_toggle() abort$/;"	f
gitgutter#highlight#define_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_highlights() abort$/;"	f
gitgutter#highlight#define_signs	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_signs() abort$/;"	f
define_sign_text	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_text() abort$/;"	f
gitgutter#highlight#define_sign_text_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text_highlights() abort$/;"	f
define_sign_line_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_line_highlights() abort$/;"	f
define_sign_linenr_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_linenr_highlights() abort$/;"	f
get_hl	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_hl(group, what, mode) abort$/;"	f
get_foreground_colors	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_colors(group) abort$/;"	f
get_background_colors	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_background_colors(group) abort$/;"	f
useful_diff_colours	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:useful_diff_colours()$/;"	f
get_foreground_fallback_colors	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_fallback_colors(type)$/;"	f
s:available	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:available = has('nvim') || ($/;"	v
s:jobs	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:jobs = {}$/;"	v
gitgutter#async#available	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#available()$/;"	f
gitgutter#async#execute	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#execute(cmd, bufnr, handler) abort$/;"	f
build_command	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:build_command(cmd)$/;"	f
on_stdout_nvim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_nvim(_job_id, data, _event) dict abort$/;"	f
on_stderr_nvim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_nvim(_job_id, data, _event) dict abort$/;"	f
on_exit_nvim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_nvim(_job_id, exit_code, _event) dict abort$/;"	f
on_stdout_vim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_vim(_channel, data) dict abort$/;"	f
on_stderr_vim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_vim(channel, _data) dict abort$/;"	f
on_exit_vim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_vim(channel) dict abort$/;"	f
job_id	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:job_id(job)$/;"	f
gitgutter#utility#supports_overscore_sign	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#supports_overscore_sign()$/;"	f
gitgutter#utility#setbufvar	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#setbufvar(buffer, varname, val)$/;"	f
gitgutter#utility#getbufvar	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#getbufvar(buffer, varname, ...)$/;"	f
gitgutter#utility#warn	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn(message) abort$/;"	f
gitgutter#utility#warn_once	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn_once(bufnr, message, key) abort$/;"	f
gitgutter#utility#is_active	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_active(bufnr) abort$/;"	f
not_git_dir	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:not_git_dir(bufnr) abort$/;"	f
is_file_buffer	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:is_file_buffer(bufnr) abort$/;"	f
winshell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:winshell()$/;"	f
gitgutter#utility#shellescape	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shellescape(arg) abort$/;"	f
gitgutter#utility#file	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file(bufnr)$/;"	f
gitgutter#utility#extension	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#extension(bufnr) abort$/;"	f
gitgutter#utility#system	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#system(cmd, ...) abort$/;"	f
gitgutter#utility#has_repo_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#has_repo_path(bufnr)$/;"	f
gitgutter#utility#repo_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#repo_path(bufnr, shellesc) abort$/;"	f
s:set_path_handler	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:set_path_handler = {}$/;"	v
set_path_handler.out	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.out(buffer, path) abort$/;"	f
set_path_handler.err	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.err(buffer) abort$/;"	f
gitgutter#utility#set_repo_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#set_repo_path(bufnr, continuation) abort$/;"	f
gitgutter#utility#cd_cmd	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#cd_cmd(bufnr, cmd) abort$/;"	f
unc_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:unc_path(bufnr)$/;"	f
dos_shell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dos_shell()$/;"	f
use_known_shell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:use_known_shell() abort$/;"	f
restore_shell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:restore_shell() abort$/;"	f
gitgutter#utility#get_diff_base	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#get_diff_base(bufnr)$/;"	f
abs_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:abs_path(bufnr, shellesc)$/;"	f
dir	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dir(bufnr) abort$/;"	f
filename	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:filename(bufnr) abort$/;"	f
exists_file	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:exists_file(bufnr) abort$/;"	f
strip_trailing_new_line	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:strip_trailing_new_line(line) abort$/;"	f
gitgutter#utility#windows	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#windows()$/;"	f
s:winid	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:winid = 0$/;"	v
s:preview_bufnr	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:preview_bufnr = 0$/;"	v
s:nomodeline	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
gitgutter#hunk#set_hunks	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#set_hunks(bufnr, hunks) abort$/;"	f
gitgutter#hunk#hunks	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#hunks(bufnr) abort$/;"	f
gitgutter#hunk#reset	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#reset(bufnr) abort$/;"	f
gitgutter#hunk#summary	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#summary(bufnr) abort$/;"	f
reset_summary	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:reset_summary(bufnr) abort$/;"	f
gitgutter#hunk#increment_lines_added	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_added(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_modified	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_modified(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_removed	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_removed(bufnr, count) abort$/;"	f
gitgutter#hunk#next_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#next_hunk(count) abort$/;"	f
gitgutter#hunk#prev_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#prev_hunk(count) abort$/;"	f
current_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:current_hunk() abort$/;"	f
cursor_in_two_hunks	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:cursor_in_two_hunks()$/;"	f
gitgutter#hunk#cursor_in_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#cursor_in_hunk(hunk) abort$/;"	f
gitgutter#hunk#in_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#in_hunk(lnum)$/;"	f
gitgutter#hunk#text_object	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#text_object(inner) abort$/;"	f
gitgutter#hunk#stage	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#stage(...) abort$/;"	f
gitgutter#hunk#undo	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#undo() abort$/;"	f
gitgutter#hunk#preview	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#preview() abort$/;"	f
hunk_op	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:hunk_op(op, ...)$/;"	f
stage	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:stage(hunk_diff)$/;"	f
undo	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:undo(hunk_diff)$/;"	f
preview	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:preview(hunk_diff)$/;"	f
part_of_diff	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:part_of_diff(hunk_diff, first, last)$/;"	f
adjust_header	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_header(bufnr, hunk_diff)$/;"	f
fix_file_references	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:fix_file_references(filepath, hunk_diff)$/;"	f
gitgutter#hunk#fix_file_references	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^  function! gitgutter#hunk#fix_file_references(filepath, hunk_diff)$/;"	f
adjust_hunk_summary	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_hunk_summary(hunk_diff) abort$/;"	f
line_adjustment_for_current_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:line_adjustment_for_current_hunk() abort$/;"	f
in_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:in_hunk_preview_window()$/;"	f
open_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:open_hunk_preview_window()$/;"	f
close_popup_on_escape	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:close_popup_on_escape(winid, key)$/;"	f
populate_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:populate_hunk_preview_window(header, body)$/;"	f
enable_staging_from_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:enable_staging_from_hunk_preview_window()$/;"	f
goto_original_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:goto_original_window()$/;"	f
gitgutter#hunk#close_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#close_hunk_preview_window()$/;"	f
gitgutter#hunk#is_preview_window_open	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function gitgutter#hunk#is_preview_window_open()$/;"	f
s:nomodeline	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
s:hunk_re	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:hunk_re = '^@@ -\\(\\d\\+\\),\\?\\(\\d*\\) +\\(\\d\\+\\),\\?\\(\\d*\\) @@'$/;"	v
git_supports_command_line_config_override	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:git_supports_command_line_config_override() abort$/;"	f
s:c_flag	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:c_flag = s:git_supports_command_line_config_override()$/;"	v
s:temp_from	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_from = tempname()$/;"	v
s:temp_buffer	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_buffer = tempname()$/;"	v
s:counter	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:counter = 0$/;"	v
gitgutter#diff#run_diff	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#run_diff(bufnr, from, preserve_full_diff) abort$/;"	f
gitgutter#diff#handler	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#handler(bufnr, diff) abort$/;"	f
gitgutter#diff#parse_diff	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_diff(diff) abort$/;"	f
gitgutter#diff#parse_hunk	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_hunk(line) abort$/;"	f
gitgutter#diff#process_hunks	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunks(bufnr, hunks) abort$/;"	f
process_hunk	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_hunk(bufnr, hunk) abort$/;"	f
is_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_added(from_count, to_count) abort$/;"	f
is_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_removed(from_count, to_count) abort$/;"	f
is_modified	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified(from_count, to_count) abort$/;"	f
is_modified_and_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_added(from_count, to_count) abort$/;"	f
is_modified_and_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_removed(from_count, to_count) abort$/;"	f
process_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_removed(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_removed(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#hunk_diff	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#hunk_diff(bufnr, full_diff, ...)$/;"	f
write_buffer	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:write_buffer(bufnr, file)$/;"	f
save_last_seen_change	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:save_last_seen_change(bufnr) abort$/;"	f
s:gap_between_regions	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^let s:gap_between_regions = 5$/;"	v
gitgutter#diff_highlight#process	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! gitgutter#diff_highlight#process(hunk_body)$/;"	f
diff	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:diff(rline, aline, rlinenr, alinenr, rprefix, aprefix, regions, whole_line)$/;"	f
lcs	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:lcs(s1, s2)$/;"	f
gitgutter#diff_highlight#lcs	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#lcs(s1, s2)$/;"	f
common_prefix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_prefix(a, b)$/;"	f
gitgutter#diff_highlight#common_prefix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_prefix(a, b)$/;"	f
common_suffix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_suffix(a, b, start)$/;"	f
gitgutter#diff_highlight#common_suffix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_suffix(a, b, start)$/;"	f
split	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:split(str, delimiter)$/;"	f
gitgutter#diff_highlight#split	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#split(str, delimiter)$/;"	f
b:SuperTabContextTextMemberPatterns	plugged/supertab/ftplugin/xml.vim	/^  let b:SuperTabContextTextMemberPatterns = ['<\/']$/;"	v
b:SuperTabContextTextOmniPrecedence	plugged/supertab/ftplugin/xml.vim	/^  let b:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']$/;"	v
b:SuperTabContextTextMemberPatterns	plugged/supertab/ftplugin/html.vim	/^  let b:SuperTabContextTextMemberPatterns = ['<\/']$/;"	v
set_precedence	plugged/supertab/ftplugin/html.vim	/^  let set_precedence = 1$/;"	v
project	plugged/supertab/ftplugin/html.vim	/^      let project = eclim#project#util#GetCurrentProjectName()$/;"	v
natures	plugged/supertab/ftplugin/html.vim	/^        let natures = eclim#project#util#GetProjectNatureAliases(project)$/;"	v
set_precedence	plugged/supertab/ftplugin/html.vim	/^        let set_precedence = !eclim#util#ListContains(natures, 'php')$/;"	v
b:SuperTabContextTextOmniPrecedence	plugged/supertab/ftplugin/html.vim	/^    let b:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']$/;"	v
SHELL	plugged/supertab/Makefile	/^SHELL=\/bin\/bash$/;"	m
loaded_supertab	plugged/supertab/plugin/supertab.vim	/^let loaded_supertab = 1$/;"	v
s:save_cpo	plugged/supertab/plugin/supertab.vim	/^let s:save_cpo=&cpo$/;"	v
g:SuperTabDefaultCompletionType	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabContextDefaultCompletionType	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabContextTextMemberPatterns	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabContextTextMemberPatterns = ['\\.', '>\\?::', '->']$/;"	v
g:SuperTabCompletionContexts	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabRetainCompletionDuration	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:SuperTabNoCompleteBefore	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = ['\\k']$/;"	v
g:SuperTabNoCompleteBefore	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = []$/;"	v
g:SuperTabNoCompleteAfter	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = []$/;"	v
g:SuperTabNoCompleteAfter	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = ['^', '\\s']$/;"	v
g:SuperTabMappingForward	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingBackward	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingTabLiteral	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabLongestEnhanced	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabLongestEnhanced = 0$/;"	v
g:SuperTabLongestHighlight	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabCrMapping	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabCrMapping = 0$/;"	v
g:SuperTabClosePreviewOnPopupClose	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabClosePreviewOnPopupClose = 0$/;"	v
g:SuperTabUndoBreak	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabUndoBreak = 0$/;"	v
g:SuperTabCompleteCase	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabCompleteCase = 'inherit'$/;"	v
s:tabHelp	plugged/supertab/plugin/supertab.vim	/^  let s:tabHelp =$/;"	v
s:types	plugged/supertab/plugin/supertab.vim	/^  let s:types =$/;"	v
s:modes	plugged/supertab/plugin/supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:types	plugged/supertab/plugin/supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:modes	plugged/supertab/plugin/supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
SuperTabSetDefaultCompletionType	plugged/supertab/plugin/supertab.vim	/^function! SuperTabSetDefaultCompletionType(type) " {{{$/;"	f
SuperTabSetCompletionType	plugged/supertab/plugin/supertab.vim	/^function! SuperTabSetCompletionType(type) " {{{$/;"	f
SuperTabAlternateCompletion	plugged/supertab/plugin/supertab.vim	/^function! SuperTabAlternateCompletion(type) " {{{$/;"	f
SuperTabLongestHighlight	plugged/supertab/plugin/supertab.vim	/^function! SuperTabLongestHighlight(dir) " {{{$/;"	f
Init	plugged/supertab/plugin/supertab.vim	/^function! s:Init() " {{{$/;"	f
InitBuffer	plugged/supertab/plugin/supertab.vim	/^function! s:InitBuffer() " {{{$/;"	f
ManualCompletionEnter	plugged/supertab/plugin/supertab.vim	/^function! s:ManualCompletionEnter() " {{{$/;"	f
SetCompletionType	plugged/supertab/plugin/supertab.vim	/^function! s:SetCompletionType() " {{{$/;"	f
SetDefaultCompletionType	plugged/supertab/plugin/supertab.vim	/^function! s:SetDefaultCompletionType() " {{{$/;"	f
SuperTab	plugged/supertab/plugin/supertab.vim	/^function! SuperTab(command) " {{{$/;"	f
SuperTabHelp	plugged/supertab/plugin/supertab.vim	/^function! s:SuperTabHelp() " {{{$/;"	f
CompletionMode	plugged/supertab/plugin/supertab.vim	/^function! s:CompletionMode() " {{{$/;"	f
StartCompletionMode	plugged/supertab/plugin/supertab.vim	/^function! s:StartCompletionMode() " {{{$/;"	f
WillComplete	plugged/supertab/plugin/supertab.vim	/^function! s:WillComplete(...) " {{{$/;"	f
EnableLongestEnhancement	plugged/supertab/plugin/supertab.vim	/^function! s:EnableLongestEnhancement() " {{{$/;"	f
IsNoCompleteAfterReset	plugged/supertab/plugin/supertab.vim	/^function! s:IsNoCompleteAfterReset() " {{{$/;"	f
EnableNoCompleteAfterReset	plugged/supertab/plugin/supertab.vim	/^function! s:EnableNoCompleteAfterReset() " {{{$/;"	f
CompletionReset	plugged/supertab/plugin/supertab.vim	/^function! s:CompletionReset(char) " {{{$/;"	f
CaptureKeyPresses	plugged/supertab/plugin/supertab.vim	/^function! s:CaptureKeyPresses() " {{{$/;"	f
CaptureKeyMap	plugged/supertab/plugin/supertab.vim	/^function! s:CaptureKeyMap(key) " {{{$/;"	f
IsPreviewOpen	plugged/supertab/plugin/supertab.vim	/^function! s:IsPreviewOpen() " {{{$/;"	f
ClosePreview	plugged/supertab/plugin/supertab.vim	/^function! s:ClosePreview() " {{{$/;"	f
ReleaseKeyPresses	plugged/supertab/plugin/supertab.vim	/^function! s:ReleaseKeyPresses() " {{{$/;"	f
CommandLineCompletion	plugged/supertab/plugin/supertab.vim	/^function! s:CommandLineCompletion() " {{{$/;"	f
ContextCompletion	plugged/supertab/plugin/supertab.vim	/^function! s:ContextCompletion() " {{{$/;"	f
ContextDiscover	plugged/supertab/plugin/supertab.vim	/^function! s:ContextDiscover() " {{{$/;"	f
ContextText	plugged/supertab/plugin/supertab.vim	/^function! s:ContextText() " {{{$/;"	f
ExpandMap	plugged/supertab/plugin/supertab.vim	/^function! s:ExpandMap(map) " {{{$/;"	f
SuperTabChain	plugged/supertab/plugin/supertab.vim	/^function! SuperTabChain(completefunc, completekeys, ...) " {{{$/;"	f
SuperTabCodeComplete	plugged/supertab/plugin/supertab.vim	/^function! SuperTabCodeComplete(findstart, base) " {{{$/;"	f
supertab_close_preview	plugged/supertab/plugin/supertab.vim	/^    augroup supertab_close_preview$/;"	a
<c-x>	plugged/supertab/plugin/supertab.vim	/^  inoremap <silent> <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<Plug>SuperTabForward	plugged/supertab/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabForward <c-r>=SuperTab('n')<cr>$/;"	m
<Plug>SuperTabBackward	plugged/supertab/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabBackward <c-r>=SuperTab('p')<cr>$/;"	m
s:has_dict_maparg	plugged/supertab/plugin/supertab.vim	/^  let s:has_dict_maparg = v:version > 703 || (v:version == 703 && has('patch32'))$/;"	v
existing_tab	plugged/supertab/plugin/supertab.vim	/^    let existing_tab = maparg('<tab>', 'i')$/;"	v
s:Tab	plugged/supertab/plugin/supertab.vim	/^      let s:Tab = function(substitute(existing_tab, '()$', '', ''))$/;"	v
stab	plugged/supertab/plugin/supertab.vim	/^    let stab = maparg('<s-tab>', 'i')$/;"	v
existing_stab	plugged/supertab/plugin/supertab.vim	/^      let existing_stab = maparg('<s-tab>', 'i', 0, 1)$/;"	v
stab	plugged/supertab/plugin/supertab.vim	/^        let stab = substitute(stab, '<SID>\\c', '<SNR>' . existing_stab.sid . '_', '')$/;"	v
stab	plugged/supertab/plugin/supertab.vim	/^        let stab = substitute(stab, '()$', '', '')$/;"	v
s:ShiftTab	plugged/supertab/plugin/supertab.vim	/^        let s:ShiftTab = function(stab)$/;"	v
stab	plugged/supertab/plugin/supertab.vim	/^        let stab = ''$/;"	v
stab	plugged/supertab/plugin/supertab.vim	/^      let stab = substitute(stab, '\\(<[-a-zA-Z0-9]\\+>\\)', '\\\\\\1', 'g')$/;"	v
s:ShiftTab	plugged/supertab/plugin/supertab.vim	/^      let s:ShiftTab = stab$/;"	v
expr_map	plugged/supertab/plugin/supertab.vim	/^    let expr_map = 0$/;"	v
map_dict	plugged/supertab/plugin/supertab.vim	/^      let map_dict = maparg('<cr>', 'i', 0, 1)$/;"	v
expr_map	plugged/supertab/plugin/supertab.vim	/^      let expr_map = has_key(map_dict, 'expr') && map_dict.expr$/;"	v
expr_map	plugged/supertab/plugin/supertab.vim	/^      let expr_map = maparg('<cr>', 'i') =~? '\\<cr>'$/;"	v
iabbrev_map	plugged/supertab/plugin/supertab.vim	/^    let iabbrev_map = iabbrevs =~? '\\<cr>'$/;"	v
g:SuperTabCrMapping	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabCrMapping = 0$/;"	v
g:SuperTabCrMapping	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabCrMapping = 0$/;"	v
g:SuperTabCrMapping	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabCrMapping = 0$/;"	v
map	plugged/supertab/plugin/supertab.vim	/^      let map = maparg('<cr>', 'i')$/;"	v
cr	plugged/supertab/plugin/supertab.vim	/^      let cr = !(map =~? '\\(^\\|[^)]\\)<cr>' || map =~ 'ExpandCr')$/;"	v
map	plugged/supertab/plugin/supertab.vim	/^      let map = s:ExpandMap(map)$/;"	v
<cr>	plugged/supertab/plugin/supertab.vim	/^      inoremap <silent> <cr> <c-r>=<SID>SelectCompletion(1)<cr>$/;"	m
SelectCompletion	plugged/supertab/plugin/supertab.vim	/^    function! s:SelectCompletion(cr)$/;"	f
SuperTabHelp	plugged/supertab/plugin/supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
TestSuperTabCodeComplete	plugged/supertab/plugin/supertab.vim	/^function! TestSuperTabCodeComplete(findstart, base) " {{{$/;"	f
ale_linters#ocaml#merlin#Handle	plugged/ale/ale_linters/ocaml/merlin.vim	/^function! ale_linters#ocaml#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#ada#gcc#GetCommand	plugged/ale/ale_linters/ada/gcc.vim	/^function! ale_linters#ada#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#ada#gcc#Handle	plugged/ale/ale_linters/ada/gcc.vim	/^function! ale_linters#ada#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#ada#adals#GetAdaLSConfig	plugged/ale/ale_linters/ada/adals.vim	/^function! ale_linters#ada#adals#GetAdaLSConfig(buffer) abort$/;"	f
ale_linters#ada#adals#GetRootDirectory	plugged/ale/ale_linters/ada/adals.vim	/^function! ale_linters#ada#adals#GetRootDirectory(buffer) abort$/;"	f
ale_linters#vim#vimls#GetProjectRoot	plugged/ale/ale_linters/vim/vimls.vim	/^function! ale_linters#vim#vimls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetExecutable	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetExecutable(buffer) abort$/;"	f
GetALEProjectDir	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! s:GetALEProjectDir(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetCwd	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetCwd(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetCommand	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetCommand(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#Handle	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#Handle(buffer, lines) abort$/;"	f
s:enable_neovim	plugged/ale/ale_linters/vim/vint.vim	/^let s:enable_neovim = has('nvim') ? ' --enable-neovim' : ''$/;"	v
s:format	plugged/ale/ale_linters/vim/vint.vim	/^let s:format = '-f "{file_path}:{line_number}:{column_number}: {severity}: {policy_name} - {description} (see {reference})"'$/;"	v
ale_linters#vim#vint#GetCommand	plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#GetCommand(buffer, version) abort$/;"	f
s:word_regex_list	plugged/ale/ale_linters/vim/vint.vim	/^let s:word_regex_list = [$/;"	v
ale_linters#vim#vint#Handle	plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#tflint#Handle	plugged/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#tflint#GetCommand	plugged/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform_lsp#GetCommand	plugged/ale/ale_linters/terraform/terraform_lsp.vim	/^function! ale_linters#terraform#terraform_lsp#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform_lsp#GetProjectRoot	plugged/ale/ale_linters/terraform/terraform_lsp.vim	/^function! ale_linters#terraform#terraform_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#terraform#terraform#GetExecutable	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetExecutable(buffer) abort$/;"	f
ale_linters#terraform#terraform#GetCommand	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform#GetType	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetType(severity) abort$/;"	f
ale_linters#terraform#terraform#GetDetail	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetDetail(error) abort$/;"	f
ale_linters#terraform#terraform#Handle	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#terraform_ls#GetTerraformExecutable	plugged/ale/ale_linters/terraform/terraform_ls.vim	/^function! ale_linters#terraform#terraform_ls#GetTerraformExecutable(buffer) abort$/;"	f
ale_linters#terraform#terraform_ls#GetCommand	plugged/ale/ale_linters/terraform/terraform_ls.vim	/^function! ale_linters#terraform#terraform_ls#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform_ls#GetProjectRoot	plugged/ale/ale_linters/terraform/terraform_ls.vim	/^function! ale_linters#terraform#terraform_ls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#pyrex#cython#GetCommand	plugged/ale/ale_linters/pyrex/cython.vim	/^function! ale_linters#pyrex#cython#GetCommand(buffer) abort$/;"	f
ale_linters#pyrex#cython#Handle	plugged/ale/ale_linters/pyrex/cython.vim	/^function! ale_linters#pyrex#cython#Handle(buffer, lines) abort$/;"	f
ale_linters#ink#ls#GetExecutable	plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#GetExecutable(buffer) abort$/;"	f
ale_linters#ink#ls#GetCommand	plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#GetCommand(buffer) abort$/;"	f
ale_linters#ink#ls#FindProjectRoot	plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#prolog#swipl#GetCommand	plugged/ale/ale_linters/prolog/swipl.vim	/^function! ale_linters#prolog#swipl#GetCommand(buffer) abort$/;"	f
GetAlarm	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:GetAlarm(buffer, timeout) abort$/;"	f
Subst	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Subst(format, vars) abort$/;"	f
ale_linters#prolog#swipl#Handle	plugged/ale/ale_linters/prolog/swipl.vim	/^function! ale_linters#prolog#swipl#Handle(buffer, lines) abort$/;"	f
GetErrMsg	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:GetErrMsg(i, lines, text) abort$/;"	f
Trim	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Trim(str) abort$/;"	f
Ignore	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Ignore(item) abort$/;"	f
ale_linters#haml#hamllint#GetExecutable	plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#GetExecutable(buffer) abort$/;"	f
ale_linters#haml#hamllint#GetCommand	plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#GetCommand(buffer) abort$/;"	f
ale_linters#haml#hamllint#Handle	plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#Handle(buffer, lines) abort$/;"	f
ale_linters#mercury#mmc#GetCommand	plugged/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#GetCommand(buffer) abort$/;"	f
ale_linters#mercury#mmc#Handle	plugged/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#Handle(buffer, lines) abort$/;"	f
ale_linters#pony#ponyc#GetCommand	plugged/ale/ale_linters/pony/ponyc.vim	/^function! ale_linters#pony#ponyc#GetCommand(buffer) abort$/;"	f
ale_linters#zig#zls#GetProjectRoot	plugged/ale/ale_linters/zig/zls.vim	/^function! ale_linters#zig#zls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#tex#lacheck#Handle	plugged/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#Handle(buffer, lines) abort$/;"	f
g:ale_tex_chktex_executable	plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_executable =$/;"	v
g:ale_tex_chktex_options	plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_options =$/;"	v
ale_linters#tex#chktex#GetCommand	plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#GetCommand(buffer) abort$/;"	f
ale_linters#tex#chktex#Handle	plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#texlab#GetProjectRoot	plugged/ale/ale_linters/tex/texlab.vim	/^function! ale_linters#tex#texlab#GetProjectRoot(buffer) abort$/;"	f
ale_linters#tex#texlab#GetCommand	plugged/ale/ale_linters/tex/texlab.vim	/^function! ale_linters#tex#texlab#GetCommand(buffer) abort$/;"	f
ale_linters#svelte#svelteserver#GetProjectRoot	plugged/ale/ale_linters/svelte/svelteserver.vim	/^function! ale_linters#svelte#svelteserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#asm#gcc#GetCommand	plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#asm#gcc#Handle	plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#go#golint#GetCommand	plugged/ale/ale_linters/go/golint.vim	/^function! ale_linters#go#golint#GetCommand(buffer) abort$/;"	f
ale_linters#go#gofmt#GetCommand	plugged/ale/ale_linters/go/gofmt.vim	/^function! ale_linters#go#gofmt#GetCommand(buffer) abort$/;"	f
ale_linters#go#govet#GetCommand	plugged/ale/ale_linters/go/govet.vim	/^function! ale_linters#go#govet#GetCommand(buffer) abort$/;"	f
ale_linters#go#revive#GetCommand	plugged/ale/ale_linters/go/revive.vim	/^function! ale_linters#go#revive#GetCommand(buffer) abort$/;"	f
ale_linters#go#langserver#GetCommand	plugged/ale/ale_linters/go/langserver.vim	/^function! ale_linters#go#langserver#GetCommand(buffer) abort$/;"	f
ale_linters#go#staticcheck#GetCommand	plugged/ale/ale_linters/go/staticcheck.vim	/^function! ale_linters#go#staticcheck#GetCommand(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetCommand	plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetCommand(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetMatches	plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetMatches(lines) abort$/;"	f
ale_linters#go#gometalinter#Handler	plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gopls#GetCommand	plugged/ale/ale_linters/go/gopls.vim	/^function! ale_linters#go#gopls#GetCommand(buffer) abort$/;"	f
ale_linters#go#gopls#FindProjectRoot	plugged/ale/ale_linters/go/gopls.vim	/^function! ale_linters#go#gopls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#go#gotype#GetExecutable	plugged/ale/ale_linters/go/gotype.vim	/^function! ale_linters#go#gotype#GetExecutable(buffer) abort$/;"	f
ale_linters#go#gotype#GetCommand	plugged/ale/ale_linters/go/gotype.vim	/^function! ale_linters#go#gotype#GetCommand(buffer) abort$/;"	f
ale_linters#go#gobuild#GetCommand	plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetCommand(buffer) abort$/;"	f
ale_linters#go#gobuild#GetMatches	plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetMatches(lines) abort$/;"	f
ale_linters#go#gobuild#Handler	plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#Handler(buffer, lines) abort$/;"	f
ale_linters#go#golangci_lint#GetCommand	plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#GetCommand(buffer) abort$/;"	f
ale_linters#go#golangci_lint#GetMatches	plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#GetMatches(lines) abort$/;"	f
ale_linters#go#golangci_lint#Handler	plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#Handler(buffer, lines) abort$/;"	f
ale_linters#go#bingo#GetCommand	plugged/ale/ale_linters/go/bingo.vim	/^function! ale_linters#go#bingo#GetCommand(buffer) abort$/;"	f
ale_linters#go#bingo#FindProjectRoot	plugged/ale/ale_linters/go/bingo.vim	/^function! ale_linters#go#bingo#FindProjectRoot(buffer) abort$/;"	f
ale_linters#racket#raco#Handle	plugged/ale/ale_linters/racket/raco.vim	/^function! ale_linters#racket#raco#Handle(buffer, lines) abort$/;"	f
ale_linters#nix#nix#Command	plugged/ale/ale_linters/nix/nix.vim	/^function! ale_linters#nix#nix#Command(buffer, output, meta) abort$/;"	f
ale_linters#nix#nix#Handle	plugged/ale/ale_linters/nix/nix.vim	/^function! ale_linters#nix#nix#Handle(buffer, lines) abort$/;"	f
ale_linters#nix#statix#GetCommand	plugged/ale/ale_linters/nix/statix.vim	/^function! ale_linters#nix#statix#GetCommand(buffer) abort$/;"	f
ale_linters#nix#rnix_lsp#GetProjectRoot	plugged/ale/ale_linters/nix/rnix_lsp.vim	/^function! ale_linters#nix#rnix_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#nim#nimlsp#GetProjectRoot	plugged/ale/ale_linters/nim/nimlsp.vim	/^function! ale_linters#nim#nimlsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#nim#nimlsp#GetCommand	plugged/ale/ale_linters/nim/nimlsp.vim	/^function! ale_linters#nim#nimlsp#GetCommand(buffer) abort$/;"	f
s:end_col_patterns	plugged/ale/ale_linters/nim/nimcheck.vim	/^let s:end_col_patterns = [$/;"	v
ale_linters#nim#nimcheck#Handle	plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimcheck#GetCommand	plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#GetCommand(buffer) abort$/;"	f
ale_linters#sugarss#stylelint#GetCommand	plugged/ale/ale_linters/sugarss/stylelint.vim	/^function! ale_linters#sugarss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#proto#protolint#GetCommand	plugged/ale/ale_linters/proto/protolint.vim	/^function! ale_linters#proto#protolint#GetCommand(buffer) abort$/;"	f
ale_linters#proto#protoc_gen_lint#GetCommand	plugged/ale/ale_linters/proto/protoc_gen_lint.vim	/^function! ale_linters#proto#protoc_gen_lint#GetCommand(buffer) abort$/;"	f
ale_linters#yang#yang_lsp#GetProjectRoot	plugged/ale/ale_linters/yang/yang_lsp.vim	/^function! ale_linters#yang#yang_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#qml#qmllint#Handle	plugged/ale/ale_linters/qml/qmllint.vim	/^function! ale_linters#qml#qmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmlfmt#Handle	plugged/ale/ale_linters/qml/qmlfmt.vim	/^function! ale_linters#qml#qmlfmt#Handle(buffer, lines) abort$/;"	f
g:ale_cmake_cmakelint_executable	plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_executable =$/;"	v
g:ale_cmake_cmakelint_options	plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_options =$/;"	v
ale_linters#cmake#cmakelint#Executable	plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Executable(buffer) abort$/;"	f
ale_linters#cmake#cmakelint#Command	plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Command(buffer) abort$/;"	f
ale_linters#python#pyright#GetConfig	plugged/ale/ale_linters/python/pyright.vim	/^function! ale_linters#python#pyright#GetConfig(buffer) abort$/;"	f
ale_linters#python#mypy#GetExecutable	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetExecutable(buffer) abort$/;"	f
ale_linters#python#mypy#GetCwd	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetCwd(buffer) abort$/;"	f
ale_linters#python#mypy#GetCommand	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetCommand(buffer) abort$/;"	f
ale_linters#python#mypy#Handle	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pydocstyle#GetExecutable	plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pydocstyle#GetCommand	plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pydocstyle#Handle	plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#Handle(buffer, lines) abort$/;"	f
UsingModule	plugged/ale/ale_linters/python/flake8.vim	/^function! s:UsingModule(buffer) abort$/;"	f
ale_linters#python#flake8#GetExecutable	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flake8#RunWithVersionCheck	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#python#flake8#GetCwd	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetCwd(buffer) abort$/;"	f
ale_linters#python#flake8#GetCommand	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetCommand(buffer, version) abort$/;"	f
s:end_col_pattern_map	plugged/ale/ale_linters/python/flake8.vim	/^let s:end_col_pattern_map = {$/;"	v
ale_linters#python#flake8#Handle	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pycodestyle#GetExecutable	plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pycodestyle#GetCommand	plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pycodestyle#Handle	plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyflakes#GetExecutable	plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyflakes#GetCommand	plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyflakes#Handle	plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#Handle(buffer, lines) abort$/;"	f
g:ale_python_prospector_executable	plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_executable =$/;"	v
g:ale_python_prospector_options	plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_options =$/;"	v
g:ale_python_prospector_use_global	plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_use_global = get(g:, 'ale_python_prospector_use_global', get(g:, 'ale_use_global_executables', 0))$/;"	v
ale_linters#python#prospector#GetExecutable	plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetExecutable(buffer) abort$/;"	f
ale_linters#python#prospector#GetCommand	plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetCommand(buffer) abort$/;"	f
ale_linters#python#prospector#Handle	plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#Handle(buffer, lines) abort$/;"	f
GetDir	plugged/ale/ale_linters/python/vulture.vim	/^function! s:GetDir(buffer) abort$/;"	f
ale_linters#python#vulture#GetExecutable	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetExecutable(buffer) abort$/;"	f
ale_linters#python#vulture#GetCwd	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetCwd(buffer) abort$/;"	f
ale_linters#python#vulture#GetCommand	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetCommand(buffer) abort$/;"	f
ale_linters#python#vulture#Handle	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#Handle(buffer, lines) abort$/;"	f
ale_linters#python#bandit#GetExecutable	plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#GetExecutable(buffer) abort$/;"	f
ale_linters#python#bandit#GetCommand	plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#GetCommand(buffer) abort$/;"	f
ale_linters#python#bandit#Handle	plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#Handle(buffer, lines) abort$/;"	f
ale_linters#python#jedils#GetExecutable	plugged/ale/ale_linters/python/jedils.vim	/^function! ale_linters#python#jedils#GetExecutable(buffer) abort$/;"	f
ale_linters#python#jedils#GetCommand	plugged/ale/ale_linters/python/jedils.vim	/^function! ale_linters#python#jedils#GetCommand(buffer) abort$/;"	f
UsingModule	plugged/ale/ale_linters/python/flakehell.vim	/^function! s:UsingModule(buffer) abort$/;"	f
ale_linters#python#flakehell#GetExecutable	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flakehell#RunWithVersionCheck	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#python#flakehell#GetCwd	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#GetCwd(buffer) abort$/;"	f
ale_linters#python#flakehell#GetCommand	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#GetCommand(buffer, version) abort$/;"	f
s:end_col_pattern_map	plugged/ale/ale_linters/python/flakehell.vim	/^let s:end_col_pattern_map = {$/;"	v
ale_linters#python#flakehell#Handle	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylint#GetExecutable	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylint#GetCwd	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetCwd(buffer) abort$/;"	f
ale_linters#python#pylint#GetCommand	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#pylint#Handle	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylama#GetExecutable	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylama#GetCwd	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetCwd(buffer) abort$/;"	f
ale_linters#python#pylama#GetCommand	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetCommand(buffer) abort$/;"	f
ale_linters#python#pylama#Handle	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylsp#GetExecutable	plugged/ale/ale_linters/python/pylsp.vim	/^function! ale_linters#python#pylsp#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylsp#GetCommand	plugged/ale/ale_linters/python/pylsp.vim	/^function! ale_linters#python#pylsp#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyre#GetExecutable	plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyre#GetCommand	plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyre#GetCwd	plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetCwd(buffer) abort$/;"	f
ale_linters#css#csslint#GetCommand	plugged/ale/ale_linters/css/csslint.vim	/^function! ale_linters#css#csslint#GetCommand(buffer) abort$/;"	f
ale_linters#css#stylelint#GetCommand	plugged/ale/ale_linters/css/stylelint.vim	/^function! ale_linters#css#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#clojure#clj_kondo#GetCommand	plugged/ale/ale_linters/clojure/clj_kondo.vim	/^function! ale_linters#clojure#clj_kondo#GetCommand(buffer) abort$/;"	f
ale_linters#clojure#clj_kondo#HandleCljKondoFormat	plugged/ale/ale_linters/clojure/clj_kondo.vim	/^function! ale_linters#clojure#clj_kondo#HandleCljKondoFormat(buffer, lines) abort$/;"	f
ale_linters#clojure#joker#HandleJokerFormat	plugged/ale/ale_linters/clojure/joker.vim	/^function! ale_linters#clojure#joker#HandleJokerFormat(buffer, lines) abort$/;"	f
ale_linters#less#lessc#GetCommand	plugged/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#GetCommand(buffer) abort$/;"	f
ale_linters#less#lessc#Handle	plugged/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#Handle(buffer, lines) abort$/;"	f
ale_linters#less#stylelint#GetCommand	plugged/ale/ale_linters/less/stylelint.vim	/^function! ale_linters#less#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#credo#Handle	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#credo#GetMode	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetMode() abort$/;"	f
ale_linters#elixir#credo#GetConfigFile	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetConfigFile() abort$/;"	f
ale_linters#elixir#credo#GetCommand	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#elixir_ls#GetExecutable	plugged/ale/ale_linters/elixir/elixir_ls.vim	/^function! ale_linters#elixir#elixir_ls#GetExecutable(buffer) abort$/;"	f
ale_linters#elixir#dogma#Handle	plugged/ale/ale_linters/elixir/dogma.vim	/^function! ale_linters#elixir#dogma#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dialyxir#Handle	plugged/ale/ale_linters/elixir/dialyxir.vim	/^function! ale_linters#elixir#dialyxir#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#mix#Handle	plugged/ale/ale_linters/elixir/mix.vim	/^function! ale_linters#elixir#mix#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#mix#GetCommand	plugged/ale/ale_linters/elixir/mix.vim	/^function! ale_linters#elixir#mix#GetCommand(buffer) abort$/;"	f
ale_linters#awk#gawk#GetCommand	plugged/ale/ale_linters/awk/gawk.vim	/^function! ale_linters#awk#gawk#GetCommand(buffer) abort$/;"	f
ale_linters#dafny#dafny#Handle	plugged/ale/ale_linters/dafny/dafny.vim	/^function! ale_linters#dafny#dafny#Handle(buffer, lines) abort$/;"	f
ale_linters#dafny#dafny#GetCommand	plugged/ale/ale_linters/dafny/dafny.vim	/^function! ale_linters#dafny#dafny#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#GetType	plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#GetType(type) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#Handle	plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#GetCommand	plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#Handle	plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#Handle(buffer, lines) abort$/;"	f
ale_linters#dockerfile#hadolint#GetExecutable	plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetExecutable(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#GetCommand	plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetCommand(buffer) abort$/;"	f
ale_linters#dart#language_server#GetProjectRoot	plugged/ale/ale_linters/dart/language_server.vim	/^function! ale_linters#dart#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#dart#dart_analyze#Handle	plugged/ale/ale_linters/dart/dart_analyze.vim	/^function! ale_linters#dart#dart_analyze#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#analysis_server#GetProjectRoot	plugged/ale/ale_linters/dart/analysis_server.vim	/^function! ale_linters#dart#analysis_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#dart#analysis_server#GetCommand	plugged/ale/ale_linters/dart/analysis_server.vim	/^function! ale_linters#dart#analysis_server#GetCommand(buffer) abort$/;"	f
ale_linters#dart#dartanalyzer#GetCommand	plugged/ale/ale_linters/dart/dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#GetCommand(buffer) abort$/;"	f
ale_linters#dart#dartanalyzer#Handle	plugged/ale/ale_linters/dart/dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#eruby#ruumba#GetCommand	plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#ruumba#Handle	plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#Handle(buffer, lines) abort$/;"	f
ale_linters#eruby#ruumba#GetType	plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#GetType(severity) abort$/;"	f
ale_linters#eruby#erubi#GetCommand	plugged/ale/ale_linters/eruby/erubi.vim	/^function! ale_linters#eruby#erubi#GetCommand(buffer, output, meta) abort$/;"	f
ale_linters#eruby#erb#GetCommand	plugged/ale/ale_linters/eruby/erb.vim	/^function! ale_linters#eruby#erb#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#erblint#GetCommand	plugged/ale/ale_linters/eruby/erblint.vim	/^function! ale_linters#eruby#erblint#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#erblint#Handle	plugged/ale/ale_linters/eruby/erblint.vim	/^function! ale_linters#eruby#erblint#Handle(buffer, lines) abort$/;"	f
ale_linters#eruby#erubis#GetCommand	plugged/ale/ale_linters/eruby/erubis.vim	/^function! ale_linters#eruby#erubis#GetCommand(buffer) abort$/;"	f
ale_linters#systemd#systemd_analyze#Handle	plugged/ale/ale_linters/systemd/systemd_analyze.vim	/^function! ale_linters#systemd#systemd_analyze#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#remark_lint#GetCommand	plugged/ale/ale_linters/markdown/remark_lint.vim	/^function! ale_linters#markdown#remark_lint#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#remark_lint#Handle	plugged/ale/ale_linters/markdown/remark_lint.vim	/^function! ale_linters#markdown#remark_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#mdl#GetExecutable	plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetExecutable(buffer) abort$/;"	f
ale_linters#markdown#mdl#GetCommand	plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#mdl#Handle	plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#markdownlint#GetCommand	plugged/ale/ale_linters/markdown/markdownlint.vim	/^function! ale_linters#markdown#markdownlint#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#vale#GetCommand	plugged/ale/ale_linters/markdown/vale.vim	/^function! ale_linters#markdown#vale#GetCommand(buffer) abort$/;"	f
ale_linters#chef#cookstyle#GetCommand	plugged/ale/ale_linters/chef/cookstyle.vim	/^function! ale_linters#chef#cookstyle#GetCommand(buffer) abort$/;"	f
ale_linters#chef#cookstyle#Handle	plugged/ale/ale_linters/chef/cookstyle.vim	/^function! ale_linters#chef#cookstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#chef#foodcritic#GetCommand	plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#GetCommand(buffer) abort$/;"	f
ale_linters#chef#foodcritic#Handle	plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#objcpp#clangd#GetCommand	plugged/ale/ale_linters/objcpp/clangd.vim	/^function! ale_linters#objcpp#clangd#GetCommand(buffer) abort$/;"	f
g:ale_objcpp_clang_options	plugged/ale/ale_linters/objcpp/clang.vim	/^    let g:ale_objcpp_clang_options = '-std=c++14 -Wall'$/;"	v
ale_linters#objcpp#clang#GetCommand	plugged/ale/ale_linters/objcpp/clang.vim	/^function! ale_linters#objcpp#clang#GetCommand(buffer) abort$/;"	f
ale_linters#cuda#nvcc#GetCommand	plugged/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#GetCommand(buffer) abort$/;"	f
ale_linters#cuda#nvcc#HandleNVCCFormat	plugged/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#HandleNVCCFormat(buffer, lines) abort$/;"	f
ale_linters#cuda#clangd#GetCommand	plugged/ale/ale_linters/cuda/clangd.vim	/^function! ale_linters#cuda#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#scss#sasslint#GetExecutable	plugged/ale/ale_linters/scss/sasslint.vim	/^function! ale_linters#scss#sasslint#GetExecutable(buffer) abort$/;"	f
ale_linters#scss#sasslint#GetCommand	plugged/ale/ale_linters/scss/sasslint.vim	/^function! ale_linters#scss#sasslint#GetCommand(buffer) abort$/;"	f
ale_linters#scss#scsslint#Handle	plugged/ale/ale_linters/scss/scsslint.vim	/^function! ale_linters#scss#scsslint#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#stylelint#GetCommand	plugged/ale/ale_linters/scss/stylelint.vim	/^function! ale_linters#scss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perl#GetCommand	plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#GetCommand(buffer) abort$/;"	f
s:begin_failed_skip_pattern	plugged/ale/ale_linters/perl/perl.vim	/^let s:begin_failed_skip_pattern = '\\v' . join([$/;"	v
ale_linters#perl#perl#Handle	plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perlcritic#GetProfile	plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetProfile(buffer) abort$/;"	f
ale_linters#perl#perlcritic#GetCommand	plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perlcritic#Handle	plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#standard#GetExecutable	plugged/ale/ale_linters/typescript/standard.vim	/^function! ale_linters#typescript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#typescript#standard#GetCommand	plugged/ale/ale_linters/typescript/standard.vim	/^function! ale_linters#typescript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#tslint#Handle	plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#tslint#GetCommand	plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#typecheck#Handle	plugged/ale/ale_linters/typescript/typecheck.vim	/^function! ale_linters#typescript#typecheck#Handle(buffer, lines) abort$/;"	f
ale_linters#stylus#stylelint#GetCommand	plugged/ale/ale_linters/stylus/stylelint.vim	/^function! ale_linters#stylus#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#vue#volar#GetProjectRoot	plugged/ale/ale_linters/vue/volar.vim	/^function! ale_linters#vue#volar#GetProjectRoot(buffer) abort$/;"	f
ale_linters#vue#volar#GetInitializationOptions	plugged/ale/ale_linters/vue/volar.vim	/^function! ale_linters#vue#volar#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#vue#vls#GetProjectRoot	plugged/ale/ale_linters/vue/vls.vim	/^function! ale_linters#vue#vls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#rls#GetCommand	plugged/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetCommand(buffer) abort$/;"	f
ale_linters#rust#rls#GetProjectRoot	plugged/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#analyzer#GetCommand	plugged/ale/ale_linters/rust/analyzer.vim	/^function! ale_linters#rust#analyzer#GetCommand(buffer) abort$/;"	f
ale_linters#rust#analyzer#GetProjectRoot	plugged/ale/ale_linters/rust/analyzer.vim	/^function! ale_linters#rust#analyzer#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#cargo#GetCargoExecutable	plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCargoExecutable(bufnr) abort$/;"	f
ale_linters#rust#cargo#GetCwd	plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCwd(buffer) abort$/;"	f
ale_linters#rust#cargo#GetCommand	plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCommand(buffer, version) abort$/;"	f
ale_linters#rust#rustc#RustcCommand	plugged/ale/ale_linters/rust/rustc.vim	/^function! ale_linters#rust#rustc#RustcCommand(buffer) abort$/;"	f
ale_linters#rst#rstcheck#Handle	plugged/ale/ale_linters/rst/rstcheck.vim	/^function! ale_linters#rst#rstcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcsc#GetCwd	plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#GetCwd(buffer) abort$/;"	f
ale_linters#cs#mcsc#GetCommand	plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcsc#Handle	plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#csc#GetCwd	plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#GetCwd(buffer) abort$/;"	f
ale_linters#cs#csc#GetCommand	plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#csc#Handle	plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#Handle(buffer, lines) abort$/;"	f
g:ale_cs_mcs_options	plugged/ale/ale_linters/cs/mcs.vim	/^let g:ale_cs_mcs_options = get(g:, 'ale_cs_mcs_options', '')$/;"	v
ale_linters#cs#mcs#GetCommand	plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcs#Handle	plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#Handle(buffer, lines) abort$/;"	f
ale_linters#fuse#fusionlint#GetCommand	plugged/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#GetCommand(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#Handle	plugged/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#Handle(buffer, lines) abort$/;"	f
ale_linters#cucumber#cucumber#GetCommand	plugged/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#GetCommand(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#Handle	plugged/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#Handle(buffer, lines) abort$/;"	f
FindConfig	plugged/ale/ale_linters/pug/puglint.vim	/^function! s:FindConfig(buffer) abort$/;"	f
ale_linters#pug#puglint#GetCommand	plugged/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#Handle	plugged/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#Handle(buffer, lines) abort$/;"	f
ale_linters#purescript#ls#GetExecutable	plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#GetExecutable(buffer) abort$/;"	f
ale_linters#purescript#ls#GetCommand	plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#GetCommand(buffer) abort$/;"	f
ale_linters#purescript#ls#FindProjectRoot	plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#erlang#syntaxerl#RunHelpCommand	plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#RunHelpCommand(buffer) abort$/;"	f
ale_linters#erlang#syntaxerl#GetCommand	plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#GetCommand(buffer, output, meta) abort$/;"	f
ale_linters#erlang#syntaxerl#Handle	plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#Handle(buffer, lines) abort$/;"	f
g:ale_erlang_dialyzer_executable	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_executable =$/;"	v
g:ale_erlang_dialyzer_options	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_options =$/;"	v
g:ale_erlang_dialyzer_plt_file	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_plt_file =$/;"	v
g:ale_erlang_dialyzer_rebar3_profile	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_rebar3_profile =$/;"	v
ale_linters#erlang#dialyzer#GetRebar3Profile	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetRebar3Profile(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#FindPlt	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#FindPlt(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetPlt	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetPlt(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetExecutable	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetExecutable(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetCommand	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#Handle	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#Handle(buffer, lines) abort$/;"	f
g:ale_erlang_erlc_executable	plugged/ale/ale_linters/erlang/erlc.vim	/^let g:ale_erlang_erlc_executable = get(g:, 'ale_erlang_erlc_executable', 'erlc')$/;"	v
g:ale_erlang_erlc_options	plugged/ale/ale_linters/erlang/erlc.vim	/^let g:ale_erlang_erlc_options = get(g:, 'ale_erlang_erlc_options', '')$/;"	v
ale_linters#erlang#erlc#GetExecutable	plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#GetExecutable(buffer) abort$/;"	f
ale_linters#erlang#erlc#GetCommand	plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#erlc#Handle	plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#elvis#Handle	plugged/ale/ale_linters/erlang/elvis.vim	/^function! ale_linters#erlang#elvis#Handle(buffer, lines) abort$/;"	f
AbbreviateMessage	plugged/ale/ale_linters/erlang/elvis.vim	/^function! s:AbbreviateMessage(text) abort$/;"	f
GetCommand	plugged/ale/ale_linters/erlang/elvis.vim	/^function! s:GetCommand(buffer) abort$/;"	f
ale_linters#llvm#llc#HandleErrors	plugged/ale/ale_linters/llvm/llc.vim	/^function! ale_linters#llvm#llc#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#spec#rpmlint#GetCommand	plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#GetCommand(buffer, version) abort$/;"	f
ale_linters#spec#rpmlint#Handle	plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#Handle(buffer, lines) abort$/;"	f
ale_linters#r#languageserver#GetCommand	plugged/ale/ale_linters/r/languageserver.vim	/^function! ale_linters#r#languageserver#GetCommand(buffer) abort$/;"	f
ale_linters#r#languageserver#GetProjectRoot	plugged/ale/ale_linters/r/languageserver.vim	/^function! ale_linters#r#languageserver#GetProjectRoot(buffer) abort$/;"	f
g:ale_r_lintr_options	plugged/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_options = get(g:, 'ale_r_lintr_options', 'with_defaults()')$/;"	v
g:ale_r_lintr_lint_package	plugged/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_lint_package = get(g:, 'ale_r_lintr_lint_package', 0)$/;"	v
ale_linters#r#lintr#GetCommand	plugged/ale/ale_linters/r/lintr.vim	/^function! ale_linters#r#lintr#GetCommand(buffer) abort$/;"	f
ale_linters#nasm#nasm#GetCommand	plugged/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#GetCommand(buffer) abort$/;"	f
ale_linters#nasm#nasm#Handle	plugged/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#Handle(buffer, lines) abort$/;"	f
ale_linters#hack#hhast#GetProjectRoot	plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetProjectRoot(buffer) abort$/;"	f
ale_linters#hack#hhast#GetExecutable	plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetExecutable(buffer) abort$/;"	f
ale_linters#hack#hhast#GetInitializationOptions	plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#hack#hack#GetProjectRoot	plugged/ale/ale_linters/hack/hack.vim	/^function! ale_linters#hack#hack#GetProjectRoot(buffer) abort$/;"	f
ale_linters#hack#hack#GetExecutable	plugged/ale/ale_linters/hack/hack.vim	/^function! ale_linters#hack#hack#GetExecutable(buffer) abort$/;"	f
ale_linters#java#javalsp#Executable	plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Executable(buffer) abort$/;"	f
ale_linters#java#javalsp#Config	plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Config(buffer) abort$/;"	f
ale_linters#java#javalsp#Command	plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Command(buffer) abort$/;"	f
ale_linters#java#pmd#Handle	plugged/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#Handle(buffer, lines) abort$/;"	f
ale_linters#java#pmd#GetCommand	plugged/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#GetCommand(buffer) abort$/;"	f
g:ale_java_pmd_options	plugged/ale/ale_linters/java/pmd.vim	/^    let g:ale_java_pmd_options = '-R category\/java\/bestpractices.xml'$/;"	v
s:classpath_sep	plugged/ale/ale_linters/java/javac.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
ale_linters#java#javac#RunWithImportPaths	plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#RunWithImportPaths(buffer) abort$/;"	f
BuildClassPathOption	plugged/ale/ale_linters/java/javac.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
ale_linters#java#javac#GetCommand	plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#GetCommand(buffer, import_paths, meta) abort$/;"	f
ale_linters#java#javac#Handle	plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#Handle(buffer, lines) abort$/;"	f
s:version_cache	plugged/ale/ale_linters/java/eclipselsp.vim	/^let s:version_cache = {}$/;"	v
ale_linters#java#eclipselsp#Executable	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Executable(buffer) abort$/;"	f
ale_linters#java#eclipselsp#TargetPath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#TargetPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#JarPath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#JarPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#ConfigurationPath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#ConfigurationPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#VersionCheck	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#VersionCheck(version_lines) abort$/;"	f
GetVersion	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! s:GetVersion(executable, version_lines) abort$/;"	f
ale_linters#java#eclipselsp#CommandWithVersion	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#CommandWithVersion(buffer, version_lines, meta) abort$/;"	f
ale_linters#java#eclipselsp#WorkspacePath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#WorkspacePath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#Javaagent	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Javaagent(buffer) abort$/;"	f
ale_linters#java#eclipselsp#Command	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Command(buffer, version) abort$/;"	f
ale_linters#java#eclipselsp#RunWithVersionCheck	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#java#checkstyle#Handle	plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#Handle(buffer, lines) abort$/;"	f
GetConfig	plugged/ale/ale_linters/java/checkstyle.vim	/^function! s:GetConfig(buffer, config) abort$/;"	f
ale_linters#java#checkstyle#GetCommand	plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#GetCommand(buffer) abort$/;"	f
s:pattern	plugged/ale/ale_linters/desktop/desktop_file_validate.vim	/^let s:pattern = '\\v^(.+): ([a-z]+): (.+)$'$/;"	v
ale_linters#desktop#desktop_file_validate#Handle	plugged/ale/ale_linters/desktop/desktop_file_validate.vim	/^function! ale_linters#desktop#desktop_file_validate#Handle(buffer, lines) abort$/;"	f
elm_ls#GetRootDir	plugged/ale/ale_linters/elm/elm_ls.vim	/^function! elm_ls#GetRootDir(buffer) abort$/;"	f
elm_ls#GetOptions	plugged/ale/ale_linters/elm/elm_ls.vim	/^function! elm_ls#GetOptions(buffer) abort$/;"	f
ale_linters#elm#make#Handle	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#HandleElm019Line	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#HandleElm019Line(line, output) abort$/;"	f
ale_linters#elm#make#HandleElm018Line	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#HandleElm018Line(line, output) abort$/;"	f
ale_linters#elm#make#FileIsBuffer	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#FileIsBuffer(path) abort$/;"	f
ale_linters#elm#make#ParseMessage	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#ParseMessage(message) abort$/;"	f
ale_linters#elm#make#ParseMessageItem	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#ParseMessageItem(item) abort$/;"	f
ale_linters#elm#make#GetPackageFile	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetPackageFile(buffer) abort$/;"	f
ale_linters#elm#make#IsVersionGte19	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#IsVersionGte19(buffer) abort$/;"	f
ale_linters#elm#make#GetRootDir	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetRootDir(buffer) abort$/;"	f
ale_linters#elm#make#IsTest	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#IsTest(buffer) abort$/;"	f
ale_linters#elm#make#GetCwd	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetCwd(buffer) abort$/;"	f
ale_linters#elm#make#GetCommand	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetCommand(buffer) abort$/;"	f
ale_linters#elm#make#GetExecutable	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetExecutable(buffer) abort$/;"	f
g:ale_html_tidy_executable	plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_executable = get(g:, 'ale_html_tidy_executable', 'tidy')$/;"	v
g:ale_html_tidy_options	plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_options = get(g:, 'ale_html_tidy_options', '-q -e -language en')$/;"	v
ale_linters#html#tidy#GetCommand	plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#GetCommand(buffer) abort$/;"	f
ale_linters#html#tidy#Handle	plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#Handle(buffer, lines) abort$/;"	f
ale_linters#html#htmlhint#GetCommand	plugged/ale/ale_linters/html/htmlhint.vim	/^function! ale_linters#html#htmlhint#GetCommand(buffer) abort$/;"	f
ale_linters#html#angular#GetProjectRoot	plugged/ale/ale_linters/html/angular.vim	/^function! ale_linters#html#angular#GetProjectRoot(buffer) abort$/;"	f
ale_linters#html#angular#GetExecutable	plugged/ale/ale_linters/html/angular.vim	/^function! ale_linters#html#angular#GetExecutable(buffer) abort$/;"	f
ale_linters#html#angular#GetCommand	plugged/ale/ale_linters/html/angular.vim	/^function! ale_linters#html#angular#GetCommand(buffer) abort$/;"	f
ale_linters#html#stylelint#GetExecutable	plugged/ale/ale_linters/html/stylelint.vim	/^function! ale_linters#html#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#html#stylelint#GetCommand	plugged/ale/ale_linters/html/stylelint.vim	/^function! ale_linters#html#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#kotlin#languageserver#GetProjectRoot	plugged/ale/ale_linters/kotlin/languageserver.vim	/^function! ale_linters#kotlin#languageserver#GetProjectRoot(buffer) abort$/;"	f
g:ale_kotlin_kotlinc_options	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_options = get(g:, 'ale_kotlin_kotlinc_options', '')$/;"	v
g:ale_kotlin_kotlinc_enable_config	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_enable_config = get(g:, 'ale_kotlin_kotlinc_enable_config', 0)$/;"	v
g:ale_kotlin_kotlinc_config_file	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_config_file = get(g:, 'ale_kotlin_kotlinc_config_file', '.ale_kotlinc_config')$/;"	v
g:ale_kotlin_kotlinc_classpath	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_classpath = get(g:, 'ale_kotlin_kotlinc_classpath', '')$/;"	v
g:ale_kotlin_kotlinc_sourcepath	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_sourcepath = get(g:, 'ale_kotlin_kotlinc_sourcepath', '')$/;"	v
g:ale_kotlin_kotlinc_use_module_file	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_use_module_file = get(g:, 'ale_kotlin_kotlinc_use_module_file', 0)$/;"	v
g:ale_kotlin_kotlinc_module_filename	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_module_filename = get(g:, 'ale_kotlin_kotlinc_module_filename', 'module.xml')$/;"	v
s:classpath_sep	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
ale_linters#kotlin#kotlinc#RunWithImportPaths	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#RunWithImportPaths(buffer) abort$/;"	f
BuildClassPathOption	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
ale_linters#kotlin#kotlinc#GetCommand	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetCommand(buffer, import_paths, meta) abort$/;"	f
ale_linters#kotlin#kotlinc#Handle	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#Handle(buffer, lines) abort$/;"	f
ale_linters#crystal#ameba#GetCommand	plugged/ale/ale_linters/crystal/ameba.vim	/^function! ale_linters#crystal#ameba#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#ameba#HandleAmebaOutput	plugged/ale/ale_linters/crystal/ameba.vim	/^function! ale_linters#crystal#ameba#HandleAmebaOutput(buffer, lines) abort$/;"	f
ale_linters#crystal#crystal#Handle	plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#Handle(buffer, lines) abort$/;"	f
ale_linters#crystal#crystal#GetCommand	plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#GetCommand(buffer) abort$/;"	f
ale_linters#cypher#cypher_lint#Handle	plugged/ale/ale_linters/cypher/cypher_lint.vim	/^function! ale_linters#cypher#cypher_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#hdevtools#GetCommand	plugged/ale/ale_linters/haskell/hdevtools.vim	/^function! ale_linters#haskell#hdevtools#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#ghc#GetCommand	plugged/ale/ale_linters/haskell/ghc.vim	/^function! ale_linters#haskell#ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#ghc_mod#GetCommand	plugged/ale/ale_linters/haskell/ghc_mod.vim	/^function! ale_linters#haskell#ghc_mod#GetCommand (buffer) abort$/;"	f
ale_linters#haskell#hls#FindRootFile	plugged/ale/ale_linters/haskell/hls.vim	/^function! ale_linters#haskell#hls#FindRootFile(buffer) abort$/;"	f
ale_linters#haskell#hls#GetProjectRoot	plugged/ale/ale_linters/haskell/hls.vim	/^function! ale_linters#haskell#hls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haskell#hls#GetCommand	plugged/ale/ale_linters/haskell/hls.vim	/^function! ale_linters#haskell#hls#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hlint#Handle	plugged/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#hlint#GetCommand	plugged/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#stack_build#GetCommand	plugged/ale/ale_linters/haskell/stack_build.vim	/^function! ale_linters#haskell#stack_build#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#stack_ghc#GetCommand	plugged/ale/ale_linters/haskell/stack_ghc.vim	/^function! ale_linters#haskell#stack_ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hie#GetProjectRoot	plugged/ale/ale_linters/haskell/hie.vim	/^function! ale_linters#haskell#hie#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haskell#hie#GetCommand	plugged/ale/ale_linters/haskell/hie.vim	/^function! ale_linters#haskell#hie#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#cabal_ghc#GetCommand	plugged/ale/ale_linters/haskell/cabal_ghc.vim	/^function! ale_linters#haskell#cabal_ghc#GetCommand(buffer) abort$/;"	f
g:ale_php_phpmd_executable	plugged/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_executable = get(g:, 'ale_php_phpmd_executable', 'phpmd')$/;"	v
g:ale_php_phpmd_ruleset	plugged/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_ruleset = get(g:, 'ale_php_phpmd_ruleset', 'cleancode,codesize,controversial,design,naming,unusedcode')$/;"	v
ale_linters#php#phpmd#GetCommand	plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpmd#Handle	plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#Handle(buffer, lines) abort$/;"	f
g:ale_php_phpstan_executable	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_executable = get(g:, 'ale_php_phpstan_executable', 'phpstan')$/;"	v
g:ale_php_phpstan_level	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_level = get(g:, 'ale_php_phpstan_level', '')$/;"	v
g:ale_php_phpstan_configuration	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_configuration = get(g:, 'ale_php_phpstan_configuration', '')$/;"	v
g:ale_php_phpstan_autoload	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_autoload = get(g:, 'ale_php_phpstan_autoload', '')$/;"	v
g:ale_php_phpstan_memory_limit	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_memory_limit = get(g:, 'ale_php_phpstan_memory_limit', '')$/;"	v
ale_linters#php#phpstan#GetCommand	plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#GetCommand(buffer, version) abort$/;"	f
ale_linters#php#phpstan#Handle	plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#tlint#GetProjectRoot	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#tlint#GetExecutable	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#GetExecutable(buffer) abort$/;"	f
ale_linters#php#tlint#GetCommand	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#GetCommand(buffer) abort$/;"	f
ale_linters#php#tlint#Handle	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#Handle(buffer, lines) abort$/;"	f
ale_linters#php#langserver#GetProjectRoot	plugged/ale/ale_linters/php/langserver.vim	/^function! ale_linters#php#langserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#psalm#GetProjectRoot	plugged/ale/ale_linters/php/psalm.vim	/^function! ale_linters#php#psalm#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#psalm#GetCommand	plugged/ale/ale_linters/php/psalm.vim	/^function! ale_linters#php#psalm#GetCommand(buffer) abort$/;"	f
ale_linters#php#php#Handle	plugged/ale/ale_linters/php/php.vim	/^function! ale_linters#php#php#Handle(buffer, lines) abort$/;"	f
g:ale_php_phan_minimum_severity	plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_minimum_severity = get(g:, 'ale_php_phan_minimum_severity', 0)$/;"	v
g:ale_php_phan_executable	plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_executable = get(g:, 'ale_php_phan_executable', 'phan')$/;"	v
g:ale_php_phan_use_client	plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_use_client = get(g:, 'ale_php_phan_use_client', 0)$/;"	v
ale_linters#php#phan#GetExecutable	plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#GetExecutable(buffer) abort$/;"	f
ale_linters#php#phan#GetCommand	plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#GetCommand(buffer) abort$/;"	f
ale_linters#php#phan#Handle	plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#intelephense#GetProjectRoot	plugged/ale/ale_linters/php/intelephense.vim	/^function! ale_linters#php#intelephense#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#intelephense#GetInitializationOptions	plugged/ale/ale_linters/php/intelephense.vim	/^function! ale_linters#php#intelephense#GetInitializationOptions(buffer) abort$/;"	f
g:ale_php_phpcs_standard	plugged/ale/ale_linters/php/phpcs.vim	/^let g:ale_php_phpcs_standard = get(g:, 'ale_php_phpcs_standard', '')$/;"	v
ale_linters#php#phpcs#GetCommand	plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpcs#Handle	plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpactor#GetProjectRoot	plugged/ale/ale_linters/php/phpactor.vim	/^function! ale_linters#php#phpactor#GetProjectRoot(buffer) abort$/;"	f
ale_linters#openapi#ibm_validator#GetCommand	plugged/ale/ale_linters/openapi/ibm_validator.vim	/^function! ale_linters#openapi#ibm_validator#GetCommand(buffer) abort$/;"	f
ale_linters#openapi#ibm_validator#Handle	plugged/ale/ale_linters/openapi/ibm_validator.vim	/^function! ale_linters#openapi#ibm_validator#Handle(buffer, lines) abort$/;"	f
ale_linters#robot#rflint#GetExecutable	plugged/ale/ale_linters/robot/rflint.vim	/^function! ale_linters#robot#rflint#GetExecutable(buffer) abort$/;"	f
ale_linters#robot#rflint#GetCommand	plugged/ale/ale_linters/robot/rflint.vim	/^function! ale_linters#robot#rflint#GetCommand(buffer) abort$/;"	f
ale_linters#robot#rflint#Handle	plugged/ale/ale_linters/robot/rflint.vim	/^function! ale_linters#robot#rflint#Handle(buffer, lines) abort$/;"	f
ale_linters#lua#luac#Handle	plugged/ale/ale_linters/lua/luac.vim	/^function! ale_linters#lua#luac#Handle(buffer, lines) abort$/;"	f
ale_linters#lua#luacheck#GetCommand	plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#GetCommand(buffer) abort$/;"	f
ale_linters#lua#luacheck#Handle	plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#Handle(buffer, lines) abort$/;"	f
g:ale_xml_xmllint_executable	plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_executable = get(g:, 'ale_xml_xmllint_executable', 'xmllint')$/;"	v
g:ale_xml_xmllint_options	plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_options = get(g:, 'ale_xml_xmllint_options', '')$/;"	v
ale_linters#xml#xmllint#GetCommand	plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#GetCommand(buffer) abort$/;"	f
ale_linters#xml#xmllint#Handle	plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#solidity#solc#Handle	plugged/ale/ale_linters/solidity/solc.vim	/^function! ale_linters#solidity#solc#Handle(buffer, lines) abort$/;"	f
ale_linters#solidity#solc#GetCommand	plugged/ale/ale_linters/solidity/solc.vim	/^function! ale_linters#solidity#solc#GetCommand(buffer) abort$/;"	f
ale_linters#thrift#thrift#GetCommand	plugged/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#GetCommand(buffer) abort$/;"	f
ale_linters#thrift#thrift#Handle	plugged/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#Handle(buffer, lines) abort$/;"	f
ale_linters#thrift#thriftcheck#GetCommand	plugged/ale/ale_linters/thrift/thriftcheck.vim	/^function! ale_linters#thrift#thriftcheck#GetCommand(buffer) abort$/;"	f
ale_linters#thrift#thriftcheck#Handle	plugged/ale/ale_linters/thrift/thriftcheck.vim	/^function! ale_linters#thrift#thriftcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslls#GetCommand	plugged/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslls#GetProjectRoot	plugged/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#glsl#glslang#GetCommand	plugged/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslang#Handle	plugged/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#Handle(buffer, lines) abort$/;"	f
ale_linters#ansible#ansible_lint#GetExecutable	plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#GetExecutable(buffer) abort$/;"	f
ale_linters#ansible#ansible_lint#Handle	plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#Handle(buffer, version, lines) abort$/;"	f
ale_linters#ansible#ansible_lint#GetCommand	plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#GetCommand(buffer, version) abort$/;"	f
ale_linters#powershell#powershell#GetExecutable	plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#GetExecutable(buffer) abort$/;"	f
ale_linters#powershell#powershell#GetCommand	plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#powershell#Handle	plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#Handle(buffer, lines) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#GetExecutable	plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#GetExecutable(buffer) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#GetCommand	plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#Handle	plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#language_server#GetExecutable	plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#language_server#GetCommand	plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetCommand(buffer) abort$/;"	f
ale_linters#sh#language_server#GetProjectRoot	plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#sh#bashate#GetExecutable	plugged/ale/ale_linters/sh/bashate.vim	/^function! ale_linters#sh#bashate#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#bashate#GetCommand	plugged/ale/ale_linters/sh/bashate.vim	/^function! ale_linters#sh#bashate#GetCommand(buffer) abort$/;"	f
ale_linters#sh#bashate#Handle	plugged/ale/ale_linters/sh/bashate.vim	/^function! ale_linters#sh#bashate#Handle(buffer, lines) abort$/;"	f
g:ale_sh_shell_default_shell	plugged/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = g:ale_linters_sh_shell_default_shell$/;"	v
g:ale_sh_shell_default_shell	plugged/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = fnamemodify($SHELL, ':t')$/;"	v
g:ale_sh_shell_default_shell	plugged/ale/ale_linters/sh/shell.vim	/^        let g:ale_sh_shell_default_shell = 'bash'$/;"	v
ale_linters#sh#shell#GetExecutable	plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shell#GetCommand	plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetCommand(buffer) abort$/;"	f
ale_linters#sh#shell#Handle	plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#Handle(buffer, lines) abort$/;"	f
ale_linters#salt#salt_lint#GetCommand	plugged/ale/ale_linters/salt/salt_lint.vim	/^function! ale_linters#salt#salt_lint#GetCommand(buffer) abort$/;"	f
ale_linters#salt#salt_lint#Handle	plugged/ale/ale_linters/salt/salt_lint.vim	/^function! ale_linters#salt#salt_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#xvhdl#GetCommand	plugged/ale/ale_linters/vhdl/xvhdl.vim	/^function! ale_linters#vhdl#xvhdl#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#xvhdl#Handle	plugged/ale/ale_linters/vhdl/xvhdl.vim	/^function! ale_linters#vhdl#xvhdl#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#ghdl#GetCommand	plugged/ale/ale_linters/vhdl/ghdl.vim	/^function! ale_linters#vhdl#ghdl#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#ghdl#Handle	plugged/ale/ale_linters/vhdl/ghdl.vim	/^function! ale_linters#vhdl#ghdl#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#vcom#GetCommand	plugged/ale/ale_linters/vhdl/vcom.vim	/^function! ale_linters#vhdl#vcom#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#vcom#Handle	plugged/ale/ale_linters/vhdl/vcom.vim	/^function! ale_linters#vhdl#vcom#Handle(buffer, lines) abort$/;"	f
ale_linters#tcl#nagelfar#GetCommand	plugged/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#GetCommand(buffer) abort$/;"	f
ale_linters#tcl#nagelfar#Handle	plugged/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#Handle(buffer, lines) abort$/;"	f
g:ale_perl6_perl6_executable	plugged/ale/ale_linters/perl6/perl6.vim	/^let g:ale_perl6_perl6_executable =$/;"	v
g:ale_perl6_perl6_options	plugged/ale/ale_linters/perl6/perl6.vim	/^let g:ale_perl6_perl6_options =$/;"	v
$PERL6_EXCEPTIONS_HANDLER	plugged/ale/ale_linters/perl6/perl6.vim	/^let $PERL6_EXCEPTIONS_HANDLER = 'JSON'$/;"	v
$RAKUDO_ERROR_COLOR	plugged/ale/ale_linters/perl6/perl6.vim	/^let $RAKUDO_ERROR_COLOR = 0$/;"	v
ale_linters#perl6#perl6#GetExecutable	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#GetExecutable(buffer) abort$/;"	f
ale_linters#perl6#perl6#GetCommand	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#GetCommand(buffer) abort$/;"	f
ale_linters#perl6#perl6#ExtractError	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#ExtractError(dict, item, type, buffer) abort$/;"	f
ale_linters#perl6#perl6#Handle	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#Handle(buffer, lines) abort$/;"	f
s:pattern	plugged/ale/ale_linters/json/jq.vim	/^let s:pattern = '^parse error: \\(.\\+\\) at line \\(\\d\\+\\), column \\(\\d\\+\\)$'$/;"	v
ale_linters#json#jq#Handle	plugged/ale/ale_linters/json/jq.vim	/^function! ale_linters#json#jq#Handle(buffer, lines) abort$/;"	f
ale_linters#json#jsonlint#GetExecutable	plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#GetExecutable(buffer) abort$/;"	f
ale_linters#json#jsonlint#GetCommand	plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#GetCommand(buffer) abort$/;"	f
ale_linters#json#jsonlint#Handle	plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#Handle(buffer, lines) abort$/;"	f
ale_linters#po#msgfmt#Handle	plugged/ale/ale_linters/po/msgfmt.vim	/^function! ale_linters#po#msgfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#avra#avra#GetCommand	plugged/ale/ale_linters/avra/avra.vim	/^function! ale_linters#avra#avra#GetCommand(buffer) abort$/;"	f
ale_linters#avra#avra#Handle	plugged/ale/ale_linters/avra/avra.vim	/^function! ale_linters#avra#avra#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#iverilog#GetCommand	plugged/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#iverilog#Handle	plugged/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#yosys#GetCommand	plugged/ale/ale_linters/verilog/yosys.vim	/^function! ale_linters#verilog#yosys#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#yosys#Handle	plugged/ale/ale_linters/verilog/yosys.vim	/^function! ale_linters#verilog#yosys#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#vlog#GetCommand	plugged/ale/ale_linters/verilog/vlog.vim	/^function! ale_linters#verilog#vlog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#vlog#Handle	plugged/ale/ale_linters/verilog/vlog.vim	/^function! ale_linters#verilog#vlog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#xvlog#GetCommand	plugged/ale/ale_linters/verilog/xvlog.vim	/^function! ale_linters#verilog#xvlog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#xvlog#Handle	plugged/ale/ale_linters/verilog/xvlog.vim	/^function! ale_linters#verilog#xvlog#Handle(buffer, lines) abort$/;"	f
g:ale_verilog_verilator_options	plugged/ale/ale_linters/verilog/verilator.vim	/^    let g:ale_verilog_verilator_options = ''$/;"	v
ale_linters#verilog#verilator#GetCommand	plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#verilator#Handle	plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#Handle(buffer, lines) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetExecutable	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetExecutable(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetCommand	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetCommand(buffer, version) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetCommandWithVersionCheck	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetCommandWithVersionCheck(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#Handle	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#Handle(buffer, lines) abort$/;"	f
ale_linters#scala#metals#GetProjectRoot	plugged/ale/ale_linters/scala/metals.vim	/^function! ale_linters#scala#metals#GetProjectRoot(buffer) abort$/;"	f
ale_linters#scala#metals#GetCommand	plugged/ale/ale_linters/scala/metals.vim	/^function! ale_linters#scala#metals#GetCommand(buffer) abort$/;"	f
ale_linters#scala#scalastyle#Handle	plugged/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#Handle(buffer, lines) abort$/;"	f
ale_linters#scala#scalastyle#GetCommand	plugged/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#GetCommand(buffer) abort$/;"	f
IsSbt	plugged/ale/ale_linters/scala/scalac.vim	/^function! s:IsSbt(buffer) abort$/;"	f
IsSbt	plugged/ale/ale_linters/scala/fsc.vim	/^function! s:IsSbt(buffer) abort$/;"	f
ale_linters#scala#sbtserver#GetProjectRoot	plugged/ale/ale_linters/scala/sbtserver.vim	/^function! ale_linters#scala#sbtserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#scala#sbtserver#GetAddress	plugged/ale/ale_linters/scala/sbtserver.vim	/^function! ale_linters#scala#sbtserver#GetAddress(buffer) abort$/;"	f
ale_linters#vala#vala_lint#GetExecutable	plugged/ale/ale_linters/vala/vala_lint.vim	/^function! ale_linters#vala#vala_lint#GetExecutable(buffer) abort$/;"	f
ale_linters#vala#vala_lint#GetCommand	plugged/ale/ale_linters/vala/vala_lint.vim	/^function! ale_linters#vala#vala_lint#GetCommand(buffer) abort$/;"	f
ale_linters#vala#vala_lint#Handle	plugged/ale/ale_linters/vala/vala_lint.vim	/^function! ale_linters#vala#vala_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#cpp#clazy#GetCommand	plugged/ale/ale_linters/cpp/clazy.vim	/^function! ale_linters#cpp#clazy#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#flawfinder#GetCommand	plugged/ale/ale_linters/cpp/flawfinder.vim	/^function! ale_linters#cpp#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangtidy#GetCommand	plugged/ale/ale_linters/cpp/clangtidy.vim	/^function! ale_linters#cpp#clangtidy#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#clangcheck#GetCommand	plugged/ale/ale_linters/cpp/clangcheck.vim	/^function! ale_linters#cpp#clangcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cppcheck#GetCommand	plugged/ale/ale_linters/cpp/cppcheck.vim	/^function! ale_linters#cpp#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cc#GetExecutable	plugged/ale/ale_linters/cpp/cc.vim	/^function! ale_linters#cpp#cc#GetExecutable(buffer) abort$/;"	f
ale_linters#cpp#cc#GetCommand	plugged/ale/ale_linters/cpp/cc.vim	/^function! ale_linters#cpp#cc#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#cquery#GetProjectRoot	plugged/ale/ale_linters/cpp/cquery.vim	/^function! ale_linters#cpp#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#cpp#cquery#GetInitializationOptions	plugged/ale/ale_linters/cpp/cquery.vim	/^function! ale_linters#cpp#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#cpp#cpplint#GetCommand	plugged/ale/ale_linters/cpp/cpplint.vim	/^function! ale_linters#cpp#cpplint#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangd#GetCommand	plugged/ale/ale_linters/cpp/clangd.vim	/^function! ale_linters#cpp#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#swift#swiftlint#GetExecutable	plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#GetExecutable(buffer) abort$/;"	f
ale_linters#swift#swiftlint#GetCommand	plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#GetCommand(buffer) abort$/;"	f
ale_linters#swift#swiftlint#Handle	plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#Handle(buffer, lines) abort$/;"	f
ale_linters#swift#appleswiftformat#GetLinterCommand	plugged/ale/ale_linters/swift/appleswiftformat.vim	/^function! ale_linters#swift#appleswiftformat#GetLinterCommand(buffer) abort$/;"	f
ale_linters#swift#appleswiftformat#Handle	plugged/ale/ale_linters/swift/appleswiftformat.vim	/^function! ale_linters#swift#appleswiftformat#Handle(buffer, lines) abort$/;"	f
ale_linters#make#checkmake#Handle	plugged/ale/ale_linters/make/checkmake.vim	/^function! ale_linters#make#checkmake#Handle(buffer, lines) abort$/;"	f
ale_linters#matlab#mlint#Handle	plugged/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#Handle(buffer, lines) abort$/;"	f
ale_linters#jsonnet#jsonnet_lint#GetCommand	plugged/ale/ale_linters/jsonnet/jsonnet_lint.vim	/^function! ale_linters#jsonnet#jsonnet_lint#GetCommand(buffer) abort$/;"	f
ale_linters#jsonnet#jsonnet_lint#Handle	plugged/ale/ale_linters/jsonnet/jsonnet_lint.vim	/^function! ale_linters#jsonnet#jsonnet_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#jsonnet#jsonnetfmt#GetCommand	plugged/ale/ale_linters/jsonnet/jsonnetfmt.vim	/^function! ale_linters#jsonnet#jsonnetfmt#GetCommand(buffer) abort$/;"	f
ale_linters#jsonnet#jsonnetfmt#Handle	plugged/ale/ale_linters/jsonnet/jsonnetfmt.vim	/^function! ale_linters#jsonnet#jsonnetfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#zeek#zeek#HandleErrors	plugged/ale/ale_linters/zeek/zeek.vim	/^function! ale_linters#zeek#zeek#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#ispc#ispc#GetCommand	plugged/ale/ale_linters/ispc/ispc.vim	/^function! ale_linters#ispc#ispc#GetCommand(buffer) abort$/;"	f
ale_linters#ispc#ispc#Handle	plugged/ale/ale_linters/ispc/ispc.vim	/^function! ale_linters#ispc#ispc#Handle(buffer, lines) abort$/;"	f
ale_linters#coffee#coffee#GetExecutable	plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetCommand	plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetExecutable	plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetCommand	plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#Handle	plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#Handle(buffer, lines) abort$/;"	f
ale_linters#bib#bibclean#GetCommand	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#GetCommand(buffer) abort$/;"	f
ale_linters#bib#bibclean#get_type	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#get_type(str) abort$/;"	f
ale_linters#bib#bibclean#match_msg	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_msg(line) abort$/;"	f
ale_linters#bib#bibclean#match_entry	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_entry(line) abort$/;"	f
ale_linters#bib#bibclean#match_value	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_value(line) abort$/;"	f
ale_linters#bib#bibclean#Handle	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#Handle(buffer, lines) abort$/;"	f
ale_linters#gitcommit#gitlint#GetExecutable	plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetExecutable(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#GetCommand	plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetCommand(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#Handle	plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#swaglint#Handle	plugged/ale/ale_linters/yaml/swaglint.vim	/^function! ale_linters#yaml#swaglint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#circleci#Handle	plugged/ale/ale_linters/yaml/circleci.vim	/^function! ale_linters#yaml#circleci#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#language_server#GetProjectRoot	plugged/ale/ale_linters/fortran/language_server.vim	/^function! ale_linters#fortran#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#fortran#gcc#Handle	plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#gcc#GetCommand	plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#sml#smlnj_cm#GetCommand	plugged/ale/ale_linters/sml/smlnj_cm.vim	/^function! ale_linters#sml#smlnj_cm#GetCommand(buffer) abort$/;"	f
ale_linters#julia#languageserver#GetCommand	plugged/ale/ale_linters/julia/languageserver.vim	/^function! ale_linters#julia#languageserver#GetCommand(buffer) abort$/;"	f
ale_linters#idris#idris#GetCommand	plugged/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#GetCommand(buffer) abort$/;"	f
ale_linters#idris#idris#Handle	plugged/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#Handle(buffer, lines) abort$/;"	f
ale_linters#slim#slimlint#GetCommand	plugged/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#GetCommand(buffer) abort$/;"	f
ale_linters#slim#slimlint#Handle	plugged/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#jshint#GetCommand	plugged/ale/ale_linters/javascript/jshint.vim	/^function! ale_linters#javascript#jshint#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetExecutable	plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#standard#GetCommand	plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#flow_ls#FindProjectRoot	plugged/ale/ale_linters/javascript/flow_ls.vim	/^function! ale_linters#javascript#flow_ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#javascript#jscs#GetCommand	plugged/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#jscs#Handle	plugged/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow#GetExecutable	plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#flow#GetCommand	plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetCommand(buffer, version) abort$/;"	f
GetJSONLines	plugged/ale/ale_linters/javascript/flow.vim	/^function! s:GetJSONLines(lines) abort$/;"	f
ExtraErrorMsg	plugged/ale/ale_linters/javascript/flow.vim	/^function! s:ExtraErrorMsg(current, new) abort$/;"	f
GetDetails	plugged/ale/ale_linters/javascript/flow.vim	/^function! s:GetDetails(error) abort$/;"	f
ale_linters#javascript#flow#Handle	plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#Handle(buffer, lines) abort$/;"	f
ale_linters#cloudformation#cfn_python_lint#Handle	plugged/ale/ale_linters/cloudformation/cfn_python_lint.vim	/^function! ale_linters#cloudformation#cfn_python_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#sass#sasslint#GetExecutable	plugged/ale/ale_linters/sass/sasslint.vim	/^function! ale_linters#sass#sasslint#GetExecutable(buffer) abort$/;"	f
ale_linters#sass#sasslint#GetCommand	plugged/ale/ale_linters/sass/sasslint.vim	/^function! ale_linters#sass#sasslint#GetCommand(buffer) abort$/;"	f
ale_linters#objc#clangd#GetCommand	plugged/ale/ale_linters/objc/clangd.vim	/^function! ale_linters#objc#clangd#GetCommand(buffer) abort$/;"	f
g:ale_objc_clang_options	plugged/ale/ale_linters/objc/clang.vim	/^    let g:ale_objc_clang_options = '-std=c11 -Wall'$/;"	v
ale_linters#objc#clang#GetCommand	plugged/ale/ale_linters/objc/clang.vim	/^function! ale_linters#objc#clang#GetCommand(buffer) abort$/;"	f
ale_linters#inko#inko#GetCommand	plugged/ale/ale_linters/inko/inko.vim	/^function! ale_linters#inko#inko#GetCommand(buffer) abort$/;"	f
ale_linters#puppet#puppet#Handle	plugged/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#puppet#GetCommand	plugged/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#GetCommand(buffer) abort$/;"	f
ale_linters#puppet#puppetlint#GetCommand	plugged/ale/ale_linters/puppet/puppetlint.vim	/^function! ale_linters#puppet#puppetlint#GetCommand(buffer) abort$/;"	f
ale_linters#puppet#languageserver#GetProjectRoot	plugged/ale/ale_linters/puppet/languageserver.vim	/^function! ale_linters#puppet#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#apiblueprint#drafter#HandleErrors	plugged/ale/ale_linters/apiblueprint/drafter.vim	/^function! ale_linters#apiblueprint#drafter#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#ocamlinterface#merlin#Handle	plugged/ale/ale_linters/ocamlinterface/merlin.vim	/^function! ale_linters#ocamlinterface#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#c#flawfinder#GetCommand	plugged/ale/ale_linters/c/flawfinder.vim	/^function! ale_linters#c#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#c#clangtidy#GetCommand	plugged/ale/ale_linters/c/clangtidy.vim	/^function! ale_linters#c#clangtidy#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#cppcheck#GetCommand	plugged/ale/ale_linters/c/cppcheck.vim	/^function! ale_linters#c#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#c#cc#GetExecutable	plugged/ale/ale_linters/c/cc.vim	/^function! ale_linters#c#cc#GetExecutable(buffer) abort$/;"	f
ale_linters#c#cc#GetCommand	plugged/ale/ale_linters/c/cc.vim	/^function! ale_linters#c#cc#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#cquery#GetProjectRoot	plugged/ale/ale_linters/c/cquery.vim	/^function! ale_linters#c#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#c#cquery#GetInitializationOptions	plugged/ale/ale_linters/c/cquery.vim	/^function! ale_linters#c#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#c#clangd#GetCommand	plugged/ale/ale_linters/c/clangd.vim	/^function! ale_linters#c#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#fish#fish#Handle	plugged/ale/ale_linters/fish/fish.vim	/^function! ale_linters#fish#fish#Handle(buffer, lines) abort$/;"	f
ale_linters#d#dls#GetExecutable	plugged/ale/ale_linters/d/dls.vim	/^function! ale_linters#d#dls#GetExecutable(buffer) abort$/;"	f
ale_linters#d#dls#FindProjectRoot	plugged/ale/ale_linters/d/dls.vim	/^function! ale_linters#d#dls#FindProjectRoot(buffer) abort$/;"	f
GetDUBCommand	plugged/ale/ale_linters/d/dmd.vim	/^function! s:GetDUBCommand(buffer) abort$/;"	f
ale_linters#d#dmd#RunDUBCommand	plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#RunDUBCommand(buffer) abort$/;"	f
ale_linters#d#dmd#DMDCommand	plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#DMDCommand(buffer, dub_output, meta) abort$/;"	f
ale_linters#d#dmd#Handle	plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#Handle(buffer, lines) abort$/;"	f
ale_linters#v#v#GetCommand	plugged/ale/ale_linters/v/v.vim	/^function! ale_linters#v#v#GetCommand(buffer) abort$/;"	f
ale_linters#v#v#Handler	plugged/ale/ale_linters/v/v.vim	/^function! ale_linters#v#v#Handler(buffer, lines) abort$/;"	f
ale_linters#ruby#brakeman#Handle	plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#brakeman#GetCommand	plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rubocop#GetCommand	plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rubocop#GetType	plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetType(severity) abort$/;"	f
ale_linters#ruby#debride#GetCommand	plugged/ale/ale_linters/ruby/debride.vim	/^function! ale_linters#ruby#debride#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#debride#HandleOutput	plugged/ale/ale_linters/ruby/debride.vim	/^function! ale_linters#ruby#debride#HandleOutput(buffer, lines) abort$/;"	f
ale_linters#ruby#solargraph#GetCommand	plugged/ale/ale_linters/ruby/solargraph.vim	/^function! ale_linters#ruby#solargraph#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#sorbet#GetCommand	plugged/ale/ale_linters/ruby/sorbet.vim	/^function! ale_linters#ruby#sorbet#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#reek#GetCommand	plugged/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#GetCommand(buffer, version) abort$/;"	f
BuildText	plugged/ale/ale_linters/ruby/reek.vim	/^function! s:BuildText(buffer, error) abort$/;"	f
ale_linters#ruby#reek#Handle	plugged/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#standardrb#GetCommand	plugged/ale/ale_linters/ruby/standardrb.vim	/^function! ale_linters#ruby#standardrb#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rails_best_practices#Handle	plugged/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#rails_best_practices#GetCommand	plugged/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#GetCommand(buffer) abort$/;"	f
ale_linters#reason#ls#FindProjectRoot	plugged/ale/ale_linters/reason/ls.vim	/^function! ale_linters#reason#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#reason#merlin#Handle	plugged/ale/ale_linters/reason/merlin.vim	/^function! ale_linters#reason#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqllint#Handle	plugged/ale/ale_linters/sql/sqllint.vim	/^function! ale_linters#sql#sqllint#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqlint#Handle	plugged/ale/ale_linters/sql/sqlint.vim	/^function! ale_linters#sql#sqlint#Handle(buffer, lines) abort$/;"	f
q	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> q :q!<CR>$/;"	m
v	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> v <NOP>$/;"	m
i	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> i <NOP>$/;"	m
I	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> I <NOP>$/;"	m
<C-q>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-q> <NOP>$/;"	m
<C-v>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-v> <NOP>$/;"	m
<S-v>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <S-v> <NOP>$/;"	m
a	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> a <NOP>$/;"	m
A	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> A <NOP>$/;"	m
o	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> o <NOP>$/;"	m
O	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> O <NOP>$/;"	m
<CR>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <CR> :call ale#preview#OpenSelection()<CR>$/;"	m
t	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> t :call ale#preview#OpenSelectionInTab()<CR>$/;"	m
q	plugged/ale/ftplugin/ale-preview.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged/ale/ftplugin/ale-fix-suggest.vim	/^noremap <buffer> q :q!<CR>$/;"	m
tests	plugged/ale/run-tests.bat	/^set tests=test\/*.vader test\/*\/*.vader test\/*\/*\/*.vader test\/*\/*\/*\/*.vader$/;"	v
tests	plugged/ale/run-tests.bat	/^if not "%1"=="" set tests=%1$/;"	v
VADER_OUTPUT_FILE	plugged/ale/run-tests.bat	/^set VADER_OUTPUT_FILE=%~dp0\\vader_output$/;"	v
tries	plugged/ale/run-tests.bat	/^set tries=0$/;"	v
RUN_TESTS	plugged/ale/run-tests.bat	/^:RUN_TESTS$/;"	l
code	plugged/ale/run-tests.bat	/^set code=%ERRORLEVEL%$/;"	v
SHOW_RESULTS	plugged/ale/run-tests.bat	/^:SHOW_RESULTS$/;"	l
__author__	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^__author__ = 'Joao Paulo, w0rp'$/;"	v
Base	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    from deoplete.source.base import Base$/;"	i
Base	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    class Base(object):$/;"	c
__init__	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^        def __init__(self, vim):$/;"	m	class:Base
Source	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^class Source(Base):$/;"	c
__init__	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def __init__(self, vim):$/;"	m	class:Source
get_complete_position	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
gather_candidates	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
g:ale_set_lists_synchronously	plugged/ale/test/.config/nvim/init.vim	/^let g:ale_set_lists_synchronously = 1$/;"	v
g:mapleader	plugged/ale/test/.config/nvim/init.vim	/^let g:mapleader=','$/;"	v
g:ale_ignore_2_4_warnings	plugged/ale/test/.config/nvim/init.vim	/^let g:ale_ignore_2_4_warnings = 1$/;"	v
unittest	plugged/ale/test/python/test_deoplete_source.py	/^import unittest$/;"	i
imp	plugged/ale/test/python/test_deoplete_source.py	/^import imp$/;"	i
ale_module	plugged/ale/test/python/test_deoplete_source.py	/^ale_module = imp.load_source($/;"	v
VimMock	plugged/ale/test/python/test_deoplete_source.py	/^class VimMock(object):$/;"	c
__init__	plugged/ale/test/python/test_deoplete_source.py	/^    def __init__(self, call_list, call_results, commands):$/;"	m	class:VimMock
call	plugged/ale/test/python/test_deoplete_source.py	/^    def call(self, function, *args):$/;"	m	class:VimMock
command	plugged/ale/test/python/test_deoplete_source.py	/^    def command(self, command):$/;"	m	class:VimMock
DeopleteSourceTest	plugged/ale/test/python/test_deoplete_source.py	/^class DeopleteSourceTest(unittest.TestCase):$/;"	c
setUp	plugged/ale/test/python/test_deoplete_source.py	/^    def setUp(self):$/;"	m	class:DeopleteSourceTest
test_attributes	plugged/ale/test/python/test_deoplete_source.py	/^    def test_attributes(self):$/;"	m	class:DeopleteSourceTest
test_complete_position	plugged/ale/test/python/test_deoplete_source.py	/^    def test_complete_position(self):$/;"	m	class:DeopleteSourceTest
test_request_completion_results	plugged/ale/test/python/test_deoplete_source.py	/^    def test_request_completion_results(self):$/;"	m	class:DeopleteSourceTest
test_request_completion_results_from_buffer_without_providers	plugged/ale/test/python/test_deoplete_source.py	/^    def test_request_completion_results_from_buffer_without_providers(self):$/;"	m	class:DeopleteSourceTest
test_async_event	plugged/ale/test/python/test_deoplete_source.py	/^    def test_async_event(self):$/;"	m	class:DeopleteSourceTest
os	plugged/ale/test/script/dumb_tcp_server.py	/^import os$/;"	i
socket	plugged/ale/test/script/dumb_tcp_server.py	/^import socket$/;"	i
sys	plugged/ale/test/script/dumb_tcp_server.py	/^import sys$/;"	i
main	plugged/ale/test/script/dumb_tcp_server.py	/^def main():$/;"	f
socket	plugged/ale/test/script/dumb_tcp_client.py	/^import socket$/;"	i
sys	plugged/ale/test/script/dumb_tcp_client.py	/^import sys$/;"	i
main	plugged/ale/test/script/dumb_tcp_client.py	/^def main():$/;"	f
sys	plugged/ale/test/script/block-padding-checker	/^import sys$/;"	i
re	plugged/ale/test/script/block-padding-checker	/^import re$/;"	i
INDENTATION_RE	plugged/ale/test/script/block-padding-checker	/^INDENTATION_RE = re.compile(r'^ *')$/;"	v
COMMENT_LINE_RE	plugged/ale/test/script/block-padding-checker	/^COMMENT_LINE_RE = re.compile(r'^ *"')$/;"	v
COMMAND_RE	plugged/ale/test/script/block-padding-checker	/^COMMAND_RE = re.compile(r'^ *([a-zA-Z\\\\]+)')$/;"	v
OPERATOR_END_RE	plugged/ale/test/script/block-padding-checker	/^OPERATOR_END_RE = re.compile(r'(&&|\\|\\||\\+|-|\\*\\| \/)$')$/;"	v
START_BLOCKS	plugged/ale/test/script/block-padding-checker	/^START_BLOCKS = set(['if', 'for', 'while', 'try', 'function'])$/;"	v
END_BLOCKS	plugged/ale/test/script/block-padding-checker	/^END_BLOCKS = set(['endif', 'endfor', 'endwhile', 'endtry', 'endfunction'])$/;"	v
MIDDLE_BLOCKS	plugged/ale/test/script/block-padding-checker	/^MIDDLE_BLOCKS = set(['else', 'elseif', 'catch', 'finally'])$/;"	v
TERMINATORS	plugged/ale/test/script/block-padding-checker	/^TERMINATORS = set(['return', 'throw'])$/;"	v
WHITESPACE_BEFORE_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_BEFORE_SET = START_BLOCKS | TERMINATORS$/;"	v
WHITESPACE_FORBIDDEN_BEFORE_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_FORBIDDEN_BEFORE_SET = END_BLOCKS | MIDDLE_BLOCKS$/;"	v
WHITESPACE_AFTER_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_AFTER_SET = END_BLOCKS$/;"	v
WHITESPACE_FORBIDDEN_AFTER_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_FORBIDDEN_AFTER_SET = START_BLOCKS | MIDDLE_BLOCKS$/;"	v
SAME_INDENTATION_SET	plugged/ale/test/script/block-padding-checker	/^SAME_INDENTATION_SET = set(['\\\\'])$/;"	v
remove_comment_lines	plugged/ale/test/script/block-padding-checker	/^def remove_comment_lines(line_iter):$/;"	f
check_lines	plugged/ale/test/script/block-padding-checker	/^def check_lines(line_iter):$/;"	f
main	plugged/ale/test/script/block-padding-checker	/^def main():$/;"	f
os	plugged/ale/test/script/dumb_named_pipe_server.py	/^import os$/;"	i
socket	plugged/ale/test/script/dumb_named_pipe_server.py	/^import socket$/;"	i
sys	plugged/ale/test/script/dumb_named_pipe_server.py	/^import sys$/;"	i
main	plugged/ale/test/script/dumb_named_pipe_server.py	/^def main():$/;"	f
filter	plugged/ale/test/script/run-vader-tests	/^function filter-vader-output() {$/;"	f
color	plugged/ale/test/script/run-vader-tests	/^function color-vader-output() {$/;"	f
print_help	plugged/ale/test/script/custom-linting-rules	/^function print_help() {$/;"	f
check_errors	plugged/ale/test/script/custom-linting-rules	/^check_errors() {$/;"	f
Testfile	plugged/ale/test/test-files/ocaml/testfile.ml	